
.. _program_listing_file__home_runner_work_slint_slint_api_cpp_include_slint_timer.h:

Program Listing for File slint_timer.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_slint_slint_api_cpp_include_slint_timer.h>` (``/home/runner/work/slint/slint/api/cpp/include/slint_timer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright Â© SixtyFPS GmbH <info@slint.dev>
   // SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0
   
   // cSpell: ignore singleshot
   
   #pragma once
   
   #include <chrono>
   #include <slint_timer_internal.h>
   
   #ifndef SLINT_FEATURE_FREESTANDING
   #    include <thread>
   #    include <iostream>
   #endif
   
   namespace slint {
   
   namespace private_api {
   inline void assert_main_thread()
   {
   #ifndef SLINT_FEATURE_FREESTANDING
   #    ifndef NDEBUG
       static auto main_thread_id = std::this_thread::get_id();
       if (main_thread_id != std::this_thread::get_id()) {
           std::cerr << "A function that should be only called from the main thread was called from a "
                        "thread."
                     << std::endl;
           std::cerr << "Most API should be called from the main thread. When using thread one must "
                        "use slint::invoke_from_event_loop."
                     << std::endl;
           std::abort();
       }
   #    endif
   #endif
   }
   } // namespace private_api
   
   using cbindgen_private::TimerMode;
   
   struct Timer
   {
       Timer() = default;
       template<std::invocable F>
       Timer(std::chrono::milliseconds interval, F callback)
           : id(cbindgen_private::slint_timer_start(
                     0, TimerMode::Repeated, interval.count(),
                     [](void *data) { (*reinterpret_cast<F *>(data))(); }, new F(std::move(callback)),
                     [](void *data) { delete reinterpret_cast<F *>(data); }))
       {
           private_api::assert_main_thread();
       }
       Timer(const Timer &) = delete;
       Timer &operator=(const Timer &) = delete;
       ~Timer()
       {
           private_api::assert_main_thread();
           cbindgen_private::slint_timer_destroy(id);
       }
   
       template<std::invocable F>
       void start(TimerMode mode, std::chrono::milliseconds interval, F callback)
       {
           private_api::assert_main_thread();
           id = cbindgen_private::slint_timer_start(
                   id, mode, interval.count(), [](void *data) { (*reinterpret_cast<F *>(data))(); },
                   new F(std::move(callback)), [](void *data) { delete reinterpret_cast<F *>(data); });
       }
       void stop()
       {
           private_api::assert_main_thread();
           cbindgen_private::slint_timer_stop(id);
       }
       void restart()
       {
           private_api::assert_main_thread();
           cbindgen_private::slint_timer_restart(id);
       }
       bool running() const
       {
           private_api::assert_main_thread();
           return cbindgen_private::slint_timer_running(id);
       }
       std::chrono::milliseconds interval() const
       {
           private_api::assert_main_thread();
           return std::chrono::milliseconds(cbindgen_private::slint_timer_interval(id));
       }
   
       template<std::invocable F>
       static void single_shot(std::chrono::milliseconds duration, F callback)
       {
           private_api::assert_main_thread();
           cbindgen_private::slint_timer_singleshot(
                   duration.count(), [](void *data) { (*reinterpret_cast<F *>(data))(); },
                   new F(std::move(callback)), [](void *data) { delete reinterpret_cast<F *>(data); });
       }
   
   private:
       uint64_t id = 0;
   };
   
   } // namespace slint
