
.. _program_listing_file__home_runner_work_slint_slint_api_cpp_include_slint_item_tree.h:

Program Listing for File slint_item_tree.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_slint_slint_api_cpp_include_slint_item_tree.h>` (``/home/runner/work/slint/slint/api/cpp/include/slint_item_tree.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright Â© SixtyFPS GmbH <info@slint.dev>
   // SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0
   
   #pragma once
   
   #include "slint_internal.h"
   #include "slint_window.h"
   
   namespace slint {
   namespace private_api {
   // Bring opaque structure in scope
   using namespace cbindgen_private;
   using ItemTreeRef = vtable::VRef<private_api::ItemTreeVTable>;
   using IndexRange = cbindgen_private::IndexRange;
   using ItemRef = vtable::VRef<private_api::ItemVTable>;
   using ItemVisitorRefMut = vtable::VRefMut<cbindgen_private::ItemVisitorVTable>;
   using ItemTreeNode = cbindgen_private::ItemTreeNode;
   using ItemArrayEntry =
           vtable::VOffset<uint8_t, slint::cbindgen_private::ItemVTable, vtable::AllowPin>;
   using ItemArray = slint::cbindgen_private::Slice<ItemArrayEntry>;
   
   constexpr inline ItemTreeNode make_item_node(uint32_t child_count, uint32_t child_index,
                                                uint32_t parent_index, uint32_t item_array_index,
                                                bool is_accessible)
   {
       return ItemTreeNode { ItemTreeNode::Item_Body { ItemTreeNode::Tag::Item, is_accessible,
                                                       child_count, child_index, parent_index,
                                                       item_array_index } };
   }
   
   constexpr inline ItemTreeNode make_dyn_node(std::uint32_t offset, std::uint32_t parent_index)
   {
       return ItemTreeNode { ItemTreeNode::DynamicTree_Body { ItemTreeNode::Tag::DynamicTree, offset,
                                                              parent_index } };
   }
   
   inline ItemRef get_item_ref(ItemTreeRef item_tree,
                               const cbindgen_private::Slice<ItemTreeNode> item_tree_array,
                               const private_api::ItemArray item_array, int index)
   {
       const auto item_array_index = item_tree_array.ptr[index].item.item_array_index;
       const auto item = item_array[item_array_index];
       return ItemRef { item.vtable, reinterpret_cast<char *>(item_tree.instance) + item.offset };
   }
   
   } // namespace private_api
   
   template<typename T>
   class ComponentWeakHandle;
   
   template<typename T>
   class ComponentHandle
   {
       vtable::VRc<private_api::ItemTreeVTable, T> inner;
       friend class ComponentWeakHandle<T>;
   
   public:
       ComponentHandle(const vtable::VRc<private_api::ItemTreeVTable, T> &inner) : inner(inner) { }
   
       const T *operator->() const
       {
           private_api::assert_main_thread();
           return inner.operator->();
       }
       const T &operator*() const
       {
           private_api::assert_main_thread();
           return inner.operator*();
       }
       T *operator->()
       {
           private_api::assert_main_thread();
           return inner.operator->();
       }
       T &operator*()
       {
           private_api::assert_main_thread();
           return inner.operator*();
       }
   
       vtable::VRc<private_api::ItemTreeVTable> into_dyn() const { return inner.into_dyn(); }
   };
   
   template<typename T>
   class ComponentWeakHandle
   {
       vtable::VWeak<private_api::ItemTreeVTable, T> inner;
   
   public:
       ComponentWeakHandle() = default;
       ComponentWeakHandle(const ComponentHandle<T> &other) : inner(other.inner) { }
       std::optional<ComponentHandle<T>> lock() const
       {
           private_api::assert_main_thread();
           if (auto l = inner.lock()) {
               return { ComponentHandle(*l) };
           } else {
               return {};
           }
       }
   };
   
   }
