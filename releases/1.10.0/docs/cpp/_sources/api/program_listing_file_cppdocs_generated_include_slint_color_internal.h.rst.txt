
.. _program_listing_file_cppdocs_generated_include_slint_color_internal.h:

Program Listing for File slint_color_internal.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_cppdocs_generated_include_slint_color_internal.h>` (``cppdocs/generated_include/slint_color_internal.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   /* Generated with cbindgen:0.26.0 */
   
   #include <cstdarg>
   #include <cstdint>
   #include <cstdlib>
   #include <ostream>
   #include <new>
   #include "slint_enums_internal.h"
   
   namespace slint {
   namespace cbindgen_private {
   namespace types {
   
   struct Color {
       uint8_t red;
       uint8_t green;
       uint8_t blue;
       uint8_t alpha;
   
       bool operator==(const Color& other) const {
           return red == other.red &&
                  green == other.green &&
                  blue == other.blue &&
                  alpha == other.alpha;
       }
       bool operator!=(const Color& other) const {
           return red != other.red ||
                  green != other.green ||
                  blue != other.blue ||
                  alpha != other.alpha;
       }
   };
   
   extern "C" {
   
   void slint_color_brighter(const Color *col, float factor, Color *out);
   
   void slint_color_darker(const Color *col, float factor, Color *out);
   
   void slint_color_transparentize(const Color *col, float factor, Color *out);
   
   void slint_color_mix(const Color *col1, const Color *col2, float factor, Color *out);
   
   void slint_color_with_alpha(const Color *col, float alpha, Color *out);
   
   void slint_color_to_hsva(const Color *col, float *h, float *s, float *v, float *a);
   
   Color slint_color_from_hsva(float h, float s, float v, float a);
   
   } // extern "C"
   
   } // namespace types
   } // namespace cbindgen_private
   } // namespace slint
