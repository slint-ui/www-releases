rd_("oAlpha ComponentAlAlpha component of the color01nBlue Component0AkBlue component of the color011oGreen Component0AlGreen component of the color011mRed Component0AjRed component of the color011AaThe x coordinate.0AhX position of the originBiThe number of work groups in X dimension.1022AaThe y coordinate.0AhY position of the originBiThe number of work groups in Y dimension.1022AhZ position of the originBiThe number of work groups in Z dimension.10BcCast a simple type to another kind.0i2D vector0CmTriangles with vertices in clockwise order are considered \xe2\x80\xa60EhA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>\xe2\x80\xa6j1D textureh1D image021EhA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>\xe2\x80\xa6j2D textureh2D image021DdA three dimensional texture. <code>texture_3d</code> in WGSL and \xe2\x80\xa6j3D textureh3D image021Di<code>Backend::Gl</code>. Supported on Linux/Android, the web through \xe2\x80\xa6CjOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, \xe2\x80\xa60B`An identifier for a wgpu object.CjConditionally executes one of two blocks, based on the \xe2\x80\xa60AjContains the success value0AhThe drm file descriptor.BfThe file descriptor of the DRM device.DdOptions for the OpenGL/OpenGLES backend, [<code>Backend::Gl</code>].00AePipeline Constant ID.0ChAn ID value inserted into the data attributes of the \xe2\x80\xa6CkThe Intermediate Representation shared by all frontends \xe2\x80\xa6AiWhat operation to compute0CaKind of query that this query set should contain.AgThe type of the bindingAbType of the field.AjThe type of this variable.0AeType of the argument.AcType of the result.AlThe type of this expression.AfThe type of the resultBbThe current function being writtenCiType of the uniform. This will only ever be a scalar, \xe2\x80\xa6766542989AoSub-type of the buffer binding.0CnArray of all <code>Backend</code> values, corresponding to \xe2\x80\xa6AnEnable writes to all channels.iSrc + Dst0AjDepth, Stencil, and Color.0CjTriangles with vertices in counter clockwise order are \xe2\x80\xa60AiCpu / Software Rendering.0AjSurface from a DRM device.ClA raw window handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6CmA raw display handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6kD.component0AhContains the error value0AkMay not be NaN or infinity.00000CiThe Fxc compiler (default) is old, slow and unmaintained.00CiA raw window handle for the Linux Generic Buffer Manager.CjA raw display handle for the Linux Generic Buffer Manager.Cmfloating-point RGBA, linear-color float can be outside of \xe2\x80\xa60DbAll the resources tracked by a <code>crate::global::Global</code>.DhThe <code>Key</code> enum is used to map a specific key by name e.g. \xe2\x80\xa6mmax(Src, Dst)0mmin(Src, Dst)0B`Passthrough for MSL source code.00AaTracing disabled.0c1.00AiEnable red channel writesClExtremely limited shaders, including a total instruction \xe2\x80\xa60BjMissing minor features and storage images.0B`WebGPU supports shader module 5.0kS.component0i3D vector0B`A raw window handle for the Web.BaA raw display handle for the Web.AlA raw window handle for Xcb.AmA raw display handle for Xcb.BiAdds a new variable to the current scope.BmIncrement the counter by the provided amount.BjGet a flags value with all known bits set.0B`Returns self with all flags set.111111111111ClCreates a new configuration where all checks are enabled \xe2\x80\xa62222222222BdReturns slice of all variants of \xe2\x80\xa63333333333333333CfFind the overloads that could accept a given argument.BiThe upper bound of the range (exclusive).BdFunction to run on the atomic value.CeThe kind of atomic operation to perform on the texel.D`The specific operation we\xe2\x80\x99re performing on <code>query</code>.210CmReturns a reference that\xe2\x80\x99s tied to the life time of the \xe2\x80\xa6BaGet a reference to all instances.D`Return this arena\xe2\x80\x99s handle for <code>value</code>, if present.2Ao<code>wgpu-hal</code> counters.0ClAllocating resource ids, and tracking the resources they \xe2\x80\xa6AoNumber of elements in the arrayCcSize of the string, in bytes. This excludes the \xe2\x80\xa6ChReturn the current number of items stored in this arena.CiReturns the current number of items stored in this arena.32ClReturns a new Model where all elements are mapped by the \xe2\x80\xa6AaThe maximum size.AiSlint on MicrocontrollersAaThe minimum size.DkReturns a new color that is a mix of this color and <code>other</code>. \xe2\x80\xa60AnCreates a new BackendSelector.BiCreate a new window from a window adapterDhCreates a new MapModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DkCreates a new FilterModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DiCreates a new SortModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DkCreates a new ReverseModel based on the given <code>wrapped_model</code>\xe2\x80\xa6CkConstruct a new logical position from the given x and y \xe2\x80\xa6ClConstruct a new physical position from the given x and y \xe2\x80\xa6CiConstruct a new logical size from the given width and \xe2\x80\xa6CkConstruct a new physical size from the width and height \xe2\x80\xa6ClCreates a new SharedPixelBuffer with the given width and \xe2\x80\xa6AjCreates a new empty stringBfInstantiate a new MinimalWindowAdaptorAeCreate a new RendererChCreates a new instance that is reference counted and \xe2\x80\xa6AgConstruct TlasInstance.AoCreate an new instance of wgpu.AjCreate a new staging belt.C`Returns a new <code>TextureBlitterBuilder</code>ClReturns a <code>TextureBlitter</code> with default settings.CfCreate a new arena with no initial capacity allocated.0ClCreates a new <code>Span</code> from a range of byte indicesEcCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.BcConstruct a new validator instance.D`Creates a new <code>Options</code> without doc comments parsing.BkCreates a new <code>Writer</code> instance.DjReturns <code>None</code> if the entry point with the provided name can\xe2\x80\xa6AoCreates a counter with value 0.BbCreate a new empty display handle.CeCreate a new handle to an <code>ANativeWindow</code>.1AnCreate a new handle to a view.2B`Create a new handle to a window.3DeCreate a new handle to an <code>OHNativeWindow</code> on OpenHarmony.4142BaCreate a new handle to a display.2BoCreate a new handle to a connection and screen.3AlCreate a new display handle.BaCreate a new handle to a surface.BiCreate a new handle to a file descriptor.AoCreate a new handle to a plane.B`Create a new handle to a device.3;BhCreate a new handle to a canvas element.DeCreate a new handle from a pointer to <code>HtmlCanvasElement</code>.DfCreate a new handle from a pointer to an <code>OffscreenCanvas</code>.>;;BdCreates a new default configuration.AnCreates a new BackendSelector.B`Returns a new ComponentCompiler.AgReturns a new Compiler.BiCreate a new window from a window adapterCkConstruct a new logical position from the given x and y \xe2\x80\xa6ClConstruct a new physical position from the given x and y \xe2\x80\xa6CiConstruct a new logical size from the given width and \xe2\x80\xa6CkConstruct a new physical size from the width and height \xe2\x80\xa6ClCreates a new SharedPixelBuffer with the given width and \xe2\x80\xa6AjCreates a new empty stringCjCompile and instantiate a component from the specified \xe2\x80\xa6DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6000000000000000000000000000000000000000DkA pointer to the <code>JsValue</code> of an <code>HtmlCanvasElement</code>.DiA pointer to the <code>JsValue</code> of an <code>OffscreenCanvas</code>.CkWhat operations will be performed on this color attachment.CnRemoves last element from the array and returns it. If the \xe2\x80\xa60CfGet access to the raw resource if it is not destroyed.CkReturns the red channel of the color as u8 in the range \xe2\x80\xa6A`The red channel.10DjThis is a convenience function that first calls <code>Self::show</code>\xe2\x80\xa600GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa60EcCalls <code>Self::insert</code> if <code>set</code> is true and otherwise calls \xe2\x80\xa611111111111111111111111111111111111111BgSets the counter to the provided value.CfBackend for SPIR-V (Standard Portable Intermediate \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa6000000000000000000000000000000000000000BmDecrement the counter by the provided amount.BbCreate a Web-based display handle.ClZip together an identifier and return its raw underlying \xe2\x80\xa6CjIntersecting with Axis Aligned Bounding Boxes. Matches \xe2\x80\xa60Bmblock compressed texture. 16 bytes per block.0EhChooses either <code>Opaque</code> or <code>Inherit</code> automatically\xef\xbc\x8cdepending \xe2\x80\xa60Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60Ci5x4 block compressed texture. 16 bytes per block (6.4 \xe2\x80\xa60Cj5x5 block compressed texture. 16 bytes per block (5.12 \xe2\x80\xa60Cj6x5 block compressed texture. 16 bytes per block (4.27 \xe2\x80\xa60Cj6x6 block compressed texture. 16 bytes per block (3.56 \xe2\x80\xa60Ci8x5 block compressed texture. 16 bytes per block (3.2 \xe2\x80\xa60Cj8x6 block compressed texture. 16 bytes per block (2.67 \xe2\x80\xa60Cg8x8 block compressed texture. 16 bytes per block (2 \xe2\x80\xa60AjEnable blue channel writesA`The back button.iBack face0BkBottom Level Acceleration Structure (BLAS).mBoolean type.0CbCorrespond to the <code>bool</code> type in .slint0AnThe data can be copied around.AaCalls a function.0EhA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in \xe2\x80\xa6hCube map01AoCan be used for data variables.Cm<code>Backend::Dx12</code>. Supported on Windows 10 and laterCmThe model data: A model is a set of rows and each row has \xe2\x80\xa6AeDirect3D-12 (Windows)0BfPassthrough for DXIL compiled with DXC00CjEmit a range of expressions, visible to all statements \xe2\x80\xa60AaFace of a vertex.0CnPresentation frames are kept in a First-In-First-Out queue \xe2\x80\xa60AcPolygons are filled0CbIndicates that no interpolation will be performed.0jNo issues.0AdPassthrough for HLSL00AiAn informational message.AmKeep stencil value unchanged.0BdAborts the current shader execution.0BmStorage can be used as a source for load ops.A`The left button.CeFunction passes if new value less than existing value0BcPolygons are drawn as line segments0CiLoads the existing value for this attachment into the \xe2\x80\xa6AhLoad a value indirectly.011AlExecutes a block repeatedly.0CgThe swap chain has been lost and needs to be recreated.BiThe surface under the swap chain is lost.0CjBinding is visible from the mesh shader of a mesh pipelineAdCall a math function0BmBinding is not visible from any shader stage.Ak<code>Backend::Noop</code>.BcYUV 4:2:0 chroma subsampled format.0iNo value.CgPower usage is not considered when choosing an adapter.1BbNo intersection found. Matches \xe2\x80\xa6021BmDummy backend, which may be used for testing.0D`Blend state of <code>(1 * src) + ((1 - src_alpha) * dst)</code>.BkA raw display handle for OpenHarmony OS NDKCdCheck the device for a single time without blocking.A`This was a poll.10i4D vector0BdData will be read from the variable.AdMap only for readingAcA single type rule.BaSampling returns signed integers.AdSigned integer type.01BdGet the size at the specified level.0BbSome value of type <code>T</code>.00BmA source code span, used for error reporting.lS1.component0A`sRGB color space0CjBinding is visible from the task shader of a mesh pipelineBhTop Level Acceleration Structure (TLAS).BcA data type declared in the module.0BcSampling returns unsigned integers.AfUnsigned integer type.01hAny, AllChThe variant that expresses the non-type. This is the \xe2\x80\xa6CmThere is nothing in this value. That\xe2\x80\x99s the default. For \xe2\x80\xa6DfSame as <code>WaitForSubmissionIndex</code> but waits for the most \xe2\x80\xa60CkStruct that\xe2\x80\x99s used to hold weak references of a Slint \xe2\x80\xa60AnWGSL module as a string slice.AmA raw window handle for Xlib.AnA raw display handle for Xlib.lZero origin.0c0.0AjSet stencil value to zero.BoOn the Metal backend, this is equivalent to \xe2\x80\xa6210oBack face mode.DiBackend functions that export shader <code>Module</code>s into binary \xe2\x80\xa61AaDepth bias state.0AnGet the underlying bits value.0CkGets the set flags as a container holding an array of bits.11111111111111111111111111111111111111BhReference to the acceleration structure.ClReturns the blue channel of the color as u8 in the range \xe2\x80\xa6AaThe blue channel.10AaBody of the case.CjBlock of instructions comprising the body of the function.10ChReturn a new identifier based on <code>label_raw</code>.DjConvert the scalar components of <code>expr</code> to <code>target</code>.DjCopies the data from the source <code>TextureView</code> to the target \xe2\x80\xa6B`<code>wgpu-core</code> counters.0C`The data used to initialise the cache initialiseCnThis is a pseudo module which only exist for documentation \xe2\x80\xa6CbDraws primitives from the active vertex buffer(s).00CkOptions for the DX12 backend, [<code>Backend::Dx12</code>].00CjSource expression, which can only be a scalar or a vector.0AoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CgConvert a <code>BufferSlice</code> to an equivalent \xe2\x80\xa611EcConvert a <code>BufferSlice</code> to an equivalent <code>BufferBinding</code>, \xe2\x80\xacGLES API internals.BkBackend for GLSL (OpenGL Shading Language).DkGrow this typifier until it contains a type for <code>expr_handle</code>\xe2\x80\xa6DjConvenience function for <code>crate::Window::hide()</code>. Hides the \xe2\x80\xa6ClHides the window, so that it is not visible anymore. The \xe2\x80\xa6110BoBackend for HLSL (High-Level Shading Language).BaA Win32 <code>HWND</code> handle.AkAnalysis about the functionBcAnalysis information of the module.B`Initializes the Android backend.CgThe default value of the pipeline-overridable constant.AjThe value of the constant.B`Initial value for this variable.02100BaCalls <code>U::from(self)</codegReturns an iterator visiting all elements of the model.CkReturns an iterator over the rectangles in this region. \xe2\x80\xa6BfYield a set of contained flags values.0BgReturns an iterator over the set flags.111111111111ClReturns an iterator over the items stored in this arena, \xe2\x80\xa6022222222222222222222222222BjIterate over all the fields in this structCjThis module contains the code serialize and desrialize \xe2\x80\xa6BmHow the value\xe2\x80\x99s bits are to be interpreted.AcTarget scalar kind.10AiKind of values to sample.0C`How data should be read through this attachment.0CjObtain a lock to the EGL context and get handle to the \xe2\x80\xa6CjMask for the instance used inside the shader to filter \xe2\x80\xa6CmBitmask that restricts the samples of a pixel modified by \xe2\x80\xa60AiUtilitary math functions.AeRange of mips to use.BeSpecifies which thread to gather from0CnWhether the buffer is indexed by vertex number or instance \xe2\x80\xa6lAdapter nameAmThe name of the type, if any.AmName of the variable, if any.0AmName of the argument, if any.AmName of the function, if any.BmName of this entry point, visible externally.433210CjThe name provided to the <code>allocate()</code> function.6ChThe name of this Component as written in the .slint fileCkOptions for the noop backend, [<code>Backend::Noop</code>].AkA dummy API implementation.11BkCreate an OpenHarmony-based display handle.CdReturns the path of the image on disk, if it was \xe2\x80\xa60CkCheck for resource cleanups and mapping callbacks. Will \xe2\x80\xa6Bm<code>Module</code> processing functionality.BaAdd a row at the end of the modelCnAdd an element to the array. If the array was shared, this \xe2\x80\xa60AjGet the counter\xe2\x80\x99s value.DkConvenience function for <code>crate::Window::show()</code>. This shows \xe2\x80\xa6ChShows the window on the screen. An additional strong \xe2\x80\xa6110CmReturns the size of the window on the screen, in physical \xe2\x80\xa6BhReturns the size of the image in pixels.BhReturns the size of the Image in pixels.BkReturn the size of the Window on the screenBbThe new logical size of the windowCeReturns the length of the buffer allocation in bytes.AoReturns the size of this slice.BnReturns the size of this <code>Texture</code>.BdReturns the byte size of the format.AkSize of a buffer, in bytes.ClSize of the texture. All components must be greater than \xe2\x80\xa6DiSize of the binding in bytes, or <code>None</code> for using the rest \xe2\x80\xa6ChSub descriptor for the size defining attributes of a \xe2\x80\xa6AjGet the size of this type.43BgThe size of the region bound, in bytes.BdThe size in bytes of the allocation.BgThe size in bytes of this memory block.76CmReturns the size of the window on the screen, in physical \xe2\x80\xa6BhReturns the size of the image in pixels.BhReturns the size of the Image in pixels.CeReturns a new Model where the elements are sorted \xe2\x80\xa6CkStops the previously started timer. Does nothing if the \xe2\x80\xa6B`Swaps two elements in the model.BdGet and reset the counter\xe2\x80\x99s value.AlThe text content of the itemBnThe unicode representation of the key pressed.0BoThe unicode representation of the key released.CmUtility structures and functions that are built on top of \xe2\x80\xa6BaThe view to use as an attachment.00000ChWait for <code>fence</code> to reach <code>value</code>.BkConstruct a <code>Self::Wait</code> variantCaCode shared between the WGSL front and back ends.BlKeywords for WGSL (WebGPU Shading Language).BlFrontend for WGSL (WebGPU Shading Language).ClThe types of the acceleration structure are axis aligned \xe2\x80\xa6AkEnable alpha channel writesCkAllows an additional depth/stencil test to be performed \xe2\x80\xa60ChAn arena holding some kind of component (e.g., type, \xe2\x80\xa6AmHomogeneous list of elements.0Ck10x5 block compressed texture. 16 bytes per block (2.56 \xe2\x80\xa60Ck10x6 block compressed texture. 16 bytes per block (2.13 \xe2\x80\xa60Cj10x8 block compressed texture. 16 bytes per block (1.6 \xe2\x80\xa60nElect, BarrierChA code block is a vector of statements, with maybe a \xe2\x80\xa6CfA block containing more statements, to be executed \xe2\x80\xa610DgExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.0CnA brush is a data structure that is used to describe how a \xe2\x80\xa60EfCorrespond to <code>brush</code> or <code>color</code> type in .slint.  For color, \xe2\x80\xa60AlAlways perform a full build.0AkNumber of bytes per scalar.0BjEnable red, green, and blue channel writesCjLoads the specified value for this attachment into the \xe2\x80\xa600CgDirectly duplicate an acceleration structure to anotherCcColor represents a color in the Slint run-time, \xe2\x80\xa6AlRGBA double precision color.01CbGenerate debug information in shaders and objects.BdInclude debug labels for everything.BmSampling does the depth reference comparison.AgDepth comparison image.01ClReturned immediately when an attempt is made to encode a \xe2\x80\xa6ClFunction passes if new value is equal to existing value. \xe2\x80\xa60BhErrors resulting from usage of GPU APIs.AaAn error message.AiA GLSL compilation error.CmThe diagnostic found is an error that prevents successful \xe2\x80\xa6CiA value you can block on to wait for something to finish.CnThe <code>Api::Fence</code> type for <code>vulkan::Api</code>.CmUse the value provided by the first vertex of the current \xe2\x80\xa60AhSampling returns floats.AdFloating point type.01CgRequires depth/stencil tests to be performed before \xe2\x80\xa60jFront face0AkEnable green channel writesAnA raw window handle for Haiku.AoA raw display handle for Haiku.CjAllow a buffer to be the index buffer in a draw operation.BbThe index buffer used for drawing.CmAn image type that can be displayed by the Image element. \xe2\x80\xa6BjPossibly multidimensional array of texels.01C`Correspond to <code>image</code> type in .slint.CcCorrespond to the <code>image</code> type in .slintCgValues of this type always have the given number of \xe2\x80\xa60AgObject debugging label.AbIndentation level.Ch<code>Backend::Metal</code>. Supported on macOS and iOS.AkMetal API (Apple platforms)0ClA Model is providing Data for the repeated elements with \xe2\x80\xa6BgA model (that includes array in .slint)0CnThis processor assigns names to all the things in a module \xe2\x80\xa6AeFunction never passes0BhAnother platform-specific error occurred0CiA button that is none of left, right, middle, back or \xe2\x80\xa6AaOther or Unknown.CjAcquiring a texture failed with a generic error. Check \xe2\x80\xa613AlPolygons are drawn as points0BjThe information about the data is queried.BfHandle to a command queue on a device.BbA strongly typed range of handles.CcThe raw underlying representation of an identifier.AaThe right button.CiThe data type has a size known by pipeline creation time.BnStorage can be used as a target for store ops.CbOne signed byte (i8). <code>i32</code> in shaders.0B`Passthrough for SPIR-V binaries.00AkSplat scalar into a vector.0CjStores the resulting value of the render pass for this \xe2\x80\xa6AmStores a value at an address.011CiTimer is a handle to the timer system that triggers a \xe2\x80\xa6CnControls API call tracing and specifies where the trace is \xe2\x80\xa60CfA raw window handle for UIKit (Apple\xe2\x80\x99s non-macOS \xe2\x80\xa6CgA raw display handle for UIKit (Apple\xe2\x80\x99s non-macOS \xe2\x80\xa6CdOne unsigned byte (u8). <code>u32</code> in shaders.0AhApply an unary operator.0Cb8 bit integer RGBA, [0, 255] converted to/from \xe2\x80\xa60DiA type that can be entirely characterized by a <code>TypeInner</code> \xe2\x80\xa6DhA free-floating <code>TypeInner</code>, representing a type that may \xe2\x80\xa6CgThis is a dynamically typed value used in the Slint \xe2\x80\xa6BeData will be written to the variable.CkThe rendering is done on a HTML Canvas element using WebGL.0AnA raw window handle for Win32.AnA raw window handle for WinRT.AdMap only for writingClIf the future hasn\xe2\x80\x99t completed yet, this will make the \xe2\x80\xa60CmReturns the alpha channel of the color as u8 in the range \xe2\x80\xa6AdThe alpha component.oAlpha equation.021B`Angle of the rotation in degreesD`The bitwise or (<code>|</code>) of the bits in two flags values.000000000000000000000000000000000000000BaBlend a single pixel with a colorBlThe blending that is used for this pipeline.0Akcompressed block dimensions0CiCompletes the process of building a slint::Image that \xe2\x80\xa6CnReturns a new <code>TextureBlitter</code> with given settings.CfThe pipeline cache to use when creating this pipeline.00000CjThe cache which will be used and filled when compiling \xe2\x80\xa600BbDepth bias clamp value (absolute).0BeClears the model, removing all valuesBkClears the vector and removes all elements.BjClears the arena, keeping all allocations.BhClears the arena keeping all allocationsDfRemove all entries from this <code>Layouter</code>, retaining storage.3CfIf the brush is SolidColor, the contained color is \xe2\x80\xa6oColor equation.01CnTotal count of queries the set contains. Must not be zero. \xe2\x80\xa6CnThe number of samples calculated per pixel (for MSAA). For \xe2\x80\xa6CeIf the binding is an array of multiple resources. \xe2\x80\xa62102CnWhat operations will be performed on the depth part of the \xe2\x80\xa60CjDrains the arena, returning an iterator over the items \xe2\x80\xa6BfGet a flags value with all bits unset.0AoReturns self with no flags set.11111111111111111111111111111111111111AcVulkan entry point.CnIf the pass is invalid, contains the error that caused the \xe2\x80\xa60BmShared types for WebGPU errors. See also: \xe2\x80\xa6AgFlags for the geometry.CbFlags for the bottom level acceleration structure.0BkFlags to tune the behavior of the instance.AgCombined boolean flags.BiAdditional property flags for the format.BcConfiguration flags for the writer.443215443CkConstruct a float <code>Scalar</code> with the given width.A`Front face mode.CmFrontend parsers that consume binary and text shaders and \xe2\x80\xa61CmReturns the green channel of the color as u8 in the range \xe2\x80\xa6AbThe green channel.10AeThe bind group index.0BeCreate an Haiku-based display handle.DkThe image to load a texel from. This must have type <code>Image</code>. \xe2\x80\xa6CjThe image to perform an atomic operation on. This must \xe2\x80\xa610BaReturns the index of this handle.CnThe index which can be used for dual source blending. This \xe2\x80\xa6BfDefinitions for index bounds checking.CjHow should the generated code handle array, vector, or \xe2\x80\xa60CeInner structure that depends on the kind of the type.0CbLabel for the bottom level acceleration structure.CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa6CmDebug label for the command encoder. This will show up in \xe2\x80\xa6AkDebug label for the device.AnDebug label for the query set.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6CmDebug label of the sampler. This will show up in graphics \xe2\x80\xa6CjDebug label of the shader module. This will show up in \xe2\x80\xa6000CmDebug label of the texture. This will show up in graphics \xe2\x80\xa6CiDebug label of the texture view. This will show up in \xe2\x80\xa6BoLabel for the top level acceleration structure.CgDebug label of the bind group. This will show up in \xe2\x80\xa6CnDebug label of the bind group layout. This will show up in \xe2\x80\xa6ClDebug label of the pipeline cache. This might show up in \xe2\x80\xa6CiDebug label of the compute pass. This will show up in \xe2\x80\xa6CnDebug label of the pipeline. This will show up in graphics \xe2\x80\xa6ClDebug label of the pipeline layout. This will show up in \xe2\x80\xa6;ChDebug label of the render pass. This will show up in \xe2\x80\xa62:BcDebug label of this command buffer.CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa6AkDebug label for the device.CnReturns a string identifying this resource for logging and \xe2\x80\xa62=AnDebug label for the query set.CbLabel for the bottom level acceleration structure.=B`Debug label of the texture view.AkDebug label of the sampler.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6BiDebug label of the render bundle encoder.AnDebug label of the bind group.BcDebug label of the pipeline layout.1BeDebug label of the bind group layout.1CjReturns the label of shader module passthrough descriptor.;<CmDebug label for the command encoder. This will show up in \xe2\x80\xa6CiDebug label of the texture view. This will show up in \xe2\x80\xa6CmDebug label of the texture. This will show up in graphics \xe2\x80\xa6CmDebug label of the sampler. This will show up in graphics \xe2\x80\xa6BcDebug label of this command buffer.:>=BoLabel for the top level acceleration structure.CjDebug label of the shader module. This will show up in \xe2\x80\xa6000BhA level of detail, for mipmapped images.CcIf <code>None</code>, the base level is considered.10BdReturn the level for this diagnosticAdMulti-sampled image.AjMulti-sampled depth image.10AmThe primary drm plane handle.BoThe plane index on which to create the surface.ClThe <code>RayQuery</code> object this statement operates on.0AfThe WGPU queue to use.BoThe WGPU queue for used for command submission.0ClRange in push constant memory to use for the stage. Must \xe2\x80\xa6CjRange within the texture that is accessible via this view.1CmManually reapply the filter. You need to run this e.g. if \xe2\x80\xa6CnManually reapply the sorting. You need to run this e.g. if \xe2\x80\xa6CkNotify the peer that the model has been changed in some \xe2\x80\xa6AmReset the validator internalsEhReturns a <code>BufferSlice</code> referring to the portion of <code>self</code>\xe2\x80\x99s \xe2\x80\xa6EhReturn another <code>BufferSlice</code> referring to the portion of <code>self</code>\xe2\x80\xa6eSlintChThis macro allows you to use the Slint design markup \xe2\x80\xa6BbHow this variable is to be stored.0BoIterator over stored <code>SpanContext</code>s.mShader stage.0BoThe compiled compute stage and its entry point.BnThe compiled vertex stage and its entry point.C`The compiled fragment stage and its entry point.2102CiStarts the timer with the given mode and interval, in \xe2\x80\xa6BiThe lower bound of the range (inclusive).AoThe new state to transition to.000ChWhether data will be written to through this attachment.0ClReturns the widget style the compiler is currently using \xe2\x80\xa60AnThe title of the column headerAlReturns the Window\xe2\x80\x99s titleBlRemoves the third dimension from this originBgAdds the third dimension to this originCkWhether API tracing for debugging is enabled, and where \xe2\x80\xa600BkArena for the types defined in this module.0BdCreate a UiKit-based display handle.D`The bitwise or (<code>|</code>) of the bits in two flags values.0BfBitwise or - <code>self | other</code>11111111111111111111111111111111111111BcUnmaps the buffer from host memory.EnReturns a new <code>Span</code> starting at <code>self</code> and ending at <code>other</code>BkUnzip a raw identifier into its components.ChReturns the allowed usages for this <code>Buffer</code>.ChReturns the allowed usages of this <code>Texture</code>.CmUsages of a buffer. If the buffer is used in any way that \xe2\x80\xa6CmThe usage of the swap chain. The only usage guaranteed to \xe2\x80\xa6CmAllowed usages of the texture. If used in other ways, the \xe2\x80\xa6ChThe allowed usage(s) for the texture view. Must be a \xe2\x80\xa63310AnSupported texture usage flags.BbAllowed usage of surface textures,CmContains either a single mutating usage as a target, or a \xe2\x80\xa66534AaShader validator.BnValue, upon which the case is considered true.AmValue to use in the function.CeThe value with which to perform the atomic operation.210BiReturns the width of the image in pixels.AlThe width in logical pixels.AmThe width in physical pixels.Bothe actual width of the column (logical length)BoReturns the width of this <code>Texture</code>.CiWidth of the swap chain. Must be the same size as the \xe2\x80\xa6AcWidth of the extentB`This size of the value in bytes.021BgThe display width of the selected mode.876CdWrites the <code>Module</code> as glsl to the outputBoStorage can be used as a target for atomic ops.CdAtomic operations will be performed on the variable.BcArray access with a computed index.0AfFunction always passes0AoA raw window handle for AppKit.B`A raw display handle for AppKit.CnThe texture can be both read and written in the shader via \xe2\x80\xa6nAtomic scalar.A`Atomic function.102Cl10x10 block compressed texture. 16 bytes per block (1.28 \xe2\x80\xa60Cl12x10 block compressed texture. 16 bytes per block (1.07 \xe2\x80\xa60Cl12x12 block compressed texture. 16 bytes per block (0.89 \xe2\x80\xa60Aaballot, broadcastAnStatements and blocks of them.AhApply a binary operator.0BbHandle to a GPU-accessible buffer.AnBinding is backed by a buffer.AaA buffer binding.0CaInterpolate the value at the center of the pixel.0CdOpen connection to a graphics and/or compute device.CkStructure describing a logical device. Some members are \xe2\x80\xa60CmA connection to a GPU and a pool of resources to use with \xe2\x80\xa6CmUse the value provided by the first or last vertex of the \xe2\x80\xa60CeThis trait is used to obtain references to global \xe2\x80\xa60BlA strongly typed reference to an arena item.BlOpaque handles, such as samplers and images.0BfA type stored in the associated arena.BfIgnore the stencil state for the face.AdIndent for backends.AnBitwise inverts stencil value.0CiRepresents the sets of limits an adapter/device supports.0AdLinear InterpolationCcIndicates that linear, non-perspective, correct \xe2\x80\xa601CnOperation to perform to the output attachment at the start \xe2\x80\xa600DfReturned by a subsequent call to <code>encoder.finish()</code>, if \xe2\x80\xa6DkUse <code>Manual</code> if you\xe2\x80\x99ve initialized WGPU and want to supply \xe2\x80\xa6CkApplications that have control over the content that is \xe2\x80\xa60CgMarker trait used to determine which types uniquely \xe2\x80\xa6AbMatrix of numbers.0AbThe center button.nShader module.0EdEquivalent of the WGSL\xe2\x80\x99s <code>%</code> operator or SPIR-V\xe2\x80\x99s <code>OpFRem</code>0DfVia <code>VK_KHR_zero_initialize_workgroup_memory</code> or Vulkan 1.3CnFences in OpenGL behave normally. If you don\xe2\x80\x99t know what \xe2\x80\xa600EfAn <code>int</code> or a <code>float</code> (this is also used for unit based type \xe2\x80\xa60CeIs OPAQUE (is there no alpha test) recommended as \xe2\x80\xa6CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa60hPlane 0.0hPlane 1.0hPlane 2.0CjRed channel only. 8 bit integer per channel. Signed in \xe2\x80\xa60ClRed channel only. 8 bit integer per channel. Unsigned in \xe2\x80\xa60BfRepeat the texture in a tiling fashion0CbReturns from the function (possibly with a value).0CeInterpolate the value at each sample location. In \xe2\x80\xa60BaCharacteristics of a scalar type.BjNumber of integral or floating-point kind.10BoSelect between two values based on a condition.0CdOne signed short (u16). <code>i32</code> in shaders.0CbOne signed int (i32). <code>i32</code> in shaders.0CnOne signed byte (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x88\x92\xe2\x80\xa60CdCorrespond to the <code>string</code> type in .slint0AgUser-defined structure.0CkThis type represents a runtime instance of structure in \xe2\x80\xa6iAn object0CkConditionally executes one of multiple blocks, based on \xe2\x80\xa60CkTypes that can return the WGSL source representation of \xe2\x80\xa6BeIndices are 16 bit unsigned integers.CfOne unsigned short (u16). <code>u32</code> in shaders.10BeIndices are 32 bit unsigned integers.CdOne unsigned int (u32). <code>u32</code> in shaders.10CnOne unsigned byte (u8). [0, 255] converted to float [0, 1] \xe2\x80\xa60ocbindgen:ignore00000000CiBinding is visible from the vertex shader of a render \xe2\x80\xa6CkAllow a buffer to be the vertex buffer in a draw operation.BaA vertex buffer used for drawing.Dj<code>Backend::Vulkan</code>. Supported on Windows, Linux/Android, and \xe2\x80\xa6AbVector of numbers.0BeVertex data is advanced every vertex.0CbVulkan API (Windows, Linux, Android, MacOS via \xe2\x80\xa60CiThe rendering is based on WGPU 26.x. Use the provided \xe2\x80\xa60CgThis type represents a window towards the windowing \xe2\x80\xa6AgWindow handle producer.1BkWriter responsible for all code generation.AoAllowed access to this texture.0BnThe pending fence values have to be ascending.ChAdds a new value to the arena, returning a typed handle.BfCreate an AppKit-based display handle.CiReturn something that can be downcast\xe2\x80\x99ed (typically \xe2\x80\xa6DeGet the <code>wgpu_hal</code> surface from this <code>Surface</code>.DeGet the <code>wgpu_hal</code> adapter from this <code>Adapter</code>.EaGet the <code>wgpu_hal</code> acceleration structure from this <code>Blas</code>.DcGet the <code>wgpu_hal</code> buffer from this <code>Buffer</code>.DcGet the <code>wgpu_hal</code> device from this <code>Device</code>.DgGet the <code>wgpu_hal</code> instance from this <code>Instance</code>.DbGet the <code>wgpu_hal</code> device from this <code>Queue</code>.DeGet the <code>wgpu_hal</code> texture from this <code>Texture</code>.DnGet the <code>wgpu_hal</code> texture view from this <code>TextureView</code>.EaGet the <code>wgpu_hal</code> acceleration structure from this <code>Tlas</code>.fSafetyBfGet the underlying raw display handle.BeGet the underlying raw window handle.AlReturn a slice to the string0A`The copy aspect.CaAspect of the texture. Color textures must be \xe2\x80\xa6110110110DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.000000000000000000000000000000000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6000000000000000000000000000000000000000AbAll memory blocks.0BfReturns the buffer this is a slice of.B`The buffer to be copied to/from.AcThe buffer to bind.AiThe buffer to transition.2CjHow should the generated code handle array, vector, or \xe2\x80\xa603AgThe buffer being bound.24AlThe button that was pressed.AmThe button that was released.CfCode common to the front and backends for specific \xe2\x80\xa6CiCreates a new instance of the component and returns a \xe2\x80\xa6CdReturns a new version of this color that has the \xe2\x80\xa6CdReturns a new version of this brush that has the \xe2\x80\xa610Cf<code>Backend</code>-specific device ID of the adapter0AgThe WGPU device to use.BcThe WGPU device used for rendering.0kDriver name0BmWhether to allow the noop backend to be used.00CaExtend the model with the content of the iteratorD`The bitwise or (<code>|</code>) of the bits in each flags value.000000000000000000000000000000000000000BhRequested texture extent. Must be in \xe2\x80\xa6CnReturns a new Model where the elements are filtered by the \xe2\x80\xa6DkFinishes recording and returns a <code>CommandBuffer</code> that can be \xe2\x80\xa6DjFinishes recording and returns a <code>RenderBundle</code> that can be \xe2\x80\xa6CiPrepare currently mapped buffers for use in a submission.DiThis macro is the same as <code>std::format!</code>, but it returns a \xe2\x80\xa6C`Returns the format of this <code>Texture</code>.CjThe texture format of the swap chain. The only formats \xe2\x80\xa6AfFormat of the texture.CnFormat of the texture view. Either must be the same as the \xe2\x80\xa6DgThe <code>TextureFormat</code> of the image that this pipeline will \xe2\x80\xa6CmFormat of the depth/stencil buffer, must be special depth \xe2\x80\xa6AcFormat of the inputAiFormat of the attachment.5DkFormat of the texture view, or <code>None</code> for the same format as \xe2\x80\xa6AoFormat of the surface textures.543867277CjIf Some(), this operation is a gather operation on the \xe2\x80\xa60ChThis function provides access to instances of global \xe2\x80\xa600CmRaw handle to the acceleration structure, used inside raw \xe2\x80\xa6BjReturns the height of the image in pixels.AfThe height in logical.AnThe height in physical pixels;C`Returns the height of this <code>Texture</code>.CjHeight of the swap chain. Must be the same size as the \xe2\x80\xa6AdHeight of the extent10BhThe display height of the selected mode.654ClInserts a row at position index. All rows after that are \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in two flags values.0BcInserts specified flag(s) into self111111111111BbInsert a new value into the arena.22222222222222222222222222CfCall the given callback or function with the argumentsAaForward to invokeCcWhether all known bits in this flags value are set.0BmReturns whether the struct has all flags set.11111111111111111111111111111111111111CeReturns <code>true</code> for BCn compressed formats.CaReturns <code>true</code> if only one flag is setAgRange of layers to use.BnThe layout of the texture data in this buffer.DeThe <code>BindGroupLayout</code> that corresponds to this bind group.BlThe layout of bind groups for this pipeline.0220000110002BlLength in code units (in bytes) of the span.0CjThe best limits which can be used to create devices on \xe2\x80\xa6BlThe limits which can be used on this device.AaAdditional limits0ChPerform a lookup for a variable named <code>name</code>.BjThe compiled shader module for this stage.0000AaShader module IR.1DgReturns the offset in <code>Self::buffer()</code> this slice starts at.BoThe offset in the buffer where the copy starts.BdBase offset of the buffer, in bytes.Ck0-based Offset in code units (in bytes) of the start of \xe2\x80\xa6BeByte offset of the start of the inputClOffset into the buffer that is the start of the texture. \xe2\x80\xa6BjOffset from the beginning from the struct.3B`This must be a const-expression.CmThe offset in the push constant memory block this uniform \xe2\x80\xa621CmThe byte offset within the push constant storage to write \xe2\x80\xa6BlThe offset at which the bound region starts.CjThe offset in bytes of the allocation in its memory block.:76CjConfigures the texture to be rendered vertically mirrored.DiThe base texel of the texture in the selected <code>mip_level</code>. \xe2\x80\xa60DeThe base texel of the texture in the selected <code>mip_level</code>.10ClOrigin within a texture. Note: for 1D and 2D textures, Z \xe2\x80\xa621CgReturns the number of planes a multi-planar format has.CcRecall all of the closed buffers back to be reused.CmReload the component from the .slint file. If there is an \xe2\x80\xa6C`Remove the row at the given index from the modelCeThe intersection of a source flags value with the \xe2\x80\xa60BcRemoves specified flag(s) from self11111111111111111111111111111111111111BlRender the window to the given frame buffer.ChResize the array to the given size. If the array was \xe2\x80\xa6CmThis function is called by the renderers when the surface \xe2\x80\xa61BdThe result of this function, if any.Dg<code>AtomicResult</code> expression representing this function\xe2\x80\x99s \xe2\x80\xa6DgThe <code>WorkGroupUniformLoadResult</code> expression representing \xe2\x80\xa6DjThe <code>SubgroupBallotResult</code> expression representing this load\xe2\x80\xa6DiThe <code>SubgroupOperationResult</code> expression representing this \xe2\x80\xa60432100EdA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.0BlReturn the scalar type of <code>self</code>.BnAn X11 screen to use with this display handle.0ChCompletes the backend selection process and tries to \xe2\x80\xa60AbShader MSL source.BdBinary SPIR-V data, in 4-byte words.AcShader HLSL source.AcShader DXIL source.AkSource code for the shader.B`Lower level source of the error.00AnThe source code of the shader.6345CmStage push constant range is visible from. Each stage can \xe2\x80\xa60CmThe byte stride in the buffer between one attribute value \xe2\x80\xa6CkSubmits a series of finished command buffers for execution.CiSubmit <code>command_buffers</code> for execution on GPU.BgReturns the string name of the backend.DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60BaToggles specified flag(s) in self11111111111111111111111111111111111111CdConvenience function that returns a new strongly \xe2\x80\xa60DiExtend this <code>Layouter</code> with layouts for any new entries in \xe2\x80\xa6CnBitflag of supported texture usages for the surface to use \xe2\x80\xa60Cf<code>Backend</code>-specific vendor ID of the adapter0CmThe compiled vertex stage, its entry point, and the input \xe2\x80\xa6BnThe vertex processing state for this pipeline.0AeVulkan API internals.CjReturns the Window associated with this component. The \xe2\x80\xa6AgReturns the window API.1BaA pointer to an orbclient window.AlAn Xlib <code>Window</code>.BaAn X11 <code>xcb_window_t</code>.4CdHandle to a physical graphics and/or compute device.BeA raw display handle for Android NDK.AkBackends supported by wgpu.0AeMemory barrier flags.0CfDescribes how an input/output variable is to be bound.0AlBuilt-in inputs and outputs.AiBuilt-in shader variable.10CgFlag used by the wgpu-core texture tracker to say a \xe2\x80\xa6CkBinding is visible from the compute shader of a compute \xe2\x80\xa6BoDuplicate and compact an acceleration structureAeComposite expression.0DjA two dimensional array texture. <code>texture_2d_array</code> in WGSL \xe2\x80\xa60CgThe binding layout is derived from the pipeline layout.Ag<code>core</code> GLSL.ClDiscards the resulting value of the render pass for this \xe2\x80\xa600BeThe array size can change at runtime.0C`The number of elements is determined at runtime.0B`Helper class to emit expressionsAlFloat values with width = 8.DfOne half-precision float (no Rust equiv). <code>f32</code> in shaders.0CnOne single-precision float (f32). <code>f32</code> in shaders.0DkOne double-precision float (f64). <code>f32</code> in shaders. Requires \xe2\x80\xa60AcThe forward button.CkFunction passes if new value is greater than existing value0CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa60CmUsed internally by wgpu functions to indicate the encoder \xe2\x80\xa6CbExtension trait, adding JSON serialization methodshLiteral.0AoThe position in logical pixels.BbThe size in logical screen pixels.10CiPresentation frames are kept in a single-frame queue. \xe2\x80\xa60AgType of buffer mapping.CeModelRc is a type wrapper for a reference counted \xe2\x80\xa6AjNearest neighbor sampling.0ClThe combination of all usages that the are guaranteed to \xe2\x80\xa60BnA raw window handle for the OpenHarmony OS NDKBgConfiguration for the whole parser run.BnConfiguration used in the <code>Writer</code>.0CcA raw window handle for the Redox operating system.CdA raw display handle for the Redox operating system.BfReady to present image to the surface.ChAll the apis that wgpu offers first tier of support for.BiThe array size is an override-expression.0AhPointer to another type.0BfPrivate data, per invocation, mutable.0CjStart or continue the query given by the statement\xe2\x80\x99s \xe2\x80\xa60CkRed channel only. 16 bit integer per channel. Signed in \xe2\x80\xa60CmRed channel only. 16 bit integer per channel. Unsigned in \xe2\x80\xa60CkRed channel only. 32 bit integer per channel. Signed in \xe2\x80\xa60CmRed channel only. 32 bit integer per channel. Unsigned in \xe2\x80\xa60CmRed channel only. 64 bit integer per channel. Unsigned in \xe2\x80\xa60CnRed channel only. 8 bit integer per channel. [\xe2\x88\x92127, 127] \xe2\x80\xa60CiRed channel only. 8 bit integer per channel. [0, 255] \xe2\x80\xa60CmDefault blending state that replaces destination with the \xe2\x80\xa6CkBlend mode that does no color blending, just overwrites \xe2\x80\xa6CeRay flags used when casting rays. Matching vulkan \xe2\x80\xa6DcRay flags, for a <code>RayDesc</code>\xe2\x80\x99s <code>flags</code> field.1ClReplace stencil value with value provided in most recent \xe2\x80\xa60AgThe window was resized.CmRed and green channels. 8 bit integer per channel. Signed \xe2\x80\xa60CfRed and green channels. 8 bit integer per channel. \xe2\x80\xa60AfFormat can be sampled.Adshuffle, shuffle xorDkAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a \xe2\x80\xa6D`Barrier affects all <code>AddressSpace::Storage</code> accesses.AfRegular sampled image.0AdHandle to a sampler.AeBinding is a sampler.BoA sampler that can be used to sample a texture.BiCan be used to sample values from images.01ClEach gathers from a different lane at the index given by \xe2\x80\xa60CoTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.0D`Four signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.0CjOne signed short (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa60AaA storage buffer.BiStorage buffer data, potentially mutable.nStorage image.102ClOperation to perform to the output attachment at the end \xe2\x80\xa600B`Handle to a presentable surface.oVector swizzle.0CeBarrier synchronizes texture memory accesses in a \xe2\x80\xa6AoHandle to a texture on the GPU.AbA texture binding.0CnA timeout was encountered while trying to acquire the next \xe2\x80\xa6CjThe requested Wait timed out before the submission was \xe2\x80\xa6BhUnable to get the next frame, timed out.10CnThe top-left of the texture is the top-left of the texture \xe2\x80\xa6DkAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a \xe2\x80\xa6BgA uniform buffer bound in a bind group.CnFlag used by the wgpu-core texture tracker to say that the \xe2\x80\xa6DaTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.0DbFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.0AlA buffer for uniform values.AdUniform buffer data.01BiThe surface status is not known since \xe2\x80\xa6CkThe device was lost for an unspecific reason, including \xe2\x80\xa610ClOne unsigned short (u16). [0, 65535] converted to float [\xe2\x80\xa60oA GLSL version.AbA warning message.BbThe diagnostic found is a warning.B`A raw window handle for Wayland.BaA raw display handle for Wayland.AoA raw display handle for Win32.AhThe WGPU adapter to use.A`Android backend.BgCreate an Android-based display handle.AkReturns a new weak pointer.00AgBackend used for deviceBjReturns the backend this adapter is using.BiReturns the backend this device is using.12ClSlot for which binding provides resource. Corresponds to \xe2\x80\xa6ChBinding index. Must match shader index and be unique \xe2\x80\xa6BeFor I/O structs, defines the binding.B`Binding number within the group.BiFor resources, defines the binding point.CnFor entry points, an argument has to have a binding unless \xe2\x80\xa6CmFor entry points, the result has to have a binding unless \xe2\x80\xa643210665ClThe format of any vertex buffers used with this pipeline \xe2\x80\xa6CiThe format of any vertex buffers used with this pipeline.0AaASTC RGBA channel0CiCreates a new configuration where the shader is fully \xe2\x80\xa6DfRemove most unused objects from <code>module</code>, which must be \xe2\x80\xa6CnIf this is enabled, this is a comparison sampler using the \xe2\x80\xa6CiComparison function that determines if the fail_op or \xe2\x80\xa6101DcCompile the <code>.slint</code> file and generate rust code for it.BcReturns the underlying EGL context.CfIf provided, converts to the specified byte width. \xe2\x80\xa60AhConstruct an empty modelCdCreates a new instance of wgpu with default options.BoConstructs a new symbol table with a root scopeClThe amount of logical pixels to scroll in the horizontal \xe2\x80\xa6CjThe amount of logical pixels to scroll in the vertical \xe2\x80\xa6CfDestroy the associated native resources as soon as \xe2\x80\xa6AdDestroy this device.1BjA pointer to an Xlib <code>Display</code>.BgA pointer to a <code>wl_display</code>.BiThe resources to bind to this bind group.BhArray of entries in this BindGroupLayout110DkRe-implement to intercept the <code>ApplicationHandler::exiting()</code>\xe2\x80\xa6CdOperation that is performed when stencil test fails.0ClList of supported formats to use with the given adapter. \xe2\x80\xa6BbList of supported texture formats.1CcGet a mutable reference to an element in the arena.CcReturns the names of all exported global singletonsCfReturns <code>true</code> for ASTC compressed formats.BkReturns <code>true</code> for srgb formats.CjThis <code>PollType</code> represents a wait of some kind.CnOperation to perform to the output attachment at the start \xe2\x80\xa600AoMarker types for each resource.AhThe text of the message.BdReturn a message for this diagnosticBkA pointer to an <code>NSView</code> object.BgCreate an Orbital-based display handle.CfOperation that is performed when stencil test success.0AkPointer to an atomic value.EeThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space10CgSchedule this texture to be presented on the owning \xe2\x80\xa6mPresentation.BfReplace an old value with a new value.DjReserves capacity for at least <code>additional</code> bytes more than \xe2\x80\xa60DgReturn the number of elements that <code>size</code> represents, if \xe2\x80\xa6BhDetermine the type of <code>expr</code>.CnRestarts the timer. If the timer was previously started by \xe2\x80\xa6DkRe-implement to intercept the <code>ApplicationHandler::resumed()</code>\xe2\x80\xa6CmReturns a new Model where the elements are reversed. This \xe2\x80\xa6CfReturns true if the timer is running; false otherwise.CkHandle to the associated sampler global variable, if it \xe2\x80\xa6AoReplace inner Vec with new dataClReturns a new Model where the elements are sorted by the \xe2\x80\xa6nStencil state.ClWhat operations will be performed on the stencil part of \xe2\x80\xa601EfModifies <code>self</code> to contain the smallest <code>Span</code> possible that \xe2\x80\xa6BgA pointer to a <code>wl_surface</code>.BfThe color state of the render targets.CnThe effect of draw calls on the color aspect of the output \xe2\x80\xa60CfThis module contains a few functions used by the testsDnReturns the <code>Texture</code> that this <code>TextureView</code> refers to.BaThe texture to be copied to/from.AmAccessible view of the frame.AjThe texture to transition.22BdHandle to the image global variable.33133BkConverts this color to the HSV color space.0AhConvert to a JSON objectCnReturns the pixel buffer for the Image if available in RGB \xe2\x80\xa60ClReturn WGSL source code representation of <code>self</code>.CfGet access to the raw resource if it is not destroyed.BkA pointer to an <code>UIView</code> object.CmReturns a new strongly referenced component if some other \xe2\x80\xa60BnMapping between names and attribute locations.AlThe GLSL version to be used.BhWGPU 26.x specific types and re-exports.BfCreate a Windows-based display handle.BoThis type can be passed as a function argument.BhGroup, binding, and location attributes.BkRepresents the backends that wgpu will use.0CfAllow a buffer to be the destination buffer for a [\xe2\x80\xa6CcThe destination of a hardware copy. cbindgen:ignoreCaAllows a texture to be the destination in a  [\xe2\x80\xa61AhFormat can be copied to.CaAllow a buffer to be the source buffer for a [\xe2\x80\xa6BnThe source of a hardware copy. cbindgen:ignoreBkAllows a texture to be the source in a [\xe2\x80\xa61AjFormat can be copied from.CiInterpolate the value at a point that lies within all \xe2\x80\xa60CkThis is the entry point of the crate, it can be used to \xe2\x80\xa6hConstantoConstant value.AkThe array size is constant.11012DiSkips to the <code>continuing</code> block of the innermost enclosing \xe2\x80\xa60gD.alpha0Ae<code>es</code> GLSL.BfExtent of a texture related operation.0CkBinding is visible from the fragment shader of a render \xe2\x80\xa6CaFeatures that are not guaranteed to be supported.ClStructure used to encode additions to GLSL that aren\xe2\x80\x99t \xe2\x80\xa61BmA error occurred while writing to the output.BaA function defined in the module.A`Function locals.AcA regular function.21CkAllow a buffer to be the indirect buffer in an indirect \xe2\x80\xa6CfThe indirect or count buffer in a indirect draw or \xe2\x80\xa6CeContext for all other wgpu objects. Instance of wgpu.BgVertex data is advanced every instance.0AkCatch only internal errors.ChInternal error. Used for signalling any failures not \xe2\x80\xa6B`A <code>GPUInternalError</code>.CeHelper processor that derives the sizes of all types.CiVertex data is a list of lines. Each pair of vertices \xe2\x80\xa60AaIndexed location.0CmAdapter that uses the least possible power. This is often \xe2\x80\xa60CbAllow a buffer to be mapped for reading using [\xe2\x80\xa6BdThe argument to a read-only mapping.ClProvides rows that are generated by a map function based \xe2\x80\xa6BmThe texture is laid out densely in memory as:0CkExtension trait with extra methods implemented on types \xe2\x80\xa6CiFunction passes if new value is not equal to existing \xe2\x80\xa60CnNo adapter available via the instance\xe2\x80\x99s backends matched \xe2\x80\xa60BaOrigin of a copy from a 2D image.0BcOrigin of a copy to/from a texture.0CnThe underlying surface has changed, and therefore the swap \xe2\x80\xa6BmThe surface under the swap chain has changed.0AnPipeline-overridable constant.000B`The position in physical pixels.AlThe size in physical pixels.10CfThis trait defines the interface between Slint and \xe2\x80\xa6DgPassed to <code>Device::poll</code> to control how and if it should \xe2\x80\xa60AiVia assignments + barrierCcThe binding layout is provided by the user in BGLs.ClEach gathers from the opposite quad lane along the given \xe2\x80\xa60AfHandle to a query set.ChRed channel only. 16 bit float per channel. Float in \xe2\x80\xa60ClRed channel only. 16 bit integer per channel. [\xe2\x88\x9232767, \xe2\x80\xa60ClRed channel only. 16 bit integer per channel. [0, 65535] \xe2\x80\xa60ChRed channel only. 32 bit float per channel. Float in \xe2\x80\xa60BfRead-only sampled or fetched resource.BdLocally used handle for ray queries.0CmThe texture can only be read in the shader and it must be \xe2\x80\xa60ClThis trait represents a Renderer that can render a slint \xe2\x80\xa6ClA Repeated timer is fired repeatedly until it is stopped \xe2\x80\xa6CeReplace out-of-bounds indexes with some arbitrary \xe2\x80\xa60CnRed and green channels. 16 bit integer per channel. Signed \xe2\x80\xa60CgRed and green channels. 16 bit integer per channel. \xe2\x80\xa60CnRed and green channels. 32 bit integer per channel. Signed \xe2\x80\xa60CgRed and green channels. 32 bit integer per channel. \xe2\x80\xa60CjRed and green channels. 8 bit integer per channel. [\xe2\x88\x92\xe2\x80\xa60CnRed and green channels. 8 bit integer per channel. [0, 255]\xe2\x80\xa60AhRotate 90\xc2\xb0 to the rightCkAllows compute and fragment shaders to use the subgroup \xe2\x80\xa60ChSupport for subgroup operations. Implies support for \xe2\x80\xa6CeThe sampling qualifiers of a binding or struct field.0CbA severity set on a <code>DiagnosticFilter</code>.DaTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.0DbFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.0CoTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.0DaThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.0D`Four signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.0ClTwo signed bytes (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x80\xa60CmFour signed bytes (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x80\xa60gS.alpha0BjStencil format with 8 bit integer stencil.0iSrc - Dst0BhIntersecting with triangles. Matches \xe2\x80\xa60CmA table of types for an <code>Arena&lt;Expression&gt;</code>.DcTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.0DdFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.0DaTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.0DcThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.0DbFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.0ChReturned when attempting to end a pass if the parent \xe2\x80\xa6CnTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]\xe2\x80\xa60CnFour unsigned bytes (u8). [0, 255] converted to float [0, 1\xe2\x80\xa60DeA slice of all variants of <code>ImplementedLanguageExtension</code>.EfA <code>Model</code> backed by a <code>Vec&lt;T&gt;</code>, using interior mutability.AjRequest an ES 3.0 context.00AjRequest an ES 3.1 context.00AjRequest an ES 3.2 context.00DfWrapper class for <code>Error</code>, augmenting it with a list of \xe2\x80\xa6BfAdds a new variable to the root scope.CiAligns a <code>value</code> to an <code>alignment</code>.0DfAllocate a staging belt slice with the given <code>size</code> and \xe2\x80\xa6CeConvert inner error into another type. Joins span \xe2\x80\xa6AkThe value to broadcast overAiThe value to compute over10BlReturns the pixels interpreted as raw bytes.ClReturns the bytes representation of the struct, ready to \xe2\x80\xa6001AkReturn a slice to the arrayBaReturn a slice to the pixel data.10AmA pointer to a BWindow objectBjThe backends to use for the WGPU instance.BfWhich <code>Backends</code> to enable.00CdReturns a new version of this color that has the \xe2\x80\xa6CdReturns a new version of this brush that has the \xe2\x80\xa610AgThe stream of commands.0CnConstant depth biasing factor, in basic units of the depth \xe2\x80\xa60CmWhether all set bits in a source flags value are also set \xe2\x80\xa60DoWhether all the bits set in <code>other</code> are all set in <code>self</code>111111111111111111111111111EjReturn <code>true</code> if any of <code>self</code>\xe2\x80\x99s policies are <code>policy</code>.22222222222BaContents of a buffer on creation.CiThese default limits are guaranteed to to work on all \xe2\x80\xa6BdPath to <code>dxcompiler.dll</code>.00ClWhether to create a cache without data when the provided \xe2\x80\xa6ClThe features which can be used to create devices on this \xe2\x80\xa6BnThe features which can be used on this device.BcFetch a handle to an existing type.CiThe compiled fragment stage, its entry point, and the \xe2\x80\xa6C`The fragment processing state for this pipeline.0CeChoose which DX12 shader compiler to use from the \xe2\x80\xa6ChChoose which minor OpenGL ES version to use from the \xe2\x80\xa60ChGet a power preference from the environment variable \xe2\x80\xa6ChGets a set of backends from the environment variable \xe2\x80\xa6ChCreate an new instance of wgpu from a wgpu-hal instance.DkOnly use this function in contexts where there is no <code>Device</code>\xe2\x80\xa6fSafety00ClCreate a pixel from the red, gree, blue component in the \xe2\x80\xa6AfThe entrance function.0kGeometries.CnGet the data associated with this pipeline cache. The data \xe2\x80\xa6BbGet info about the adapter itself.CdReturn the span associated with <code>handle</code>.B`Types for dealing with InstancesAiThe WGPU instance to use.BeThe WGPU instance used for rendering.AcReturn the instance1CmReturns the interval of the timer. If the timer was never \xe2\x80\xa6CbCoerce the identifiers into its raw underlying \xe2\x80\xa6BhReturn true if the SharedVector is emptyBbReturn true if the String is emptyBoWhether all bits in this flags value are unset.0BeReturns whether there is no flag set.111111111111CkReturn <code>true</code> if the arena contains no elements.ClReturns <code>true</code> if the arena contains no elements.333333333333333CoReturn true if <code>self</code> is the empty set of overloads.4444444444465BbReturns true for strip topologies.CkReturns a iterator over the items stored in this arena, \xe2\x80\xa6CmLists of reserved keywords for each shading language with \xe2\x80\xa6BoWhere in the source code the message points at.DfReturn a <code>SourceLocation</code> for this span in the provided \xe2\x80\xa6DhReturn a <code>SourceLocation</code> for our first span, if we have one.DjReturns a <code>SourceLocation</code> for the first label in the error \xe2\x80\xa6CcThe location of the global. This corresponds to \xe2\x80\xa6CaCalculates the maximum possible count of mipmaps.BaFunction may kill the invocation.CaThe messages from the shader compilation process.DjHelper method that generates a <code>NameKey</code> for a local in the \xe2\x80\xa6AiCreate a new gles versionCnFor each callback declared at the root of the component, a \xe2\x80\xa6CfThis module contains items that you need to use or \xe2\x80\xa6AbPolls all devices.ChReturns the position of the window on the screen, in \xe2\x80\xa60CaThe position of the cursor for this event, if any1AnAppend a string to this string0AnType for <code>RayDesc</code>.0CaFor regular bindings this is the register number.AdReturn the renderer.BaResource to attach to the binding00CjRound <code>n</code> up to the nearest alignment boundary.BfReturns the data for a particular row.CgAn optional selector to transition only part of the \xe2\x80\xa60BlSet the bottom level acceleration structure.CnResizes the window to the specified size on the screen, in \xe2\x80\xa6CnRequest a new size for the window to the specified size on \xe2\x80\xa61ClOperation to perform to the output attachment at the end \xe2\x80\xa600DcMaps this <code>LanguageExtension</code> into the sentinel word \xe2\x80\xa6DiMaps this <code>ImplementedLanguageExtension</code> into the sentinel \xe2\x80\xa6D`Converts <code>self</code> to a range if the span is not unknownCjReturns the pixel buffer for the Image if available in \xe2\x80\xa60CbThe primitive topology used to interpret vertices.0BlMapping between uniform variables and names.BcCheck the given module to be valid.CmConstruct a <code>Self::WaitForSubmissionIndex</code> variantCgTakes the given options, modifies them based on the \xe2\x80\xa6CeTakes the given flags, modifies them based on the \xe2\x80\xa61111CfTakes the given compiler, modifies it based on the \xe2\x80\xa6002CnA newtype struct where its only valid values are powers of \xe2\x80\xa6AaSize of an array.0AeASTC block dimensions0BhChooses the first supported mode out of:0DgUse <code>Automatic</code> if you want to let Slint select the WGPU \xe2\x80\xa6CfNo explicit minor version is requested, the driver \xe2\x80\xa600CkIf not present, the texture can\xe2\x80\x99t be blended into the \xe2\x80\xa6Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000AjHandle to a binding group.CkAll gather from the same lane at the index given by the \xe2\x80\xa60jConstants.DeThe clip board, used in <code>Platform::clipboard_text</code> and \xe2\x80\xa6DhA cubemap array texture. <code>texture_cube_array</code> in WGSL and \xe2\x80\xa60fDepth.0CfThe device\xe2\x80\x99s <code>destroy</code> method was called.0C`Utility methods not meant to be in the main API.AfDisplay-P3 color space0AmError validating a draw call.ClThe combination of states that a buffer must exclusively \xe2\x80\xa6CmThe combination of states that a texture must exclusively \xe2\x80\xa6ChAttempted to obtain adapter specified by environment \xe2\x80\xa60ClA classification of WebGPU error for implementers of the \xe2\x80\xa6CiA collection of Vulkan fences, each associated with a \xe2\x80\xa6ChThe sampling result is produced based on more than a \xe2\x80\xa60DnTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in \xe2\x80\xa60DoFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in \xe2\x80\xa60DkTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.0DmThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.0DlFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.0DoTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. \xe2\x80\xa60EaThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. \xe2\x80\xa60E`Four double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. \xe2\x80\xa60CnVertex winding order which classifies the \xe2\x80\x9cfront\xe2\x80\x9d face \xe2\x80\xa60CcIntersecting with generated primitives. Matches \xe2\x80\xa60BhIndicates how a global variable is used.DeThe combination of states that a buffer may be in <em>at the </em>\xe2\x80\xa6DfThe combination of states that a texture may be in <em>at the </em>\xe2\x80\xa6AkLoad a texel from an image.0CkPresentation frames are not queued at all. The moment a \xe2\x80\xa60CeThe types of the acceleration structure are instancesCiFunction passes if new value is less than or equal to \xe2\x80\xa6CmShader may rewrite depth smaller than one that would have \xe2\x80\xa601CmVertex data is a strip of lines. Each set of two adjacent \xe2\x80\xa60CbAllow a buffer to be mapped for writing using [\xe2\x80\xa6BeThe argument to a write-only mapping.DkEnables multiview render passes and <code>builtin(view_index)</code> in \xe2\x80\xa60BlSupport for <code>BuiltIn::ViewIndex</code>.CmRepresent a handle to a view that listens to changes to a \xe2\x80\xa6ClThe full window is always redrawn. No attempt at partial \xe2\x80\xa6CcGet the number of array layers, a <code>u32</code>.0CdGet the number of mipmap levels, a <code>u32</code>.0CgQuery returns a single 64-bit number, serving as an \xe2\x80\xa60CiVertex data is a list of points. Each vertex is a new \xe2\x80\xa60B`Error states after a device poll0BjThe winit event should propagate normally.0CcType of query contained in a <code>QuerySet</code>.0CdSupport for ray queries and acceleration structures.B`Raw window &amp; display handle.CnThe texture can be both read and written in the shader and \xe2\x80\xa60CnRed and green channels. 16 bit float per channel. Float in \xe2\x80\xa60CkRed and green channels. 16 bit integer per channel. [\xe2\x88\x92\xe2\x80\xa60CkRed and green channels. 16 bit integer per channel. [0, \xe2\x80\xa60CnRed and green channels. 32 bit float per channel. Float in \xe2\x80\xa60CkConvenience alias for a pixel with three color channels \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa6000CnRgbaColor stores the red, green, blue and alpha components \xe2\x80\xa60Al180\xc2\xb0 rotation (upside-down)AgRotate 90\xc2\xb0 to the leftCmAll the apis that wgpu offers second tier of support for. \xe2\x80\xa6CiBarrier synchronizes execution across all invocations \xe2\x80\xa6AoCannot write the generated fileCmEach gathers from their lane minus the shift given by the \xe2\x80\xa60CkTwo signed shorts (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa60ClFour signed shorts (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa60CmProvides a sorted view of rows by another <code>Model</code>.hS1.alpha0BoInstructions which make up an executable block.0BeThe statically-linked variant of Dxc.00BnThe command buffer has already been submitted.CnThe TimerMode specifies what should happen after the timer \xe2\x80\xa6CnQuery returns a 64-bit number indicating the GPU-timestamp \xe2\x80\xa60AjTriangle geometry version.0CeThe types of the acceleration structure are trianglesCdTypes that may be able to return the WGSL source \xe2\x80\xa6DcFlags associated with <code>Type</code>s by <code>Validator</code>.CnEnum with additional information, depending on the kind of \xe2\x80\xa60BcShader may not rewrite depth value.0ClNaga adds no checks to indexing operations. Generate the \xe2\x80\xa60CmTwo unsigned shorts (u16). [0, 65535] converted to float [\xe2\x80\xa60CnFour unsigned shorts (u16). [0, 65535] converted to float [\xe2\x80\xa60Cm8 bit integer RGBA, Srgb-color [0, 255] converted to/from \xe2\x80\xa60CmThis enum represents the different public variants of the \xe2\x80\xa6CgA raw window handle for a Web canvas registered via \xe2\x80\xa6AoWorkgroup shared data, mutable.0CeThe texture can only be written in the shader and it:0CmThe property exists but does not have a type matching the \xe2\x80\xa6AeZero value of a type.0BdInformation about function argument.0DhOptional <code>blend_src</code> index used for dual source blending. \xe2\x80\xa60BmReturns the size in bytes of the index formatCeReturns the names of all publicly declared callbacks.CjAll flags that indicate if the backend is WebGPU compliantCnReturn the component definition for the given name. If the \xe2\x80\xa6AbBoolean expression0CbInitializes <code>Surface</code> for presentation.CgConfigure <code>self</code> to use <code>device</code>.CmSpecifies the values of pipeline-overridable constants in \xe2\x80\xa6BoArena for the constants defined in this module.011AbPipeline constantsAfThe face culling mode.0CjThis function is called when debug() is used in .slint \xe2\x80\xa6CbEnable recommended debugging and validation flags.CnWhat operations will be performed on the depth part of the \xe2\x80\xa6CcReturns the dimension of this <code>Texture</code>.AjDimensions of the texture.ClThe dimension of the texture view. For 1D textures, this \xe2\x80\xa61BbThe dimension of the texture view.12gSafety:CeFormat this type using <code>core::fmt::Debug</code>.0BoReturn an object that can be formatted with \xe2\x80\xa6AjConvert from a bits value.0DkTakes in <code>FeatureBits</code> and returns None if there are invalid \xe2\x80\xa611111111111111111111111111111111111111CiCreate an new instance of wgpu from a wgpu-core instance.CmConstruct a color from the hue, saturation, and value HSV \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in each flags value.000000000000000000000000000000000000000BkConvert to JSON object to <code>Self</code>ClGet a flags value with the bits of a flag with the given \xe2\x80\xa60CmTakes in a name and returns Self if it matches or none if \xe2\x80\xa611111111111111111111111111111111111111CgCreates a new Image from the specified shared pixel \xe2\x80\xa60BoArena for the functions defined in this module.0CeReturns the names of all publicly declared functions.BfGet the value for a given struct fieldCkThis module contains the code for the highlight of some \xe2\x80\xa6E`The <code>GWLP_HINSTANCE</code> associated with this type\xe2\x80\x99s <code>HWND</code>.CnReturns true if this is a handle to a type rather than the \xe2\x80\xa6CjReturns true if the fence behavior is <code>Normal</code>.BjReturns true if this brush is fully opaque0ClMap the buffer to host (CPU) memory, making it available \xe2\x80\xa60AkMap on the wait index type.ClTakes a closure and maps the label of the command buffer \xe2\x80\xa6CdTakes a closure and maps the label of the device \xe2\x80\xa6CdTakes a closure and maps the label of the buffer \xe2\x80\xa6CmTakes a closure and maps the label of the command encoder \xe2\x80\xa6CeTakes a closure and maps the label of the texture \xe2\x80\xa6CkTakes a closure and maps the label of the render bundle \xe2\x80\xa6CgTakes a closure and maps the label of the query set \xe2\x80\xa6CmTakes a closure and maps the label of the blas descriptor \xe2\x80\xa60CkTakes a closure and maps the label of the shader module \xe2\x80\xa6BiThe minimum column width (logical length)BdThe target mip level of the texture.000000CfReturns the mip level range of a subresource range \xe2\x80\xa6CjIf this render bundle will rendering to multiple array \xe2\x80\xa6CnIf the pipeline will be used with a multiview render pass, \xe2\x80\xa6CjHow many views to render to, if doing multiview rendering.21111CkThe binary operation applied to the source and destination,0CkArena for the pipeline-overridable constants defined in \xe2\x80\xa60CcThis function may consume a lot of stack space. \xe2\x80\xa6CgRemoves the current lexical scope and all its variablesCaThe value from this thread to store in the ballot0AcThe preferred size.ClThe properties of the pipeline at the primitive assembly \xe2\x80\xa60000AjThe query set to write to.0BiThe query set to write the timestamps to.CnStencil values are AND\xe2\x80\x99d with this mask when reading and \xe2\x80\xa60CeIf true, the relevant channel is not changed by a \xe2\x80\xa6DhIf <code>true</code>, the buffer can only be read in the shader, and it:0CiThe number of direct references to this expression in \xe2\x80\xa6DdReclaim all resources belonging to this <code>CommandEncoder</code>.BeNotify the peers that rows were addedAoThe number of rows in the modelBeSet the value of a given struct fieldBfSets the style to be used for widgets.0CfHow often this vertex buffer is \xe2\x80\x9cstepped\xe2\x80\x9d forward.00BaRe-implement to intercept the \xe2\x80\xa6CiProduce the stride as if this type is a base of an array.CkAdds color space and premultiplied alpha information to \xe2\x80\xa6CjAffine transform matrix 3x4 (rows x columns, row major \xe2\x80\xa6CjReturn the name to be used for the type referred to by \xe2\x80\xa6ClCreates a new configuration where none of the checks are \xe2\x80\xa6BcAn Xlib visual ID, or 0 if unknown.BcAn X11 <code>xcb_visualid_t</code>.BkWinit 0.30.x specific types and re-exports.B`Add a new span with description.Aareductions, scansCgThere is already a rendering notifier set, multiple \xe2\x80\xa6CkThe platform has already been initialized in an earlier \xe2\x80\xa61BdA raw window handle for Android NDK.DkFences in OpenGL are short-circuited to always return <code>true</code> \xe2\x80\xa600CjAllows a buffer to be used as input for a bottom level \xe2\x80\xa6BbWidth of a boolean type, in bytes.Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000CkBlue, green, red, and alpha channels. 8 bit integer per \xe2\x80\xa60BgMapping between resources and bindings.CiDescribe the blend state of a render pipeline, within \xe2\x80\xa60CiThe bottom-left of the texture is the top-left of the \xe2\x80\xa6CfIntegral type used for <code>BufferSlice</code> sizes.0CkSimilar to <code>BufferUsages</code>, but used only for \xe2\x80\xa60BnA read-only view of a mapped buffer\xe2\x80\x99s bytes.AkNames of vector components.BcResult of calling another function.0AoSPIR-V operand kind: CapabilityBkError encountered while attempting a clear.ClUse as a comparison sampler instead of a normal sampler. \xe2\x80\xa60BgThe result type of a <code>Rule</code>.BbCompute the derivative on an axis.0ClIndicates that device loss occurred. In JavaScript, this \xe2\x80\xa6B`Supported physical device types.0CgThis structure represent a diagnostic emitted while \xe2\x80\xa6BmThe Dxc compiler is new, fast and maintained.00CeThe raw files in .slint files are embedded in the \xe2\x80\xa6BgThe main function for a pipeline stage.DoAn <code>EntryPoint</code>, and its index in <code>Module::entry_points</code>.1CfAn expression that can be evaluated to obtain a value.0CiIf not present, the texture can\xe2\x80\x99t be sampled with a \xe2\x80\xa6BoTexel mixing mode when sampling between texels.0DaThe specific behavior of a <code>SubgroupGather</code> statement.0BjThe Window will be hidden (default action)0A`Image size queryAlSub-class of the image type.0AgType of an image query.B`Query information from an image.10BaStores a texel value to an image.0BlInitialize the <code>RayQuery</code> object.0CkThe return value of the <code>spawn_local()</code> function0EdConfiguration option for <code>compact</code>. See <code>compact</code> for details.AbA key was pressed.CnOptimize for low memory footprint (both while building and \xe2\x80\xa6BmThe texture is laid out densely in memory as:0CdDon\xe2\x80\x99t use this error type with thiserror\xe2\x80\x99s #[\xe2\x80\xa6AcNaga shader module.CmNo default platform was selected, or no platform could be \xe2\x80\xa600kNo rotationBnGet the number of samples, a <code>u32</code>.0CkPair of load and store operations for an attachment aspect.0BiAnother platform-specific error occurred.00B`Status of device poll operation.0BnSize in bytes of a single piece of query data.CkSize of a single occlusion/timestamp query, when copied \xe2\x80\xa61BkError encountered when dealing with queriesCgThere are no active submissions in flight as of the \xe2\x80\xa60AkCall a relational function.0ClIn-progress recording of a render pass: a list of render \xe2\x80\xa6CnA pass\xe2\x80\x99s encoder state and its validity are two distinct \xe2\x80\xa6ClRed, green, blue, and alpha channels. 16 bit integer per \xe2\x80\xa6000ClRed, green, blue, and alpha channels. 32 bit integer per \xe2\x80\xa6000CjConvenience alias for a pixel with four color channels \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa6000CnAllows shaders to use 16-bit floating point types. You may \xe2\x80\xa60CfEnables 64-bit floating point types in SPIR-V shaders.0DjAllows shaders to use i16. Not currently supported in <code>naga</code>\xe2\x80\xa60BaSkip axis-aligned bounding boxes.AlPrimitive type for a scalar.0CeRight shift carries the sign of signed integers only.0ClEach gathers from their lane xored with the given by the \xe2\x80\xa60BfA SingleShot timer is fired only once.CfInternal type used by the winit backend for thread \xe2\x80\xa6CmThe color variant of brush is a plain color that is to be \xe2\x80\xa60CmErrors produced when validating a programmable stage of a \xe2\x80\xa6ChThe swap chain is operational, but it does no longer \xe2\x80\xa60AnA case for a switch statement.0CgAllows a buffer to be used as input for a top level \xe2\x80\xa6BjSize and alignment information for a type.BeUniform control flow characteristics.AoEnable validation, if possible.AmCatch only validation errors.CfValidation error, signifying a bug in code or data \xe2\x80\xa6BbA <code>GPUValidationError</code>.BaNumber of components in a vector.0CiHow a render pipeline will retrieve attributes from a \xe2\x80\xa6AaVirtual / Hosted.0DbBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.CjThe size of a window represented in either physical or \xe2\x80\xa60CmSpecifies how the alpha channel of the textures should be \xe2\x80\xa60CkGet the binding resource for the underling acceleration \xe2\x80\xa6CnReturns the inner hal CommandEncoder using a callback. The \xe2\x80\xa6BkMacros for validation internal to the wgpu.CfThe list of attributes which comprise a single vertex.00BkThe background color or brush of the WindowClPixel which will be filled as the background in case the \xe2\x80\xa6CjThe number of bytes one texel block occupies during an \xe2\x80\xa6DiCreate a <code>DisplayHandle</code> from a <code>RawDisplayHandle</code>.DgBorrow a <code>WindowHandle</code> from a <code>RawWindowHandle</code>.EdConvert the scalar leaves of  <code>expr</code> to <code>target</code>, handling \xe2\x80\xa6DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa60B`Bitwise not - <code>!self</code>11111111111111111111111111111111111111CaReturns the number of components this format has.CaReturns an iterator over the compiled components.CgA pointer to an X server <code>xcb_connection_t</code>.CmThe coordinate of the texel we wish to load. This must be \xe2\x80\xa6000BgThe width of the copy region in pixels.0DgReturn the <code>ComponentDefinition</code> that was used to create \xe2\x80\xa6CbA struct of detailed parameters for the ray query.0CeThe intersection of a source flags value with the \xe2\x80\xa60DgBitwise and of the complement of other - <code>self &amp; !other</code>11111111111111111111111111111111111111CjMultiplier for the destination, which is stored in the \xe2\x80\xa60ChReturns true if variants are same (ignoring clear value)CiThe extensions to enable for the device. You must not \xe2\x80\xa6CkThe extensions to enable for the instance. You must not \xe2\x80\xa6DhIf this is <code>false</code>, the texture can\xe2\x80\x99t be sampled with a \xe2\x80\xa60ClConvert from a sentinel word in WGSL into its associated \xe2\x80\xa6BmReturns the texture aspect for a given plane.CgCreates a new Image from the specified shared pixel \xe2\x80\xa60BaAllocate a new model from a sliceBbCreate a SharedVector from a slice0fPanicsCmThe face to consider the front for the purpose of culling \xe2\x80\xa60CjReturns true if the window should be shown fullscreen; \xe2\x80\xa6oThe gbm device.DjReturn this arena\xe2\x80\x99s value at <code>handle</code>, if that is a valid \xe2\x80\xa6CmReturns true if the compilation failed. The errors can be \xe2\x80\xa6CjHow should the generated code handle image texel loads \xe2\x80\xa60CmWhether any set bits in a source flags value are also set \xe2\x80\xa60DkReturns whether any bit set in <code>self</code> matched any bit set in \xe2\x80\xa611111111111111111111111111111111111111AjExtracts the inner vector.DdReverse of <code>Self::new</code>, discards span information and \xe2\x80\xa6BlConvert inner error using <code>From</code>.CkRecompute the type resolution for <code>expr_handle</code>.DfReturns whether or not <code>n</code> is a multiple of this alignment.DhCheck whether <code>self</code> was defined or is a default/unknown spanBlReturns true if the stencil test is enabled.BmReturns true if the depth biasing is enabled.ChReturns true if this timestamp is the invalid timestamp.CmReturns the visibility state of the window. This function \xe2\x80\xa60BlYield a set of contained named flags values.0CgReturns an iterator over the set flags and their names.11111111111111111111111111111111111111CkHow to filter the texture when it needs to be magnified \xe2\x80\xa600CjReturn a pointer to CPU memory mapping the contents of \xe2\x80\xa6CjHow to filter the texture when it needs to be minified \xe2\x80\xa600BaRe-implement to intercept the \xe2\x80\xa6CnReturns an iterator over all publicly declared properties. \xe2\x80\xa6AiAdds a new lexical scope.ChGet the range of handles from a particular number of \xe2\x80\xa6fSafety00ClThe number of bytes to write. This must be a multiple of \xe2\x80\xa6A`Sorts the columnCgMultiplier for the source, which is produced by the \xe2\x80\xa60CeThe intersection of a source flags value with the \xe2\x80\xa6000000000000000000000000000000000000000Db<code>true</code> if the acquired buffer can still be used for \xe2\x80\xa6ChThe presentation configuration no longer matches the \xe2\x80\xa60CgConverts this color to an RgbaColor struct for easy \xe2\x80\xa60CkConvert this physical position to a logical position by \xe2\x80\xa6ClConvert this physical size to a logical size by dividing \xe2\x80\xa6DaTurn the <code>WindowSize</code> into a <code>LogicalSize</code>.210DiReturns the smallest <code>Span</code> possible that contains all the \xe2\x80\xa6BlWhether this expression is uniform, and why.AkUniformity characteristics.CnReturns the type variant that this value holds without the \xe2\x80\xa6BiWhich shader stages can see this binding.0ClReturns a new version of this color with the opacity set \xe2\x80\xa6CmReturns a new version of this brush with the related color\xe2\x80\xa610CkCreate a new configuration that selects the style to be \xe2\x80\xa6CcMask which enables/disables writes to different \xe2\x80\xa6CmStencil values are AND\xe2\x80\x99d with this mask when writing to \xe2\x80\xa610DdWrite the type <code>ty</code> as it would appear in a value\xe2\x80\x99s \xe2\x80\xa6AkWGSL abstract integer type.0EgAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known \xe2\x80\xa60AmInformation about an adapter.0CbHow edges should be handled in texture addressing.0CnGet the length of an array. The expression must resolve to \xe2\x80\xa60AaASTC RGBA channel0BhChooses the first supported mode out of:0DjSupports non-zero <code>base_vertex</code> parameter to direct indexed \xe2\x80\xa6BiType of a binding in a bind group layout.0AcAlpha blend factor.0BiBinding is backed by an array of buffers.DfA slice of a <code>Buffer</code>, to be mapped, used for vertex or \xe2\x80\xa6AeCull opaque geometry.BjClamp the value to the edge of the texture0CiColor write mask. Disabled color channels will not be \xe2\x80\xa60BhIn-progress recording of a compute pass.CnA pass\xe2\x80\x99s encoder state and its validity are two distinct \xe2\x80\xa6CeWhat kind of WGSL thing <code>Self</code> represents.n8 byte floats.ChSpecial depth format with at least 24 bit integer depth.0BjDiscrete GPU with separate CPU/GPU memory.0AmDoc comments preceding items.0DfBase trait for all resources, allows downcasting via <code>Any</code>.lExpressions.Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000EaKinds of <code>Error</code>s a <code>Device::push_error_scope()</code> may be \xe2\x80\xa6B`Lower level source of the error.BcReturned by callbacks passed to \xe2\x80\xa6CmHash map that is faster but not resilient to DoS attacks. \xe2\x80\xa6CmHash set that is faster but not resilient to DoS attacks. \xe2\x80\xa6BmBits from <code>Features</code> in array formCnPresentation frames are kept in a First-In-First-Out queue \xe2\x80\xa60DaProvides a filtered subset of rows by another <code>Model</code>.CmHelper structure that stores data needed when writing the \xe2\x80\xa6CfThis enum describes a low-level access to specific \xe2\x80\xa60D`<code>wgpu-hal</code>\xe2\x80\x99s part of <code>InternalCounters</code>.0CnAn error that can occur while fetching a display or window \xe2\x80\xa6CjPerforms an atomic operation on a texel value of an image.0BoSample a point from a sampled or a depth image.0BeFormat of indices used with pipeline.0ChError returned by <code>ComponentInstance::invoke</code>AcA key was released.CiA size represented in the coordinate space of logical \xe2\x80\xa60CiHints to the device about the memory allocation strategy.0BdFavor memory usage over performance.0DfDispatch notifications from a <code>Model</code> to one or several \xe2\x80\xa6Aa1.0 - D.component0Aa1.0 - S.component0l[0, 0, 0, 1]0l[1, 1, 1, 1]0B`Catch only out-of-memory errors.nOut of memory.CeThere is no more memory left to allocate a new frame.BcA <code>GPUOutOfMemoryError</code>.CkA trait for types representing of a set of Naga IR type \xe2\x80\xa6CnDescribes an individual channel within a render pass, such \xe2\x80\xa6ChFavor performance over memory usage (the default value).0CkThe value will be interpolated in a perspective-correct \xe2\x80\xa60BaType of drawing mode for polygons0CfA type that should be registered in the module\xe2\x80\x99s \xe2\x80\xa6CfTiming and queueing with which frames are actually \xe2\x80\xa60ClRed, green, blue, and alpha channels. 10 bit integer for \xe2\x80\xa60CjA 16bit pixel that has 5 red bits, 6 green bits and  5 \xe2\x80\xa6CjRed, green, blue, and alpha channels. 16 bit float per \xe2\x80\xa60CmRed, green, blue, and alpha. 16 bit integer per channel. [\xe2\x80\xa60ClRed, green, blue, and alpha channels. 16 bit integer per \xe2\x80\xa60CjRed, green, blue, and alpha channels. 32 bit float per \xe2\x80\xa60CaSampling modifier to control the level of detail.0mShader input.ClCollections of shader features a device supports if they \xe2\x80\xa6AlA HLSL shader model version.1BcStage of the programmable pipeline.0ClEach gathers from their lane plus the shift given by the \xe2\x80\xa60CeA source code span together with \xe2\x80\x9ccontext\xe2\x80\x9d, a \xe2\x80\xa6CjEfficiently performs many buffer writes by sharing and \xe2\x80\xa6hStencil.0AmThe value of the switch case.0CkStructure responsible for managing variable lookups and \xe2\x80\xa6CnThis is used to define the column and the column header of \xe2\x80\xa6BbTrait for the pixels in the bufferAlThe pixel type of the bufferClSimilar to <code>TextureUsages</code>, but used only for \xe2\x80\xa60AiHandle to a texture view.AoBinding is backed by a texture.BmA context for printing Naga IR types as WGSL.BgThe underlying handle is not available.CdAn arena whose elements are guaranteed to be unique.CkThe rendering backend does not support rendering notifiers.0CeDescribes the vertex processing in a render pipeline.CbDescribes the vertex process in a render pipeline.DhA trait for querying the <code>ErrorType</code> classification of an \xe2\x80\xa6CiA event that describes user input or windowing system \xe2\x80\xa6AaWorkaround flags.C`Configuration flags for the <code>Writer</code>.CmGL uniform name for the item. This name is the same as if \xe2\x80\xa6CgAll live allocations, sub-allocated from memory blocks.DiThe range of allocations in <code>AllocatorReport::allocations</code> \xe2\x80\xa61CgList of supported alpha modes to use with the given \xe2\x80\xa60DhThe index into an arrayed image. If the <code>arrayed</code> flag in \xe2\x80\xa6000CmAttach one peer. The peer will be notified when the model \xe2\x80\xa60ClThe value added to the vertex index before indexing into \xe2\x80\xa60gSafety:CbMap of resources association to binding locations.0CbMap of resources to information about the binding.fSafetyBlBlend a color to all the pixel in the slice.BnSets the <code>BlendState</code> that is used.B`The color space of this texture.00BhThe height of the copy region in pixels.0BgA WinRT <code>CoreWindow</code> handle.CmCreate a bottom level acceleration structure, used inside \xe2\x80\xa6CiThe create info for the device. You may add or modify \xe2\x80\xa6CkThe create info for the instance. You may add or modify \xe2\x80\xa6CkCreate a top level acceleration structure, used for ray \xe2\x80\xa6CaCreates a view of this texture, specifying an \xe2\x80\xa6CeCustom index for the instance used inside the shader.CfThe depth slice index of a 3D view. It must not be \xe2\x80\xa600BdDescription of the validation error.BfDescription of the internal GPU error.BfDescriptor for each triangle geometry.0DeCheck <code>device_id</code> for freeable resources and completed \xe2\x80\xa6nType of device0CjReturns the diagnostics that were produced in the last \xe2\x80\xa6BhReturn an iterator over the diagnostics.kDriver info0CkReturns the EGL version the adapter context was created \xe2\x80\xa6kEntrypoint.00CjThe name of the entry point in the compiled shader to use.00AlThe name of the entry point.AiThe entry point to write.1CkThe name of the entry point in the compiled shader. The \xe2\x80\xa60CmThe name of the entry point in the compiled shader. There \xe2\x80\xa6555BfExpressions used inside this function.CjThe expression arena of the current function being written1ClNumber of indexes to skip in the index buffer (optional, \xe2\x80\xa6BhThe first index within the index buffer.0ChConstruct a color from the red, green and blue color \xe2\x80\xa60DdCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.A`The gbm surface.CkA getter is generated for each property declared at the \xe2\x80\xa6CnNumber of indices. Only needed if an index buffer is used. \xe2\x80\xa6AnThe number of indices to draw.01CdReturn the index range covered by <code>self</code>.CeReturn true if <code>self</code> is an abstract type.DgChecks if the task associated with this <code>JoinHandle</code> has \xe2\x80\xa60ChThe byte size required to fit the last vertex in the \xe2\x80\xa6ClReturns the layer range of a subresource range describes \xe2\x80\xa6ClReturns a tuple with the line (starting at 1) and column \xe2\x80\xa6Ad1-based line number.0C`This is an internal module that contains the \xe2\x80\xa6D`Return the <code>Type</code> referred to by <code>handle</code>.CiChecks that we are operating within the memory budget \xe2\x80\xa6BnThe multi-sampling properties of the pipeline.0000BgGenerating names for predeclared types.CgReturns the EGLDisplay corresponding to the adapter \xe2\x80\xa6BmAsynchronously read the contents of a buffer.CnAdds the requirement to the selector that the backend must \xe2\x80\xa60C`Notify the peers that a specific row was changedBgNotify the peers that rows were removedCkReturns the sample type compatible with this format and \xe2\x80\xa6BlSets the <code>Sampler</code> Filtering ModeBcSample type of the texture binding.0CkA setter is generated for each property declared at the \xe2\x80\xa6ChShow the window if the argument is true, hide otherwise.CjStarts the timer with the duration and the callback to \xe2\x80\xa6CnThis crate serves as a companion crate of the slint crate. \xe2\x80\xa6AkSlope depth biasing factor.0Cjreturn the path of the source file where this error is \xe2\x80\xa6D`Spawns a <code>Future</code> to execute in the Slint event loop.0ClWhat operations will be performed on the stencil part of \xe2\x80\xa6BcStrings used by debug instructions.0fSafetyCgConverts this color to an RgbaColor struct for easy \xe2\x80\xa60CkConvert this logical position to a physical position by \xe2\x80\xa6DjTurn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.CcConvert this logical size to a physical size by \xe2\x80\xa6DbTurn the <code>WindowSize</code> into a <code>PhysicalSize</code>.3210CaRemoves the colorspace information from the type.DoReturn the WGSL form of <code>self</code> as a <code>&#39;static</code> string.DhReturn the <code>TypeLoader</code> used when parsing the code in the \xe2\x80\xa6CeUnconfigure <code>self</code> on <code>device</code>.ChUpdate mode for the bottom level acceleration structure.00000BmInitialize a resolve context from the module.CfAllow for incremental updates (no change in size), \xe2\x80\xa6BbAttempt to set an output property.AnAddressing space of variables.0AnResult of an atomic operation.0Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60000000AbArray of bindings.0BiDifferent ways that you can use a buffer.0BaThe color target of a renderpass.AhAllowed IR capabilities.CcError returned by the <code>compile</code> functionCnParse error. The error are printed in the stderr, and also \xe2\x80\xa6Da<code>wgpu-core</code>\xe2\x80\x99s part of <code>InternalCounters</code>.0BoSpecial depth format with 16 bit integer depth.0CfSpecial depth format with 32 bit floating point depth.0CgA callback to signal that wgpu is no longer using a \xe2\x80\xa6BjSelects which DX12 shader compiler to use.00;;;;C`Force all intersections to be treated as opaque.E`Insertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but \xe2\x80\xa6DmInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but \xe2\x80\xa6CaFeatures that are not guaranteed to be supported.0CjWhether we\xe2\x80\x99re generating an entry point or a regular \xe2\x80\xa6ClFunction passes if new value is greater than or equal to \xe2\x80\xa6CkShader may rewrite depth only with a value greater than \xe2\x80\xa601ClAn index that may be statically known, or may need to be \xe2\x80\xa6CkCan be be used for user-defined IO between pipeline stages.CmThe texture usage must include TEXTURE_BINDING as well as \xe2\x80\xa6BbBuilt-in shader function for math.0BmRepeat the texture, mirroring it every repeat0CnThis trait defines the interface that users of a model can \xe2\x80\xa6BcThe rendering is done using OpenGL.0CkThe sampling result is produced based on a single color \xe2\x80\xa60CiThe underlying handle cannot be represented using the \xe2\x80\xa6Ab1.0 - S1.component0CjA size represented in the coordinate space of physical \xe2\x80\xa60BhThe position of the pointer has changed.BkIf possible, perform an incremental update.0oPush constants.0ClThe above set of reserved keywords, turned into a cached \xe2\x80\xa6BoPre-prepared reusable bundle of GPU operations.CbError encountered while trying to resolve a query.CnOnly redraw the parts that have changed since the previous \xe2\x80\xa6CgProvides a reversed view of another <code>Model</code>.ClRed, green, blue, and alpha channels. 10 bit integer for \xe2\x80\xa60CjPacked unsigned float with 9 bits mantisa for each RGB \xe2\x80\xa60BbAllows shaders to use i64 and u64.0C`Support for 64-bit signed and unsigned integers.BjBinding is backed by an array of samplers.BcHandle to a compiled shader module.AjSource of a shader module.CnDescribes the shader stages that a binding will be visible \xe2\x80\xa6AaValidation flags.1BiA string type used by the Slint run-time.0Cm(Re-export from corelib.) A string type used by the Slint \xe2\x80\xa61ClSharedVector holds a reference-counted read-only copy of \xe2\x80\xa6Cb(Re-export from corelib.) SharedVector holds a \xe2\x80\xa6ClSet of special types that can be optionally generated by \xe2\x80\xa60CfState of the stencil operation (fixed-pipeline stage).0BcMember of a user-defined structure.0BeResult of an unsuccessful call to \xe2\x80\xa6BeA texture or buffer to be freed soon.AiSafe instance for a Tlas.CnVertex data is a list of triangles. Each set of 3 vertices \xe2\x80\xa60CnFour unsigned 8-bit integers, packed into a 32-bit integer \xe2\x80\xa60ClSupports specifying which view format values are allowed \xe2\x80\xa6AnPointer to a scalar or vector.0CiVertex Format for a <code>VertexAttribute</code> (input).0CjThis data structure provides settings for initializing \xe2\x80\xa6CnThis struct represents a persistent handle to a window and \xe2\x80\xa6DeSuper trait for window handles as used in <code>SurfaceTarget</code>.AgThe handle to a window.2CoReturn a list of the types allowed for argument <code>i</code>.DfHelper method that generates a <code>NameKey</code> for a function \xe2\x80\xa6CiThe stride, in bytes, between elements of this buffer \xe2\x80\xa6CfThe stride, in bytes, between elements of this buffer.0CmAdds the requirement that the selected backend must match \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in two flags values.000000000000000000000000000000000000000CiBorder color to use when <code>address_mode</code> is \xe2\x80\xa6BlBorder color to use when address_mode is \xe2\x80\xa61ClIf given, the set of capabilities modules are allowed to \xe2\x80\xa6CjCompares every limits within self is within the limits \xe2\x80\xa6AfClears buffer to zero.CkReturns a clone of this handle that\xe2\x80\x99s a strong reference.00BdCompact a BLAS, it must have had \xe2\x80\xa6CjThe ID of the connector associated with the selected mode.CdIf set to true, the primitives are rendered with \xe2\x80\xa6ChSpecifies restrictions on how the depth value can be \xe2\x80\xa601ClThe drawing context type used on the HTML Canvas element \xe2\x80\xa60AfSource codes for debugBaRe-implement to intercept the \xe2\x80\xa6CjThe label for the device. This is used to identify the \xe2\x80\xa6mDoc comments.0CnDraws indexed primitives using the active index buffer and \xe2\x80\xa600AiReturns the EGL instance.DhReturn a fresh <code>CommandBuffer</code> holding the recorded commands.mEntry points.0CkIf true, the control flow continues to the next case in \xe2\x80\xa60CkOffset into the vertex buffer as a factor of the vertex \xe2\x80\xa6BfThe Index of the first vertex to draw.0CiConstruct a color from the alpha, red, green and blue \xe2\x80\xa60CnConvert a given logical position to a physical position by \xe2\x80\xa6CfConvert a given logical size to a physical size by \xe2\x80\xa610ChConstruct a color from the red, green and blue color \xe2\x80\xa60CiReturn the value for a public property of this component.AgForward to get_propertyCbLoad WGSL source code from a file at compile time.AhIndex buffer (optional).CkFormat of an index. Only needed if an index buffer is used.0DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.0BkBitwise and - <code>self &amp; other</code>11111111111111111111111111111111111111CnFor each callback declared at the root of the component, a \xe2\x80\xa6BlReturns if the window is currently maximizedCktrue if the window is in a maximized state, otherwise false1BlReturns if the window is currently minimizedCktrue if the window is in a minimized state, otherwise false1CiReturns true if the state doesn\xe2\x80\x99t mutate the target \xe2\x80\xa6CnReturns true if the state doesn\xe2\x80\x99t mutate either depth or \xe2\x80\xa6CnReturns true if the face state doesn\xe2\x80\x99t mutate the target \xe2\x80\xa6DcReturns <code>(major, minor)</code> of the SPIR-V language version.Bl(Major, Minor) target version of the SPIR-V.BgHints for memory allocation strategies.00AhThe type of the message.CmTrue if the texture has a sample count greater than 1. If \xe2\x80\xa60CmCreates a new external adapter using the specified loader \xe2\x80\xa6CnControls the way each polygon is rasterized. Can be either \xe2\x80\xa60CnPresentation mode of the swap chain. Fifo is the only mode \xe2\x80\xa6AnVertical synchronization mode.1CmCalled once per line, you will have to call the render_fn \xe2\x80\xa6fSafetyClThe display refresh rate of the selected mode multiplied \xe2\x80\xa6CkIf this expression requires uniform control flow, store \xe2\x80\xa6CiHelper method that resolves a type of a given expression.CfReturns the sample_count of this <code>Texture</code>.CkSample count of texture. If this is not 1, texture must \xe2\x80\xa6CkSample count this render bundle is capable of rendering \xe2\x80\xa61CkSample count this render bundle is capable of rendering to.2ClAll pairs of (texture, sampler) globals that may be used \xe2\x80\xa6BaReturns the scalar width in bytesCfThis function returns the scale factor that allows \xe2\x80\xa6CjThe window system provided scale factor to map logical \xe2\x80\xa61CiSet a handler for the callback with the given name. A \xe2\x80\xa6AgForward to set_callbackCmChange the duration of timer. If the timer was is running \xe2\x80\xa6BaSets the active compute pipeline.B`Sets the active render pipeline.00BcSet the Slint platform abstraction.CnSets the position of the window on the screen, in physical \xe2\x80\xa600CfSet the value for a public property of this component.CfSet a property and remember its value for when the \xe2\x80\xa6BcSets the data for a particular row.ClSets the viewport used during the rasterization stage to \xe2\x80\xa6CmWhich collections of features shaders support. Defined in \xe2\x80\xa6B`The hlsl shader model to be used1AmThe stage of the entry point.0BfReturns a reference to the inner model000ClThis function is called by the renderers when all OpenGL \xe2\x80\xa6CfRemove the mapping established by the last call to \xe2\x80\xa6CmGets the row index of the underlying unsorted model for a \xe2\x80\xa6AcNumber of vertices.AoThe number of vertices to draw.01BcThe vertex stage for this pipeline.ClSpecifies what view formats will be allowed when calling \xe2\x80\xa600CkAllows views of this texture to have a different format \xe2\x80\xa6CiAllows views of swapchain texture to have a different \xe2\x80\xa622BgThe width of the copy region in blocks.0BaRe-implement to intercept the \xe2\x80\xa6DkReturns a future that resolves to the <code>winit::window::Window</code>\xe2\x80\xa6AoAdd a <code>SpanContext</code>.EoCopies the bytes of <code>data</code> into <code>buffer</code> starting at <code>offset</code>.DhAllocate a staging belt slice of <code>size</code> to be copied into \xe2\x80\xa6DaWrite the <code>Scalar</code> <code>scalar</code> as a WGSL type.C`Configuration flags for the <code>Writer</code>.AmAbstract floating-point type.0Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60AeWebGPU in the browser0CmIntegral type used for <code>Buffer</code> offsets and sizes.0BjDescribes the segment of a buffer to bind.CfA region of a buffer made visible to shaders via a \xe2\x80\xa6BoA write-only view of a mapped buffer\xe2\x80\x99s bytes.BcEnables clear to zero for textures.0BoSupport for <code>BuiltIn::ClipDistance</code>.AjA WGSL constructible type.BoSupport for <code>BuiltIn::CullDistance</code>.CiClamp the value to the border of the texture Requires \xe2\x80\xa60BfHandle to a command buffer on the GPU.CgA buffer of commands to be submitted to the GPU for \xe2\x80\xa6BaThis API\xe2\x80\x99s command buffer type.CjCommand buffer type, which performs double duty as the \xe2\x80\xa6CgThe conical gradient variant of a brush describes a \xe2\x80\xa60CgDecrements stencil value by one, wrapping on underflow.0CiThe handle to the display controller of the windowing \xe2\x80\xa6CbIntegral type used for dynamic bind group offsets.0Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60B`Texture format capability flags.CgDescribes the fragment processing in a render pipeline.CcDescribes fragment processing in a render pipeline.CfIncrements stencil value by one, wrapping on overflow.0CjError occurring while trying to create an instance, or \xe2\x80\xa6AiInstance debugging flags.00BjIntegrated GPU with shared CPU/GPU memory.0CiThe interpolation qualifier of a binding or struct field.0CkThe texture format is not supported. The only supported \xe2\x80\xa6BcVariable defined at function level.AkReference a local variable.10BeMinimum alignment of buffer mappings.0DkSynchronize invocations within the work group. The <code>Barrier</code> \xe2\x80\xa60CdSupport for <code>AddressSpace::PushConstant</code>.CkHandle to a pipeline cache, which is used to accelerate \xe2\x80\xa6BgThe platform encountered a fatal error.00AnThe pointer exited the window.CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa60CfAllow a buffer to be the destination buffer for a [\xe2\x80\xa6BeA buffer used to store query results.ClAll gather from the same quad lane at the index given by \xe2\x80\xa60BmError encountered while trying to use queriesDoMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.ClRed, green, and blue channels. 11 bit float with no sign \xe2\x80\xa60CiA temporary buffer, consumed by the command that uses it.AjFlags describing an image.0AeImage storage format.0BeStatus of the received surface image.0CjThe window/canvas/surface/swap-chain/etc. a surface is \xe2\x80\xa6CjSelects a subset of the data a <code>Texture</code> holds.0CjFormat in which a texture\xe2\x80\x99s texels are stored in GPU \xe2\x80\xa60BjDifferent ways that you can use a texture.0CcError encountered while attempting a data transfer.CfVertex data is a triangle strip. Each set of three \xe2\x80\xa60B`The texture is in unknown state.DkUse <code>BlasTriangleGeometry::transform_buffer</code> when building a \xe2\x80\xa6C`Operation that can be applied on a single value.0CdThe requested Wait was satisfied before the timeout.0CjThis trait represents the adaptation layer between the \xe2\x80\xa6BaRe-implement to intercept the \xe2\x80\xa6CmHow to deal with out of bounds accesses in the u (i.e. x) \xe2\x80\xa6DdMake an <code>TexelCopyTextureInfo</code> representing the whole \xe2\x80\xa6CnHow should the generated code handle binding array indexes \xe2\x80\xa60DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.000000000000000000000000000000000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6000000000000000000000000000000000000000ClEnforce bounds checks in shaders, even if the underlying \xe2\x80\xa60fSafetyClAmount of allocated gpu memory attributed to buffers, in \xe2\x80\xa60BmThe total number of bytes in the copy region.0B`Bytes per \xe2\x80\x9crow\xe2\x80\x9d in an image.0CdDetermine which policy applies to <code>base</code>.CnWhether the sampling operation should clamp each component \xe2\x80\xa60AgClears texture to zero.AjHow to combine the results0CiThe formats of the color attachments that this render \xe2\x80\xa60CnThe effect of draw calls on the color aspect of the output \xe2\x80\xa60AbCompare two types.DiLimit <code>self</code> to overloads whose arguments are all concrete \xe2\x80\xa6AnCreates a <code>Buffer</code>.AeCreates a new buffer.CkComparison function used to compare depth values in the \xe2\x80\xa60CiOperation that is performed when depth test fails but \xe2\x80\xa60CkInformation about the depth attachment that this render \xe2\x80\xa6CmThe effect of draw calls on the depth and stencil aspects \xe2\x80\xa610000fSafetyCnDraws primitives from the active vertex buffer(s) based on \xe2\x80\xa600CiConstruct a color from the alpha, red, green and blue \xe2\x80\xa602CcConvert to JSON encoded string to <code>Self</code>CnConvert a given physical position to a logical position by \xe2\x80\xa6CfConvert a given physical size to a logical size by \xe2\x80\xa610CmGet a mutable slice to a range of instances. Returns None \xe2\x80\xa6DhReturns the value of the <code>user_name</code> property declared in \xe2\x80\xa6BhThe height of the copy region in blocks.0CgReturns the include paths the component compiler is \xe2\x80\xa60CgCall the given callback or function within a global \xe2\x80\xa6AhForward to invoke_globalCaReturns <code>true</code> for compressed formats.BmReturns if the window is currently fullscreenCjReturns true if the window should be shown fullscreen; \xe2\x80\xa61CiReturns true if the statement directly terminates the \xe2\x80\xa6ClReturns an iterator over the items stored in this arena, \xe2\x80\xa6CgReturns the library paths the component compiler is \xe2\x80\xa60Ck1-based column in code units (in bytes) of the start of \xe2\x80\xa60BoMaximum level of detail (i.e. mip level) to use00BoMinimum level of detail (i.e. mip level) to use00CnReturn the largest number of arguments in any type rule in \xe2\x80\xa6CnNumber of instances that can be stored in the acceleration \xe2\x80\xa600ClReturn the smallest number of arguments in any type rule \xe2\x80\xa6BdHow to filter between mip map levels00CgThe implementation should return a reference to its \xe2\x80\xa6DiCreates a new SortModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DbReturn a type rule for each of the overloads in <code>self</code>.CkCalculates the physical size backing a texture of the givenCnList of supported presentation modes to use with the given \xe2\x80\xa6AoList of supported V-sync modes.1CjGet the raw Vulkan swapchain associated with this surface.D`Add an expression\xe2\x80\x99s type to an <code>Arena&lt;Type&gt;</code>.CnAdds the requirement that the selected renderer must match \xe2\x80\xa60CnAdds the requirement to the selector that the backend must \xe2\x80\xa60BbMaximize or unmaximize the window.0BaMinimize or unminimze the window.0CkAssigns a new value to the <code>user_name</code> property.BcDictionary of special type handles.0EfThis is equivalent to <code>core::assert</code> if the <code>strict_asserts</code> \xe2\x80\xa6CmTakes a snapshot of the window contents and returns it as \xe2\x80\xa60DdMaps this <code>StandardFilterableTriggeringRule</code> into the \xe2\x80\xa6mType MappingsCkReturns true if the state relies on the constant color, \xe2\x80\xa6CbWrite the <code>Value</code> out into a JSON valueDkIndex in <code>push_constant_data</code> of the start of the data to be \xe2\x80\xa6nVertex buffer.BhFormat of a vertex position, must be \xe2\x80\xa60CmWhether this acceleration structure can be used to create \xe2\x80\xa60BgVertex stride, must be greater than \xe2\x80\xa6DiReturns true if the result is either <code>Self::WaitSucceeded</code> \xe2\x80\xa6CjCould the error have been avoided? That is, is there a \xe2\x80\xa6CjReturns a struct that implements the raw window handle \xe2\x80\xa6AkGet a handle to the window.1CmCreate a new empty array with a pre-allocated capacity in \xe2\x80\xa60CjCopies the bytes of <code>data</code> into into a texture.BbWidth of abstract types, in bytes.CeBlend mode that does standard alpha blending with \xe2\x80\xa6DfA wrapper around a <code>glow::Context</code> and the required EGL \xe2\x80\xa6ClThe scene of items was rendered, but the back buffer was \xe2\x80\xa60CmPaths specified in .slint files are made absolute and the \xe2\x80\xa6AlFunction on an atomic value.0Di<code>Backend::BrowserWebGpu</code>. Supported when targeting the web \xe2\x80\xa6AmBuffer address space support.BkOptions that are passed to a given backend.00CkBlue, green, red, and alpha channels. 8 bit integer per \xe2\x80\xa60BlOperation that can be applied on two values.0DeAn element of a <code>BindGroupDescriptor</code>, consisting of a \xe2\x80\xa6CaBindable resource and the slot to bind it to. \xe2\x80\xa6ocbindgen:ignoreCjError occurred when trying to asynchronously prepare a \xe2\x80\xa6CfBuilds the given sets of geometry into the given Blas.CbContains the sets of geometry that go into a Blas.CiDescribes a blend component of a <code>BlendState</code>.0AfAlpha blend operation.0CgAll gather from the active lane with the smallest index0D`Allows the use of <code>@builtin(clip_distances)</code> in WGSL.0AiCull non-opaque geometry.BgThe user requested to close the window.BcEncodes a series of GPU operations.ClEncoder and allocation pool for <code>CommandBuffer</code>s.DkSynchronize invocations within the work group. The <code>Barrier</code> \xe2\x80\xa60CgDecrements stencil value by one, clamping on underflow.0CcDescribes the biasing setting for the depth target.0BfAxis on which to compute a derivative.0ChBinary flags listing features that may or may not be \xe2\x80\xa60CmCPU accessible buffer used to download data back from the \xe2\x80\xa6AaDXC shader model.00BlExplicitly allows early depth/stencil tests.0Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60DeError returned from the <code>invoke_from_event_loop()</code> and \xe2\x80\xa60BaTrait that is returned by the \xe2\x80\xa6CjExclude elements that are not visible because they are \xe2\x80\xa6DiError type returned from <code>RenderBundleEncoder::new</code> if the \xe2\x80\xa6CcInformation about an expression in a function body.CaFeatures that are not guaranteed to be supported.0AbA function result.0BaVariable defined at module level.AlReference a global variable.10BjCan be used for host-shareable structures.nInstance indexBfThe number of dimensions an image has.0CjFlags corresponding to the boolean(-ish) parameters to \xe2\x80\xa6AdInclude all elementsCfIncrements stencil value by one, clamping on overflow.0CdEmit <code>OpName</code> for input/output locations.ChThe linear gradient variant of a brush describes the \xe2\x80\xa60ChError generated if an image cannot be loaded for any \xe2\x80\xa60DiAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.BaFormat can be multisampled by x2.DiAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.BaFormat can be multisampled by x4.DiAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.BaFormat can be multisampled by x8.CdThere is no callback or function with the given nameBhThere is no callback with the given nameBhThere is no property with the given nameBiThere is no property with the given name.CjCannot read environment variable CARGO_MANIFEST_DIR or \xe2\x80\xa6BhAllows the use of pipeline cache objects0CiAllows the use of push constants: small, fast bits of \xe2\x80\xa60CcA command that can be recorded in a pass or bundle.DgVariant of <code>EncoderStateError</code> that includes the pass scope.CkRepresents a rectangular region on the screen, used for \xe2\x80\xa6AlHandle to a pipeline layout.AfA pointer was pressed.CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa60CaThe winit event shouldn\xe2\x80\x99t be processed further.0CaDescribes the state of primitive assembly and \xe2\x80\xa60CmThe radial gradient variant of a brush describes a circle \xe2\x80\xa60CbReflection info for texture mappings and uniforms.BfReflection info for entry point names.BjHandle to a rendering (graphics) pipeline.C`The window has been created and the graphics \xe2\x80\xa60ClThis enum describes the different rendering states, that \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa60BlFormat can be sampled with a linear sampler.CgFormat can be sampled with a min/max reduction sampler.BhSupport for 16-bit floating-point types.AiSkip triangular geometry.ClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6ClAllows a texture to be used with image atomics. Requires \xe2\x80\xa6BmImage atomic enabled storage. cbindgen:ignoreBkFormat can be used as storage with atomics.BaHost-shareable structure layouts.CdIntegral type used for binding locations in shaders.0BcSPIR-V operand kind: SourceLanguageClA human-readable representation for a span, tailored for \xe2\x80\xa60AbA storage texture.0ChCalculate a bitmask using a boolean from each active \xe2\x80\xa60CiGather a value from another active thread in the subgroup0ChSurface texture that can be rendered to. Result of a \xe2\x80\xa6ChRedraw the part that have changed since the last two \xe2\x80\xa6CnEnables image atomic fetch add, and, xor, or, min, and max \xe2\x80\xa60BhSupport for atomic operations on images.AdTexture levels queryBbTexture Blitting (Copying) UtilityChMapping between a texture and its sampler, if it exists.CnA trait for converting a value to a <code>SharedString</code>.BoThe result of computing an expression\xe2\x80\x99s type.BkSupports storage buffers in vertex shaders.CfWhether a vertex buffer is indexed by vertex or by \xe2\x80\xa60ClThe position of the window in either physical or logical \xe2\x80\xa60fSafetyClA hook for when a wgpu-core buffer is created from a raw \xe2\x80\xa6CmHow to deal with out of bounds accesses in the u (i.e. x) \xe2\x80\xa60CmHow to deal with out of bounds accesses in the v (i.e. y) \xe2\x80\xa60CmHow to deal with out of bounds accesses in the w (i.e. z) \xe2\x80\xa60DeValid bits for <code>TextureDescriptor::Usage</code> provided for \xe2\x80\xa60CnReturns the ref count, upon reaching which this expression \xe2\x80\xa6oBase mip level.000BdBegin encoding a new command buffer.EbReturn the canonical form of <code>self</code>, or <code>None</code> if it\xe2\x80\x99s \xe2\x80\xa6BdFeature flags and backend selection.ChReturns the current interval to internal measure the \xe2\x80\xa6CmReturns a copy of text stored in the system clipboard, if \xe2\x80\xa6BcCreates a new <code>Sampler</code>.BkCreates a new surface targeting a given \xe2\x80\xa6ClCreates a new surface targeting the given display/window \xe2\x80\xa6BcCreates a new <code>Texture</code>.AfCreates a new texture.BhCurrent extent of the surface, if known.CgFree <code>buffer</code> and any GPU resources it owns.BeDispatch a window event to the scene.0CkGet a handle to the display controller of the windowing \xe2\x80\xa6CkIf the window needs to be redrawn, the callback will be \xe2\x80\xa6BiEmits a summary of the error to a string.0CmEnsures that the OpenGL context is current when returning \xe2\x80\xa6BjBehavior of OpenGL fences. Affects how \xe2\x80\xa600D`return the first and last handles included in <code>self</code>.BnThe instance ID of the first instance to draw.000BeThe fragment stage for this pipeline.0CjThis module exists only to explain the API of the code \xe2\x80\xa6CjGet a single mutable reference to an instance. Returns \xe2\x80\xa6B`The number of instances to draw.000CfThe flags to fine-tune behaviour of the WGPU instance.CnReturns true if the fence behavior is <code>AutoFinish</code>.ClReturns true if the result is <code>Self::QueueEmpty</code>.CkReturns true if this brush contains a fully transparent \xe2\x80\xa60ChLoad an Image from a path to a file containing an image.0BlReturns the pixels interpreted as raw bytes.0CiReturn a mutable slice to the array. If the array was \xe2\x80\xa6CdReturn a mutable slice to the pixel data. If the \xe2\x80\xa610ClVersion of <code>make_spirv</code> intended for use with \xe2\x80\xa6BaRe-implement to intercept the \xe2\x80\xa6DaCalculates the extent at a given mip level. Does <em>not</em> \xe2\x80\xa6BkCalculates the extent at a given mip level.BdReturn the most preferred candidate.CkReturns true if the expression is considered emitted at \xe2\x80\xa6CbNumber of workgroups in each dimension x, y and z.00000CiRender the window, line by line, into the line buffer \xe2\x80\xa6CjRequests a connection to a physical device, creating a \xe2\x80\xa6CmThis function issues a request to the windowing system to \xe2\x80\xa6CmIssues a request to the windowing system to re-render the \xe2\x80\xa61CnAdds the requirement to the selector that the backend must \xe2\x80\xa6000CeThe view that will receive the resolved output if \xe2\x80\xa600Bm\xe2\x80\x9cRows\xe2\x80\x9d that make up a single \xe2\x80\x9cimage\xe2\x80\x9d.0CmEnters the main event loop. This is necessary in order to \xe2\x80\xa6CdSpins an event loop and renders the visible windows.1fSafetyClSets the active bind group for a given bind group index. \xe2\x80\xa6000D`Sets the bind group at <code>index</code> to <code>group</code>.BnSet or unset the window to display fullscreen.0CnSets the application id for use on Wayland or X11 with xdg \xe2\x80\xa6044CmAmount of allocated gpu memory attributed to textures, in \xe2\x80\xa60B`Convert to a JSON-encoded stringChReturns a new version of this color with the opacity \xe2\x80\xa6ChReturns a new version of this brush with the opacity \xe2\x80\xa610CmGets the row index of the underlying unfiltered model for \xe2\x80\xa6CiThe format of any vertex buffers used with this pipeline.CjDimension of the texture view that is going to be sampled.000CnConfigures the compiler to use Signed Distance Field (SDF) \xe2\x80\xa6BaWorkgroup size for compute stages0DaWrite the WGSL form of <code>override</code> to <code>out</code>.DfWrite this handle\xe2\x80\x99s index to <code>formatter</code>, preceded by \xe2\x80\xa6CmA report that can be generated for informational purposes \xe2\x80\xa60CiUse the BackendSelector to configure one of Slint\xe2\x80\x99s \xe2\x80\xa60BkThe scene of items is about to be rendered.0BaHandle to a binding group layout.AbBind group layout.DcResource to be bound by a <code>BindGroup</code> for use with a \xe2\x80\xa6ChThe device supports compiling and using compute shaders.CjComparison function used for depth and stencil operations.0BlCompilation information for a shader module.ClThis trait describes the common public API of a strongly \xe2\x80\xa60AmHandle to a compute pipeline.CjSupports ARB_shader_draw_parameters on the host, which \xe2\x80\xa6ClA buffer that has been marked as destroyed and is staged \xe2\x80\xa6CkA wrapper for displaying Naga IR terms in debugging output.CmThis enum describes the level or severity of a diagnostic \xe2\x80\xa6CkRepresents the sets of additional limits on an adapter, \xe2\x80\xa60CjRaw window handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60AlAn external texture binding.0CdForce all intersections to be treated as non-opaque.CgRaw window handle for the Linux Generic Buffer Manager.BiDictate the behavior of fences in OpenGL.00AeA handle to a window.CmAdapter that has the highest performance. This is often a \xe2\x80\xa60BlThe number of elements in an indexable type.0BjAn internal counter for debugging purposesCmThe close request is rejected and the window will be kept \xe2\x80\xa60CmA position represented in the coordinate space of logical \xe2\x80\xa60DjAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.BbFormat can be multisampled by x16.EeThe specified <code>Version</code> doesn\xe2\x80\x99t have all required <code>Features</code>.DhD3D12: Add support for <code>num_workgroups</code> builtins via push \xe2\x80\xa6CfThis trait describes the interface GPU accelerated \xe2\x80\xa6CkAllows for bind group binding arrays to be shorter than \xe2\x80\xa6CaSupport for <code>BuiltIn::PrimitiveIndex</code>.CeA subset of options meant to be changed per pipeline.ChA subset of options that are meant to be changed per \xe2\x80\xa6AgA pointer was released.CgThe wheel button of a mouse was rotated to initiate \xe2\x80\xa6CbPower Preference when choosing a physical adapter.0CeReturn types predeclared for the frexp, modf, and \xe2\x80\xa60CbA window handle for a particular windowing system.C`Error encountered when performing a render pass.CbPipeline binding information for global resources.0iDst - Src0DjAllows a texture to be a <code>BindingType::StorageTexture</code> in a \xe2\x80\xa6CgAllows vertex shaders to use the subgroup operation \xe2\x80\xa60CfThis an example of the API that is generated for a \xe2\x80\xa6CeSet a range of push constants to values stored in \xe2\x80\xa6DjIdentifier for a particular call to <code>Queue::submit</code>. Can be \xe2\x80\xa6B`The index of a queue submission.mImage atomicsDhAllows a texture to be a <code>BindingType::Texture</code> in a bind \xe2\x80\xa6AeTexture samples queryClEnables use of Timestamp Queries. These queries tell the \xe2\x80\xa60ChSpecifies a particular set of subresources in a texture.CiThree unsigned 10-bit integers and one 2-bit integer, \xe2\x80\xa60CnBinding is visible from the vertex and fragment shaders of \xe2\x80\xa6AaValidation flags.BfVertex inputs (attributes) to shaders.0AnRaw window handle for the Web.AjRaw window handle for Xcb.BkA pointer to an <code>ANativeWindow</code>.DiReturn the next texture to be presented by <code>self</code>, for the \xe2\x80\xa6CmA hook for when a wgpu-core texture is created from a raw \xe2\x80\xa6DhAdds an <code>Srgb</code> suffix to the given texture format, if the \xe2\x80\xa6CeMask of all features that are only available when \xe2\x80\xa6CnMask of all features which are part of the upstream WebGPU \xe2\x80\xa6CmReturns <code>(alpha, red, green, blue)</code> encoded as u320CfA pointer to a BDirectWindow object that might be nullChThe different options that are given to the selected \xe2\x80\xa6CeOptions the control the behavior of various backends.00CjThe number of bytes one texel block occupies during an \xe2\x80\xa6C`Compile a .slint file into a ComponentDefinitionAeCompile a .slint fileCgReturns the names of the components that were compiled.CjIf the depth aspect of the depth stencil attachment is \xe2\x80\xa60CjThe physical device features to enable. You may enable \xe2\x80\xa6fSafetyCeRelinquish an acquired texture without presenting it.DgDynamic offsets consumed by [<code>SetBindGroup</code>] commands in \xe2\x80\xa60CiSelects how the resources such as images and font are \xe2\x80\xa6AlEnd the current render pass.CkExecute a render bundle, which is a set of pre-recorded \xe2\x80\xa6CmAdds a value with a check for uniqueness, where the check \xe2\x80\xa6CeReturn an iterator over the individual components \xe2\x80\xa6CmThreshold at which devices will become lost due to memory \xe2\x80\xa600DhReturn a <code>ConstantEvaluator</code> that will add expressions to \xe2\x80\xa60BiForces the the expression to not be constCiDrops the lifetime relationship to the parent command \xe2\x80\xa60CnGenerates a set of backends from a comma separated list of \xe2\x80\xa6ClConvert from a sentinel word in WGSL into its associated \xe2\x80\xa60AhGenerates memory report.CnInclude the code generated with the slint-build crate from \xe2\x80\xa6?CaLocal variables defined and used in the function.0ClAmount of bind groups that can be attached to a pipeline \xe2\x80\xa60ClA limit above which buffer allocations are guaranteed to \xe2\x80\xa60CiReturns the mip_level_count of this <code>Texture</code>.CkMip count of texture. For a texture with no extra mips, \xe2\x80\xa6EeMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> \xe2\x80\xa601010CnReturns true if the stencil state uses the reference value \xe2\x80\xa6CkReturns true if the face state uses the reference value \xe2\x80\xa6CkReturns true if the comparison depends on the reference \xe2\x80\xa6EbReturn a range enclosing handles <code>first</code> through <code>last</code>, \xe2\x80\xa6ClReturns all the types which we need out-of-bounds locals \xe2\x80\xa6C`Stops command recording and creates debug group.00AcPop an error scope.CgSchedules the main event loop for termination. This \xe2\x80\xa6AeExits the event loop.1DhReturn the <code>TypeLoader</code> used when parsing the code in the \xe2\x80\xa6CmRetrieves an <code>Adapter</code> which matches the given \xe2\x80\xa6CnAdds the requirement to the selector that the backend must \xe2\x80\xa60ChSpecifies the limits that are required by the device \xe2\x80\xa600CgThe number of bytes in the last row of the copy region.0CgSets the callback that will be invoked when loading \xe2\x80\xa60BbWhich DX12 shader compiler to use.00CkLocation for this input. Must match the location in the \xe2\x80\xa60CeMapping between texture names and variables/samplers.CkIf set to true, the polygon depth is not clipped to 0-1 \xe2\x80\xa60CiModify the current limits to use the buffer alignment \xe2\x80\xa6BmCreate a <code>Value</code> from a JSON ValueClHelper function that returns the string corresponding to \xe2\x80\xa6CmIssue a timestamp command at this point in the queue. The \xe2\x80\xa600CnAllow the acceleration structure to be compacted in a copy \xe2\x80\xa6ClDescribes an allocation in the <code>AllocatorReport</code>.Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa600000CaError occurred when trying to async map a buffer.B`Describes a <code>Buffer</code>.0BdA buffer transition for use with \xe2\x80\xa60CmClamp <code>BuiltIn::FragDepth</code> output between 0 and 1.CaFormat can be used as color and input attachment.AjCull back facing geometry.BoDescribes the color state of a render pipeline.0ClError encountered when performing a compute pass, stored \xe2\x80\xa6AlSupports depth bias clampingCjThis is the default clipboard used for text action for \xe2\x80\xa6CmA texture that has been marked as destroyed and is staged \xe2\x80\xa6B`Describes a <code>Device</code>.0CbCorresponds to a <code>GPUDeviceLostReason</code>.0CnA filtering rule that modifies how diagnostics are emitted \xe2\x80\xa6CoArgument buffer layout for <code>draw_indirect</code> commands.0CkRaw display handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6BjSupport for <code>early_depth_test</code>.DkAllows for the creation and usage of <code>ExternalTexture</code>s, and \xe2\x80\xa60CkConvenience alias for the event loop builder used by Slint.DjEmit <code>PointSize</code> output builtin to vertex shaders, which is \xe2\x80\xa60BmSupports storage buffers in fragment shaders.AdA function argument.BmReference a function parameter, by its index.10CkA local variable used by ReadZeroSkipWrite bounds-check \xe2\x80\xa6ChRaw display handle for the Linux Generic Buffer Manager.CnError returned by <code>ComponentInstance::get_property</code>BnConfiguration for the OpenGL/OpenGLES backend.00CiA display that acts as a wrapper around a display handle.BaImage load and early depth tests.CfAll internal counters, exposed for debugging purposes.0AnA key press was auto-repeated.CeThe language was not found. The list of available \xe2\x80\xa6ChDescribes the multi-sampling state of a render pipeline.0n1.0 - Constant0m1.0 - D.alpha0m1.0 - S.alpha0CnA position represented in the coordinate space of physical \xe2\x80\xa60CiAll information to bind a single uniform value to the \xe2\x80\xa6CjA display server handle for a particular windowing system.EhAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>\xe2\x80\xa60jSample ID.A`shuffle up, downBjAllows shaders to use the subgroup barrier0AnSupport for subgroup barriers.CnError returned by <code>ComponentInstance::set_callback</code>CdThere is already a platform set from another thread.CnThis enum describes the different error scenarios that may \xe2\x80\xa611CnError returned by <code>ComponentInstance::set_property</code>BlA Renderer that do the rendering in softwareBmDescribes stencil state in a render pipeline.0BjOperation to perform on the stencil value.0BiComponent selection for a vector swizzle.0CbOrder in which texture data is laid out in memory.0AlDimensionality of a texture.0CnAdds extra conversion functions to <code>TextureFormat</code>.BjBinding is backed by an array of textures.l[0, 0, 0, 0]0AoRaw display handle for the Web.CgThis struct contains getters that provide access to \xe2\x80\xa6AkRaw display handle for Xcb.AkRaw window handle for Xlib.BhRe-export of the android-activity crate.CjMust be at least 1. If this is not 1, all filter modes \xe2\x80\xa600CjSet of shader stages where calling this function is valid.AaBase array layer.000BkReturns the dimension of a block of texels.CbThe size of a single texture texel block in bytes.0Cd<code>op.callback</code> is guaranteed to be called.CnWrapper to unsafely define a wrapper type that can be used \xe2\x80\xa6CmCreates a new SharedPixelBuffer by cloning and converting \xe2\x80\xa60BdCreates a new <code>QuerySet</code>.CcCreate a validator with the given validation flags.BlDiscard the command list under construction.BeEarly depth test for fragment stages.0AmEnd the current compute pass.DkThis module contains the <code>femtovg_renderer::FemtoVGRenderer</code> \xe2\x80\xa6BbConvert from a bits value exactly.0DiTakes in <code>FeatureBits</code> and returns Self with all bits that \xe2\x80\xa611111111111111111111111111111111111111DmConstruct a <code>Range</code> that covers the indices in <code>inner</code>.fSafetyCnReturns the capabilities of the surface when used with the \xe2\x80\xa6DcGain read-only access to the bytes of a mapped <code>Buffer</code>.0CkReturns the address of the OpenGL function specified by \xe2\x80\xa6ClUse this function pointer to obtain access to the OpenGL \xe2\x80\xa60CnList of publicly declared callbacks in the exported global \xe2\x80\xa6CnList of publicly declared functions in the exported global \xe2\x80\xa6CfArena for the global variables defined in this module.0CjReturns <code>true</code> if the format has a color aspectCjReturns <code>true</code> if the format has a depth aspectDhReturns true if a <code>winit::window::Window</code> exists for this \xe2\x80\xa6CfThe number of rows in a densely packed list of images.0BjReturn the length of a subscriptable type.BmReturns true if the depth testing is enabled.BoReturn true if this expression is a dynamic \xe2\x80\xa6CjReturns if the given range represents a full resource, \xe2\x80\xa6DeMap <code>view_formats</code> of the texture descriptor into another.BlMaximum shader model the given dll supports.00DjThe minimum size for a <code>BufferBinding</code> matching this entry, \xe2\x80\xa60BaPoll all devices on all backends.CnThe power preference is used to influence the WGPU adapter \xe2\x80\xa6BaPower preference for the adapter.000CkStart record commands and group it into debug marker group.00AdPush an error scope.BfType for <code>RayIntersection</code>.0BcConvenience function that calls \xe2\x80\xa6CjThe stride in bytes between the start of one row in an \xe2\x80\xa60DgWrapper around <code>i_slint_core::tests::slint_send_mouse_click</code>AmSets the active index buffer.00ClSets the scissor rectangle used during the rasterization \xe2\x80\xa6EhThis is equivalent to <code>core::assert_eq</code> if the <code>strict_asserts</code>\xe2\x80\xa6EhThis is equivalent to <code>core::assert_ne</code> if the <code>strict_asserts</code>\xe2\x80\xa6fSafety0CkDefines which timestamp values will be written for this \xe2\x80\xa60CkDefines where and when timestamp values will be written \xe2\x80\xa60ChConverts the given value to a <code>SharedString</code>.ChTransform buffer containing 3x4 (rows x columns, row \xe2\x80\xa6CmModify the current limits to use the resolution limits of \xe2\x80\xa6ClRe-implement this to support exposing raw window handles \xe2\x80\xa6EgWrite the <code>TypeInner</code> <code>inner</code> as it would appear in a value\xe2\x80\x99\xe2\x80\xa6ChThe total size of the copy overflows a <code>u64</code>.CcHow should code generated by Naga do bounds checks?0BbSpecific type of a buffer binding.0CnThe set of types with a fixed size at shader-creation time \xe2\x80\xa6AkCull front facing geometry.AkThe result of a compilationDbComponentCompiler is deprecated, use <code>Compiler</code> insteadCbThis represents an instance of a dynamic componentCbEnables adjusting depth without disabling early Z.0BnA context for evaluating constant expressions.CgDescribes the depth/stencil state in a render pipeline.0C`Hint at which precision to compute a derivative.0ChA wrapper for displaying Naga IR terms in diagnostic \xe2\x80\xa6CiErrors related to the state of a command or pass encoder.Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60CcSelects which OpenGL ES 3 minor version to request.00AlRaw window handle for Haiku.CiSupports different blend operations per color attachment.CnA timestamp that is invalid due to the platform not having \xe2\x80\xa6CdA language extension recognized by Naga, but not \xe2\x80\xa6CkThis struct describes layout constraints of a resizable \xe2\x80\xa6CmDescribes a memory block in the <code>AllocatorReport</code>.BmBindTarget for dynamic storage buffer offsetsBcRaw display handle for OpenHarmony.n1.0 - S1.alpha0ClAllows the user to set <code>PolygonMode::Line</code> in \xe2\x80\xa60ClOptimize for fast build time, recommended if geometry is \xe2\x80\xa6CmOptimize for fast ray tracing performance, recommended if \xe2\x80\xa6CmSpecifies the values of pipeline-overridable constants in \xe2\x80\xa6BmPrimitive type the input mesh is composed of.0BhDescribes a programmable pipeline stage.CjA range of push constant memory to pass to a shader stage.0CkAllows a texture to be an output attachment of a render \xe2\x80\xa6CfAllow access to the hal resource as guarded by the \xe2\x80\xa6CkOut-of-bounds reads return zero, and writes have no effect.0CkError encountered when finishing recording a render bundle.CnThis enum describes the rotation that should be applied to \xe2\x80\xa6CjThe window will be destroyed and/or graphics resources \xe2\x80\xa60CkThis enum describes which parts of the buffer passed to \xe2\x80\xa6ClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6CdA read-only storage buffer used in a bind group. \xe2\x80\xa6ClRead-only storage texture usage. Corresponds to a UAV in \xe2\x80\xa6CdFormat can be used as storage with read-only access.BaDescribes a <code>Sampler</code>.B`Describes a <code>Sampler</code>1CnSharedPixelBuffer is a container for storing image data as \xe2\x80\xa60Akmin(S.alpha, 1.0 - D.alpha)0BaDescribes a <code>Texture</code>.0BoSpecific type of a sample in a texture binding.0BeA texture transition for use with \xe2\x80\xa60AlA Vulkan timeline semaphore.AlRaw window handle for UIKit.CaA scalar with an unsupported width was requested.ClThis enum describes the different ways to configure WGPU \xe2\x80\xa6AlRaw window handle for Win32.AlRaw window handle for WinRT.AlRaw display handle for Xlib.CmReturn the WGSL address space and access mode strings for \xe2\x80\xa6EhLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must \xe2\x80\xa60BcReturns the number of array layers.11BmReturn the binding view of the entire buffer.BbBegins recording of a render pass.CfBegin a new render pass, clearing all active bindings.CdReturns the size of the bounding box of this region.CmThe alignment of the row pitch of the texture data stored \xe2\x80\xa6CcCompile some .slint code into a ComponentDefinitionAhCompile some .slint codeCjThe DOM element id of the HTML Canvas element used for \xe2\x80\xa60BiThe color attachments of the render pass.0BeCreates a new <code>BindGroup</code>.Cl<code>DiagnosticFilter</code>s and supporting functionality.CmRe-implement this to support exposing raw display handles \xe2\x80\xa6BnFind the position of the <code>element</code>.CkReturn the positions of all instances of a specific elementBaMapping of the entry point names.CbAppends all the elements in the slice to the modelDhReturn a <code>ConstantEvaluator</code> that will add expressions to \xe2\x80\xa60DdConstruct a color from an integer encoded as <code>0xAARRGGBB</code>0BjInfer decent defaults from the build type.fSafetyChList of publicly declared properties in the exported \xe2\x80\xa6CgThe number of bytes in a densely packed list of images.0CmThe stride in rows between the start of one image and the \xe2\x80\xa60CjMacro to load raw SPIR-V data statically, for use with \xe2\x80\xa6DdInitialize translations when using the <code>gettext</code> feature.ClMaximal number of invocations in a subgroup. Lower is \xe2\x80\x9c\xe2\x80\xa60CmMinimal number of invocations in a subgroup. Higher is \xe2\x80\x9c\xe2\x80\xa60CfMap of expressions that have associated variable names00CmIf <code>self</code> is a pointer type, return its base type.ChTypes for predeclared wgsl types instantiated on demand.0AoPrint the diagnostics to stderr0CnThis function is for use the application\xe2\x80\x99s build script, \xe2\x80\xa6DeCompact <code>module</code> and replace all overrides with constants.CjRaw display handle, underlying window must outlive the \xe2\x80\xa6BfType for <code>RayVertexReturn</code>.0CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CnReturns the required features (if any) in order to use the \xe2\x80\xa6CjSpecifies the features that are required by the device \xe2\x80\xa600CfResolves a query set, writing the results into the \xe2\x80\xa6CgThis is a hint that we need to restrict indexing of \xe2\x80\xa6ChShould we restrict indexing of vectors, matrices and \xe2\x80\xa6DjSets the include paths used for looking up <code>.slint</code> imports \xe2\x80\xa60DdSets the library paths used for looking up <code>@library</code> \xe2\x80\xa60BaAssign a vertex buffer to a slot.00AiSlint interpreter libraryDfThis module contains the <code>SoftwareRenderer</code> and related \xe2\x80\xa6ClIf the stencil aspect of the depth stencil attachment is \xe2\x80\xa60DcFinds the <code>StorageFormat</code> corresponding to the given \xe2\x80\xa6ClMacro to produce an array of [<code>VertexAttribute</code>].CjDetermine the classification of this error as a WebGPU \xe2\x80\xa6EbSets the scale factor to be applied to all <code>px</code> to <code>phx</code> \xe2\x80\xa6CjInvokes the specified callback with a reference to the \xe2\x80\xa6CkPrepares to write data to a buffer via a mapped staging \xe2\x80\xa6DjA guard containing a lock to an <code>AdapterContext</code>, while the \xe2\x80\xa6AmRaw window handle for AppKit.DcAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on \xe2\x80\xa60CeA single message from the shader compilation process.CmSpecifies how the alpha channel of the textures should be \xe2\x80\xa60De<code>Instance::create_surface()</code> or a related function failed.CeBy default, polygon depth is clipped to 0-1 range \xe2\x80\xa60AnRead-only depth stencil usage.B`Don\xe2\x80\x99t pass labels to wgpu-hal.AmArrays with a dynamic length.BcConfiguration for the DX12 backend.00CdHow should the slint compiler embed images and fontsBdThe entry point couldn\xe2\x80\x99t be found.CeEntry point version of <code>FunctionOobLocal</code>.Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60ClAllows textures with formats \xe2\x80\x9cr32float\xe2\x80\x9d, \xe2\x80\x9crg32float\xe2\x80\xa60AcMore image formats.CkA fragment entry point to be considered when generating \xe2\x80\xa6AmRaw display handle for Haiku.BmWindow that wraps around a raw window handle.BjSupports indirect drawing and dispatching.CfThe last-layer byte size overflows a <code>u64</code>.BaOptions for creating an instance.00DbThe <code>bytes_per_row</code> is too small for the texture width.CiThis trait defines a bi-directional interface between \xe2\x80\xa6BcConfiguration for the noop backend.00CmAllows the user to set <code>PolygonMode::Point</code> in \xe2\x80\xa60CkQuery returns up to 5 64-bit numbers based on the given \xe2\x80\xa60ClThis enum describes the different types of buttons for a \xe2\x80\xa6BbDescribes a <code>QuerySet</code>.C`Describes how to create a <code>QuerySet</code>.CiBuilt-in shader function for testing relation between \xe2\x80\xa60CmError encountered when encoding a render command. This is \xe2\x80\xa6ChRequesting a device from an <code>Adapter</code> failed.BoError when requesting a device from the adapterClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6CiA read-write buffer used in a bind group. cbindgen:ignoreCaRead-write storage texture usage. cbindgen:ignoreCjFormat can be used as storage with both read and write \xe2\x80\xa63CaWrite-only storage texture usage. cbindgen:ignoreCeFormat can be used as storage with write-only access.BcSpecific type of a sampler binding.0CjColor variation to use when sampler addressing mode is \xe2\x80\xa60ClThe window\xe2\x80\x99s scale factor has changed. This can happen \xe2\x80\xa6ClThis is the clipboard that is used when text is selected \xe2\x80\xa6CdSample specific LODs of cube / array shadow texturesCiSupports GL_EXT_texture_shadow_lod on the host, which \xe2\x80\xa6CjThis enum describes the possible errors that can occur \xe2\x80\xa6AjTriangle geometry variant.AdTriangle geometries.AmRaw display handle for UIKit.ChSpecifies an interpretation of the bytes of a vertex \xe2\x80\xa6BoDescribes how the vertex buffer is interpreted.0CmA raw window handle for a Web offscreen canvas registered \xe2\x80\xa6DeDetermine whether <code>index</code> is statically known to be in \xe2\x80\xa6CbEnable advanced debugging and validation flags \xe2\x80\xa6BcBegins recording of a compute pass.CgBegin a new compute pass, clearing all active bindings.CmBind groups that this pipeline uses. The first entry will \xe2\x80\xa600CnIf the binding is an unsized binding array, this overrides \xe2\x80\xa60ChThe number of texel in a texel block in the x direction.0CjThe alignment of the start of the buffer used as a GPU \xe2\x80\xa6CgSurface that is required to be presentable with the \xe2\x80\xa6000BlCreates a Buffer with data to initialize it.CjReturn the instance extension names wgpu would like to \xe2\x80\xa6ChArena for all diagnostic filter rules parsed in this \xe2\x80\xa60Cg<code>Display</code> this rule\xe2\x80\x99s identifiers in WGSL.CmThese default limits are guaranteed to be compatible with \xe2\x80\xa6DfRetrieves all available <code>Adapter</code>s that match the given \xe2\x80\xa6Dh<code>surface_hint</code> is only used by the GLES backend targeting \xe2\x80\xa6CnAdds a value with a custom check for uniqueness: returns a \xe2\x80\xa6CfConvert from a bits value, unsetting any unknown bits.0DkTakes in <code>FeatureBits</code> and returns Self with only valid bits \xe2\x80\xa611111111111111111111111111111111111111DeReturn a default <code>SurfaceConfiguration</code> from width and \xe2\x80\xa6ChWhich OpenGL ES 3 minor version to request, if using \xe2\x80\xa600CnConstant expressions and override expressions used by this \xe2\x80\xa60ChReturns true for buffer bindings with dynamic offset \xe2\x80\xa6C`Indicates that the binding has a dynamic offset.0ClReturns <code>true</code> if the format has a stencil aspectAmThe horizontal column stretchCnThe stride in bytes between the start of one image and the \xe2\x80\xa60Dg<code>Instance::init</code> but with a callback. If you want to add \xe2\x80\xa6ChReturns true if the state doesn\xe2\x80\x99t mutate the depth \xe2\x80\xa6BlReturns the layout constraints of the windowChCreates a new Image from the specified buffer, which \xe2\x80\xa60CkAllows a buffer to be mapped immediately after they are \xe2\x80\xa600DgMaximum length of <code>VertexState::buffers</code> when creating a \xe2\x80\xa60BaNumber of gpu memory allocations.0BkA child expression with non-uniform result.ChThis function allows registering a callback that\xe2\x80\x99s \xe2\x80\xa60gSafety:CdReturn the global variable being accessed by the \xe2\x80\xa6CfControls whether the parser should parse doc comments.DeA recommended key for storing <code>PipelineCache</code>s for the \xe2\x80\xa6CgData used by <code>SetPushConstant</code> instructions.0CiThe queue create infos for the device. You may add or \xe2\x80\xa6CmReturns the queue family index of the device\xe2\x80\x99s internal \xe2\x80\xa6CkRaw display handle, underlying display must outlive the \xe2\x80\xa6DbStrips the <code>Srgb</code> suffix from the given texture format.BdReturn the current rotation. See \xe2\x80\xa6AbWrapper around \xe2\x80\xa6CkSets the blend color as used by some of the blending modes.BoSends the given text into the system clipboard.CeSet push constant data for subsequent dispatch calls.AgSet push constant data.CaSet push constant data for subsequent draw calls.De<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the \xe2\x80\xa6BcSets a range in push constant data.CkWhen drawing strip topologies with indices, this is the \xe2\x80\xa60ChReturns the WGPU 25.x texture that this image wraps; \xe2\x80\xa60BeDispatch a window event to the scene.0DiA pointer to an <code>UIViewController</code> object, if the view has \xe2\x80\xa6CmCreate a new configuration that includes sets the include \xe2\x80\xa6CjCreate a new configuration that sets the library paths \xe2\x80\xa6AnRaw display handle for AppKit.CiDescribes a group of bindings and the resources to be \xe2\x80\xa60AeBindGroup descriptor.CdPolicies for injecting bounds checks during code \xe2\x80\xa60ClAmount of times the clipper is invoked. This is also the \xe2\x80\xa6AmSupports comparison samplers.BgSupports textures that are cube arrays.BbSupport for arrayed cube textures.CiComponentDefinition is a representation of a compiled \xe2\x80\xa6CiConfirm a triangle intersection to be included in the \xe2\x80\xa60AnRead-write depth stencil usageCmSpecial depth/stencil format with at least 24 bit integer \xe2\x80\xa60Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60CjThe event could not be sent because the event loop was \xe2\x80\xa60BoDisplay that wraps around a raw display handle.BnThe image stride overflows a <code>u64</code>.DdThe <code>rows_per_image</code> is too small for the texture height.ClAllows a texture of this format to back a view passed as \xe2\x80\xa6CcFormat can be used for render pass resolve targets.DhAllows the user to call <code>RenderPass::multi_draw_indirect</code> \xe2\x80\xa60AmExpressions that need baking.CbThe Slint Platform does not provide an event loop.CjThe event could not be sent because the Slint platform \xe2\x80\xa6110AoRaw window handle for Ohos NDK.CaRaw window handle for the Redox operating system.ClDescribes the writing of timestamp values in a render or \xe2\x80\xa6AoPipeline layout creation flags.BmThe intersection test to use for ray queries.CiEncodes a series of GPU operations into a reusable \xe2\x80\x9c\xe2\x80\xa6CjError when <code>Instance::request_adapter()</code> fails.0ocbindgen:ignoreAcSubgroup operationsCfDescribes how shader bound checks should be performed.0ChDefines the capabilities of a given surface and adapter.CoDescribes information about what a <code>Surface</code>\xe2\x80\x99s \xe2\x80\xa61CjThe window/canvas/surface/swap-chain/etc. a surface is \xe2\x80\xa6BmAllows for creation of textures of format \xe2\x80\xa60ChView of a buffer which can be used to copy to/from a \xe2\x80\xa60BkA call was made to an unsupported external.CeThe specified <code>Version</code> isn\xe2\x80\x99t supported.AnRaw window handle for Wayland.BiThe Window was activated or de-activated.CiThis helper trait can be used to obtain access to the \xe2\x80\xa6ChThe number of texel in a texel block in the y direction.0CfReturns the origin of the bounding box of this region.CjNumber of user-defined clip planes. Only applicable to \xe2\x80\xa6CcAdvanced options for when this pipeline is compiled00DcSame as <code>compile</code>, but allow to specify a configuration.CmFind all positions of the components which are pointed by \xe2\x80\xa6DeAssign <code>id_in</code> an error with the given <code>label</code>.DgHelper function to construct a <code>DynamicDxc</code> variant with \xe2\x80\xa6BjIf disabled, depth will not be written to.0fSafetyB`The memory hints for the device.BcDispatches compute work operations.CjEnd the occlusion query on this render pass. It can be \xe2\x80\xa6CnIndicate that CPU writes to mapped buffer memory should be \xe2\x80\xa6ClIf false, the caller MUST ensure that all passed shaders \xe2\x80\xa6ClIf set, loops will have code injected into them, forcing \xe2\x80\xa601CeChoose instance options entirely from environment \xe2\x80\xa6CcDerive defaults from environment variables. See \xe2\x80\xa6DgChoose backend options by calling <code>from_env</code> on every field.DkChoose OpenGL backend options by calling <code>from_env</code> on every \xe2\x80\xa6DiChoose DX12 backend options by calling <code>from_env</code> on every \xe2\x80\xa6CgChoose whether the noop backend is enabled from the \xe2\x80\xa6CjCombines the features from the internal flags into the \xe2\x80\xa6DcFinds the <code>TextureFormat</code> corresponding to the given \xe2\x80\xa6CmReturns the next texture to be presented by the swapchain \xe2\x80\xa6CmReturn the value for a property within an exported global \xe2\x80\xa6Anforward to get_global_propertyAeInserts debug marker.00ChFor each public function declared at the root of the \xe2\x80\xa6CkReturns true if the underlying platform offers complete \xe2\x80\xa6CiDispatches multiple draw calls from the active vertex \xe2\x80\xa6ClDefines where the occlusion query results will be stored \xe2\x80\xa60CkSet a callback for errors that are not handled in error \xe2\x80\xa6BeThe premultiplication of this texture00BjList of push constant items in the shader.CfReturns the kind of buffer that must be passed to  \xe2\x80\xa6CjBind target of the sampler heap and comparison sampler \xe2\x80\xa6CiSet a handler for the callback in the exported global \xe2\x80\xa6AnForward to set_global_callbackCjSet the value for a property within an exported global \xe2\x80\xa6Anforward to set_global_propertyfSafetyCbTry to evaluate <code>expr</code> at compile time.BnCreate a <code>Value</code> from a JSON stringAoRaw display handle for Android.CgAllows the user to create arrays of buffers in shaders:0BoDescribes a single binding inside a bind group.0AoPipeline layout creation flags.CiDefinition for a triangle geometry for a Bottom Level \xe2\x80\xa6BcDescribes a Buffer when allocating.CiThis enum describes whether a Window is allowed to be \xe2\x80\xa60CbThe mutable state of a <code>CommandBuffer</code>.CjDescriptor to create bottom level acceleration structures.CgDescriptor for creating a bottom level acceleration \xe2\x80\xa6CiCallback to allow changing the vulkan device creation \xe2\x80\xa6CgDescriptor to create top level acceleration structures.CkDescriptor for creating a top level acceleration structure.CmAllows two outputs from a shader to be used for blending. \xe2\x80\xa60ChSupport for generating two sources for blending from \xe2\x80\xa6AdDual source blendingCkSpecial depth/stencil format with 32 bit floating point \xe2\x80\xa60ChRepresents a single parent-linking node in a tree of \xe2\x80\xa6DcArgument buffer layout for <code>dispatch_indirect</code> commands.0DgEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. \xe2\x80\xa6ClAdd a candidate generated intersection to be included in \xe2\x80\xa60CmInclude unused global variables, constants and functions. \xe2\x80\xa6DkMaximum binding size for the shaders that only support <code>i32</code> \xe2\x80\xa6AmSupports sample-rate shading.E`Support for <code>BuiltIn::SampleIndex</code> and <code>Sampling::Sample</code>.CbRaw display handle for the Redox operating system.BbColor spaces supported on the web.0BhA write-only view into a staging buffer.CeType of a ray query intersection. Matching vulkan \xe2\x80\xa60BkDescribes the attachments of a render pass.0C`Error encountered when performing a render pass.CkSupports specifying which view formats are allowed when \xe2\x80\xa6CbRepresents an item in a StandardListView and a \xe2\x80\xa6BoSpecific type of a sample in a texture binding.0CbResult of a <code>SubgroupBallot</code> statement.0AmSupported subgroup operationsBaDescribes a <code>Surface</code>.CcConfigures a <code>Surface</code> for presentation.BiEnables R64Uint image atomic min and max.0BoSupport for atomic operations on 64-bit images.CiView of a texture which can be used to copy to/from a \xe2\x80\xa60BhDimensions of a particular texture view.0AoRaw display handle for Wayland.AiWGSL language extensions.AoRaw display handle for Windows.CjLoad uniformly from a uniform pointer in the workgroup \xe2\x80\xa60EhAdd the members of <code>self</code> into <code>info.enabled_features</code> and its \xe2\x80\xa6ClHelper function that returns the string corresponding to \xe2\x80\xa6CgAssert that <code>range</code> is valid for this arena.DeReturn true if the fragment <code>format</code> is covered by the \xe2\x80\xa6AgAlpha composition mode.AhCreates a shader module.DeAssign <code>id_in</code> an error with the given <code>label</code>.CjIndicates that the function is using dual source blending.CnReturns the current time as a monotonic duration since the \xe2\x80\xa6ClEnsure that the given block has return statements at the \xe2\x80\xa6CkBuild a set of expressions used as indices, to cache in \xe2\x80\xa6BoGet the compilation info for the shader module.CoGain write access to the bytes of a mapped <code>Buffer</code>.0CkGets the amount of nanoseconds each tick of a timestamp \xe2\x80\xa6DaGet\xe2\x80\x99s the <code>glow::Context</code> without waiting for a lockCgReturns true if the state doesn\xe2\x80\x99t mutate the stencil.CjReturns whether this adapter may present to the passed \xe2\x80\xa6DkReturn an <code>EventLoopProxy</code> that can be used to send event to \xe2\x80\xa6ChSet of push constant ranges this pipeline uses. Each \xe2\x80\xa600CiChecks whether this BLAS is ready for compaction. The \xe2\x80\xa6BgSets the nine-slice edges of the image.0ChReturns the capabilities of working with a specified \xe2\x80\xa6DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60BgBitwise xor - <code>self ^ other</code>11111111111111111111111111111111111111CmSum of the memory reserved by all memory blocks including \xe2\x80\xa60CiTransition resources to an underlying hal resource state.CcWrite the <code>Value</code> out into a JSON stringDeWrite a <code>TypeInner</code> that has no representation as WGSL \xe2\x80\xa6DjWrite a <code>TypeInner::Struct</code> for which we are unable to find \xe2\x80\xa6CnSupports samplers with anisotropic filtering. Note this isn\xe2\x80\xa6CgBinding is backed by a top level acceleration structureBmA ray-tracing acceleration structure binding.CkOpaque object representing an acceleration structure of \xe2\x80\xa601ChInformation about a copy between a buffer and a texture.0CmBuffer to buffer copy as well as buffer clear offsets and \xe2\x80\xa60ClThe structure for configuring aspects of the compilation \xe2\x80\xa6BlDescribes the attachments of a compute pass.CaError encountered when performing a compute pass.BcContext version see BlasBuildEntry.BbContext version of BlasGeometries.CfAllows for explicit creation of textures of format \xe2\x80\xa60CgLists various ways the underlying platform does not \xe2\x80\xa60DiArgument to filter the elements in the <code>element_positions</code> \xe2\x80\xa6EdD3D12: Add support for <code>first_vertex</code> and <code>first_instance</code> \xe2\x80\xa6CjA image was used with multiple samplers, which isn\xe2\x80\x99t \xe2\x80\xa6BaSubresource range within an image0CnThis is a minimal adapter for a Window that doesn\xe2\x80\x99t have \xe2\x80\xa6Dj<code>AddressSpace::PushConstant</code> was used more than once in the \xe2\x80\xa6BmThere are no bundled translations. Either \xe2\x80\xa6CeNanosecond timestamp used by the presentation engine.0nQuad supportedCeMaximum queries in a <code>QuerySetDescriptor</code>.0DaResult of a <code>Proceed</code> <code>RayQuery</code> statement.0CkAdditional information required when requesting an adapter.AoOptions for requesting adapter.ocbindgen:ignoreCcOnly generate SPIR-V for one entry point at a time.CkAllows shaders to use f32 atomic load, store, add, sub, \xe2\x80\xa60EgSupport for <code>AtomicFunction::Add</code>, <code>AtomicFunction::Sub</code>, and \xe2\x80\xa6CdSupport for subgroup operations in the vertex stage.C`List of supported <code>es</code> GLSL versions.CkAllows the user to create uniform arrays of textures in \xe2\x80\xa60BkLayout of a texture in a buffer\xe2\x80\x99s memory.0DjA builder for the <code>TextureBlitter</code> utility. If you want the \xe2\x80\xa6BlFeatures supported by a given texture format0BeDescribes a <code>TextureView</code>.0AgTextureView descriptor.1CeRaw window handle for a Web canvas registered via \xe2\x80\xa6CjStart a occlusion query on this render pass. It can be \xe2\x80\xa6CmHow should generate code handle array, vector, matrix, or \xe2\x80\xa6ChAssert that <code>handle</code> is valid for this arena.0BjList of supported alpha composition modes.BkComputes the render extent of this texture.BeCopy data from one buffer to another.CeCreate a <code>PipelineCache</code> with initial datafSafetyBkCreates a new surface targeting a given \xe2\x80\xa6BeInstantiate a window for a component.CnReturns the depth or layer count of this <code>Texture</code>.BgThe depth of the copy region in pixels.CeThe depth of the extent or the number of array layers10CnDraws indexed primitives using the active index buffer and \xe2\x80\xa600CkDon\xe2\x80\x99t panic on missing bindings, instead generate any \xe2\x80\xa6CeThreshold at which texture, buffer, query set and \xe2\x80\xa600CiGet an object representing the bind group layout at a \xe2\x80\xa60CjReturn the set of capabilities the last module written \xe2\x80\xa6CgQuery internal counters from the native backend for \xe2\x80\xa6CmReturns true if there is an animation currently active on \xe2\x80\xa60C`The maximum allowed number of color attachments.0DiMaximum length of <code>VertexBufferLayout::attributes</code>, summed \xe2\x80\xa60BfRange for the number of queued frames.BoMaximum number of queued frames. Must be in \xe2\x80\xa6DcCompare value type <code>self</code> and <code>rhs</code> as types.CkRegisters a window event filter callback for this Slint \xe2\x80\xa6BgBind target of the push constant bufferCmSet the present timing information which will be used for \xe2\x80\xa6AkSets the stencil reference.CdSum of the memory used by all allocations, in bytes.0DkConvenience function that combines <code>invoke_from_event_loop()</code>\xe2\x80\xa60DjWrite a <code>Scalar</code> that has no representation as WGSL source, \xe2\x80\xa6DmWrite the <code>TypeResolution</code> <code>resolution</code> as a WGSL type.BbRaw window handle for Android NDK.ClAmount of primitives that are not culled by the clipper. \xe2\x80\xa6CiFormat can be used as color (with blending) and input \xe2\x80\xa6BbThe type of a compilation message.CkCallback to allow changing the vulkan instance creation \xe2\x80\xa6Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa60ClSupports full 32-bit range indices (2^32-1 as opposed to \xe2\x80\xa6CfNumber of implicit bind groups derived at pipeline \xe2\x80\xa6CnThis struct is used to compile and instantiate a component \xe2\x80\xa6CkEnables creating shader modules from Metal MSL computer \xe2\x80\xa60CmMemory budget thresholds used by backends to try to avoid \xe2\x80\xa600DcFeatures supported by a <code>vk::PhysicalDevice</code> and its \xe2\x80\xa6c\xe2\x80\xa6CiA color whose component have been pre-multiplied by alphaBfDescribes a <code>RenderBundle</code>.0ocbindgen:ignoreDbEnables <code>builtin(primitive_index)</code> in fragment shaders.0DbDescriptor for use with <code>Device::create_shader_module</code>.BcStop traversal after the first hit.CfEnables BCn family of compressed textures. All BCn \xe2\x80\xa60CaType for the callback of uncaptured error handlerCgKinds of expressions that require uniform control flow.CaEnables using 64-bit types for vertex attributes.0CfOn wgpu-core based backends, block until the given \xe2\x80\xa60BlDeprecated alias to <code>EventResult</code>CmThe acceleration structure within which this query should \xe2\x80\xa60CiReturns the aspect-specific format of the original formatCkReturns the number of components this format has taking \xe2\x80\xa6BeCopy data from a buffer to a texture.CjCopy from buffer to texture. Works with a single array \xe2\x80\xa6BeCopy data from a texture to a buffer.CjCopy from texture to buffer. Works with a single array \xe2\x80\xa6CeCreates a <code>Buffer</code> from a wgpu-hal Buffer.fSafetyBmCreates an empty <code>CommandEncoder</code>.BkCreate a fresh <code>CommandEncoder</code>.F`Create a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal <code>OpenDevice</code>3BfCreates a <code>PipelineLayout</code>.BfCreates a <code>RenderPipeline</code>.BcThe required limits for the device.CkThe leaf of all diagnostic filter rules tree (stored in \xe2\x80\xa6ClThe leaf of all diagnostic filter rules tree parsed from \xe2\x80\xa610CkIndicates that only a fallback adapter can be returned. \xe2\x80\xa6000DbPopulate this module\xe2\x80\x99s <code>SpecialTypes::ray_desc</code> type.CnAdds the specified function to an internal queue, notifies \xe2\x80\xa6BhInvoke the function from the event loop.1ChReturns true if the function is an entry point for a \xe2\x80\xa6D`Returns <code>true</code> if the format is a multi-planar formatClAmount of storage available for push constants in bytes. \xe2\x80\xa60CjGenerates the base configuration for a borrowed OpenGL \xe2\x80\xa6CiRegisters a callback when the previous call to submit \xe2\x80\xa6C`<code>closure</code> is guaranteed to be called.BaThe size of the raw TLAS instanceCaSample count supported by a given texture format.DcReturn the leaf scalar type of <code>self</code>, as needed for \xe2\x80\xa6ChThis function allows registering a callback that\xe2\x80\x99s \xe2\x80\xa60CdSet how the window need to be rotated in the buffer.B`The domain used for translations0CeThe number of bytes occupied per pixel in a color \xe2\x80\xa6CjReturns the pixel buffer for the Image if available in \xe2\x80\xa60CiRegister a row as a dependency to the current binding \xe2\x80\xa6CmIf the type is a Vector or a Scalar return a tuple of the \xe2\x80\xa6CeReturns set of supported WGSL language extensions \xe2\x80\xa6CbFlip output Y and extend Z from (0, 1) to (-1, 1).CkFlip Y coordinate of <code>BuiltIn::Position</code> output.BjDescribes an attachment location in words.CjUniformity of control flow for operations that require it.BgDescribes a <code>CommandBuffer</code>.0DiError type returned from <code>RenderBundleEncoder::new</code> if the \xe2\x80\xa6DgArgument buffer layout for <code>draw_indexed_indirect</code> commands.0ClD3D12: Add support for the builtins that the other flags \xe2\x80\xa6DgAllows non-zero value for the <code>first_instance</code> member in \xe2\x80\xa60BgInterpolation and auxiliary qualifiers.CnRanges of writes to push constant storage must be at least \xe2\x80\xa60CdDescribes a pipeline cache, which allows reusing \xe2\x80\xa6CiFlags for which pipeline data should be recorded in a \xe2\x80\xa60CaSupport for ray queries returning vertex positionCmSupports reading from a depth/stencil texture while using \xe2\x80\xa6CcReturn an intersection found by <code>query</code>.0DbGet the Positions of the triangle hit by the <code>RayQuery</code>0DbAllows shaders to use the <code>early_depth_test</code> attribute.0BgDon\xe2\x80\x99t execute the closest hit shader.CbList of supported <code>core</code> GLSL versions.EgResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> \xe2\x80\xa60ChView of a buffer which can be used to copy to/from a \xe2\x80\xa6CkVertex buffer strides have to be a multiple of this number.0CmEnables bindings of writable storage buffers and textures \xe2\x80\xa60BfCopy data from one texture to another.CiCopy from one texture to another. Works with a single \xe2\x80\xa6DoConverts a wgpu-hal <code>ExposedAdapter</code> to a wgpu <code>Adapter</code>.fSafetyBgCreates a <code>ComputePipeline</code>.CgCreates a new surface from the given drm configuration.0CgCreates a <code>Texture</code> from a wgpu-hal Texture.3CkThe index of the query set at which an end timestamp of \xe2\x80\xa600ClCreates a new surface targeting the given display/window \xe2\x80\xa6DhReturns <code>true</code> if the format is a depth and/or stencil formatCdReturns true if the given expression points to a \xe2\x80\xa6ChThe maximum number of geometry descriptors a BLAS is \xe2\x80\xa60CnThe maximum number of instances a TLAS is allowed to have. \xe2\x80\xa60DgReturns <code>true</code> if the blend factor references the second \xe2\x80\xa6CeChange the what kind of buffer is being passed to \xe2\x80\xa6BnA <code>Vec</code> of supported sample counts.D`Return the WGSL form of <code>self</code> as appropriate for \xe2\x80\xa6CmRegister the model as a dependency to the current binding \xe2\x80\xa6CkTransform buffer offset in bytes (optional, required if \xe2\x80\xa6BhDescribes a <code>CommandEncoder</code>.0CcArguments to the <code>CreateDeviceCallback</code>.BnUse this trait to intercept events from winit.CiFormat can be used as depth-stencil and input attachment.ChEnables mesh shaders and task shaders in mesh shader \xe2\x80\xa60CnFile names specified in .slint files will be loaded by the \xe2\x80\xa6D`A filterable triggering rule in a <code>DiagnosticFilter</code>.CnWebgpu only allows the MAP_READ and MAP_WRITE buffer usage \xe2\x80\xa60BhDescribes a <code>PipelineLayout</code>.AlDescribes a pipeline layout.BjAllows for usage of textures of format \xe2\x80\xa60CjDescribes the depth/stencil attachment for render bundles.0BgDescribes a render (graphics) pipeline.00CkEnables creating shader modules from SPIR-V binary data \xe2\x80\xa60CmEnables ASTC family of compressed textures. ASTC textures \xe2\x80\xa60CfEnables ETC family of compressed textures. All ETC \xe2\x80\xa60CiView of a texture which can be used to copy to/from a \xe2\x80\xa6CnValidate indirect buffer content prior to issuing indirect \xe2\x80\xa6BmReturn the binding view of the entire buffer.DeSimilar to <code>compile_with_config</code>, but meant to be used \xe2\x80\xa6BgCreates a <code>BindGroupLayout</code>.AlCreates a bind group layout.CjUpload an entire texture and its mipmaps from a source \xe2\x80\xa6CkThe depth and stencil attachment of the render pass, if \xe2\x80\xa60BeThe required features for the device.BiEmits a summary of the error to a string.0CnReturns which backends can be picked for the current build \xe2\x80\xa6CgCreates a new Image from the specified shared pixel \xe2\x80\xa60DiReturn the length of <code>self</code>, assuming overrides are yet to \xe2\x80\xa6ClSimilar to <code>init()</code>, which allow to listen to \xe2\x80\xa6CnIndicate that GPU writes to mapped buffer memory should be \xe2\x80\xa6ClThe maximum number of primitive (ex: triangles, aabbs) a \xe2\x80\xa60BlMaximum number of live non-sampler bindings.0DiMaximum allowed value for the <code>size.depth_or_array_layers</code> \xe2\x80\xa60DfMaximum allowed value for the <code>size.width</code> of a texture \xe2\x80\xa60EfMaximum allowed value for the <code>size.width</code> and <code>size.height</code> \xe2\x80\xa60EhMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and \xe2\x80\xa60BoMemory budget thresholds used by some backends.00DfCreate a <code>PhysicalDeviceFeatures</code> for opening a logical \xe2\x80\xa6CiAsynchronously prepares this BLAS for compaction. The \xe2\x80\xa6BhSet a DeviceLostCallback on this device.ClRe-implement this function to update the properties such \xe2\x80\xa6CiConfigures this builder to use the specified libinput \xe2\x80\xa60CbOverride expressions for workgroup size in the \xe2\x80\xa60CeWhat a copy between acceleration structures should doCbWhat type the data of an acceleration structure isBiDescribes a <code>BindGroupLayout</code>.0AkBindGroupLayout descriptor.AmDescribes a compute pipeline.00CmView of a texture which can be used to copy to a texture, \xe2\x80\xa60DdRender to a <code>glow::NativeFramebuffer</code> Useful when the \xe2\x80\xa6CmSupports binding storage buffers and textures to fragment \xe2\x80\xa6Cc<code>crate::Sampling::First</code> is unsupported.CfAlignment requirement for instance buffers used in \xe2\x80\xa6AkAllows the user to call \xe2\x80\xa60ClInstantiate a static ModelAdaptorVTable for a given type \xe2\x80\xa6DkIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>\xe2\x80\xa6CmEnables use of Pipeline Statistics Queries. These queries \xe2\x80\xa60CjDescribes a color attachment to a <code>RenderPass</code>.BnDescribes a color attachment to a render pass.C`Describes the timestamp writes of a render pass.AoOptions for requesting adapter.CnThis enum describes the different error scenarios that may \xe2\x80\xa60CiDescriptor for a shader module given by Metal MSL source.0CgEnables normalized <code>16-bit</code> texture formats.0B`Texture format capability flags.BcFeature flags for a texture format.0DeSupports buffers to combine <code>BufferUsages::INDEX</code> with \xe2\x80\xa6CnAmount of times the vertex shader is ran. Accounts for the \xe2\x80\xa6CnWhen enabled, produces another sample mask per pixel based \xe2\x80\xa60EfReturn <code>true</code> if automatic conversions will covert <code>self</code> to \xe2\x80\xa6E`Determine whether <code>self</code> automatically converts to <code>goal</code>.CjCompares every limits within self is within the limits \xe2\x80\xa6CmThese default limits are guaranteed to be compatible with \xe2\x80\xa6CnGenerate an GPU memory allocation report if the underlying \xe2\x80\xa6DiPopulate this module\xe2\x80\x99s <code>SpecialTypes::predeclared_types</code> \xe2\x80\xa6DhReturn the length of <code>self</code>, assuming overrides have been \xe2\x80\xa6CiDispatches multiple draw calls from the active vertex \xe2\x80\xa6DjSimilar to <code>run_event_loop()</code>, but this function enters the \xe2\x80\xa6CmReturns the size multiple requirement for a texture using \xe2\x80\xa6ClAdd special constants to <code>SV_VertexIndex</code> and \xe2\x80\xa6CgConfigures the compiler to bundle translations when \xe2\x80\xa6DkAllows the use of <code>AddressMode::ClampToBorder</code> with a border \xe2\x80\xa60Be<code>offset</code> - offset in bytesBdFlags for an acceleration structure.BaFlags for acceleration structuresBjErrors that can occur while populating \xe2\x80\xa6CmAmount of times a compute shader is invoked. This will be \xe2\x80\xa6AlAllows the user to set a \xe2\x80\xa60CaDescribes the timestamp writes of a compute pass.CeArguments to the <code>CreateInstanceCallback</code>.BnThe largest number that can be returned by \xe2\x80\xa6c\xe2\x80\xa6CdAdvanced options for use when a pipeline is compiledChDescriptor for a shader module given by DirectX DXIL \xe2\x80\xa60ChDescriptor for a shader module given by DirectX HLSL \xe2\x80\xa60CgAlignment requirement for transform buffers used in \xe2\x80\xa6ChResult of a <code>WorkGroupUniformLoad</code> statement.0fSafetyBbGet info about the adapter itself.CeGenerates a timestamp using the clock used by the \xe2\x80\xa6DgCreates a <code>PresentationTimestamp</code> using the adapter\xe2\x80\x99s WSI.CjReturns the format features guaranteed by the WebGPU spec.EeReturns <code>true</code> if <code>self</code> is a depth or stencil component of \xe2\x80\xa6CmMaps the label and view formats of the texture descriptor \xe2\x80\xa6ClMapping of each bind group\xe2\x80\x99s sampler index buffer to a \xe2\x80\xa6CnSelect the current translation language when using bundled \xe2\x80\xa6gSee \xe2\x80\xa6ClAllow retrieval of the vertices of the triangle hit by a \xe2\x80\xa6CmDescriptor for the size defining attributes, for a bottom \xe2\x80\xa6CfDescriptor for all size defining attributes of all \xe2\x80\xa6CjThis enum describes the origin to use when rendering a \xe2\x80\xa6BhContext version of BlasTriangleGeometry.AgUser data needed by \xe2\x80\xa6ClAmount of times the fragment shader is ran. Accounts for \xe2\x80\xa6BhDescribes a programmable pipeline stage.ocbindgen:ignoreChAllows shaders to use all i64 and u64 atomic operations.0CeSupport for all atomic operations on 64-bit integers.CeAllows shaders to use i64 and u64 atomic min and max.0EhSupport for <code>AtomicFunction::Min</code> and <code>AtomicFunction::Max</code> on \xe2\x80\xa6CfDescriptor for a shader module given by SPIR-V binary.0ClCompute a collective operation across all active threads \xe2\x80\xa60EbApply the usual default interpolation for <code>ty</code> to <code>binding</code>.CjCreate a shader module with the given <code>source</code>.CnMake sure the types for the vertex return are in the module\xe2\x80\xa6CmReturns the features supported for a given texture format \xe2\x80\xa6DeInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> \xe2\x80\xa6DjDetermines whether the [<code>Backends::BROWSER_WEBGPU</code>] backend \xe2\x80\xa6DkMaximum binding index allowed in <code>create_bind_group_layout</code>. \xe2\x80\xa60ChDispatches multiple draw calls from the active index \xe2\x80\xa6CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CjReturn the set of supported capabilities for a texture \xe2\x80\xa6CnCheck the given module to be valid, requiring overrides to \xe2\x80\xa6CcA buffer used to store the compacted size of an \xe2\x80\xa6DkAllows the use of <code>AddressMode::ClampToBorder</code> with a border \xe2\x80\xa60AoEntries for a single descriptorDgFactory to create <code>slint::Image</code> from an existing OpenGL \xe2\x80\xa6DiBuffer-to-texture copies must have <code>bytes_per_row</code> aligned \xe2\x80\xa60CmEnables creating shader modules from DirectX HLSL or DXIL \xe2\x80\xa60CiA variant of <code>LanguageExtension::Implemented</code>.CeBlend mode that does standard alpha blending with \xe2\x80\xa6BmSupport for non-uniform indexing of samplers.BoEnables ASTC HDR family of compressed textures.0ChAllows using the VK_KHR_external_memory_win32 Vulkan \xe2\x80\xa60CkAllows using the VK_GOOGLE_display_timing Vulkan extension.0EcFind the common type of <code>self</code> and <code>other</code> under WGSL\xe2\x80\x99s \xe2\x80\xa6CkGet the texture dimension required of this texture view \xe2\x80\xa6CbCreates an empty <code>RenderBundleEncoder</code>.CiCreates a shader module with flags to dictate runtime \xe2\x80\xa6fSafetyCmDispatches compute work operations, based on the contents \xe2\x80\xa6DjThe maximum value of the <code>workgroup_size</code> X dimension for a \xe2\x80\xa60DjThe maximum value of the <code>workgroup_size</code> Y dimension for a \xe2\x80\xa60DjThe maximum value of the <code>workgroup_size</code> Z dimension for a \xe2\x80\xa60AnCreate a new SoftwareRenderer.CnReturns the theoretical memory footprint of a texture with \xe2\x80\xa6CmCall this function to update and potentially activate any \xe2\x80\xa6CkAllows the user to create bind groups containing arrays \xe2\x80\xa60BmDescribes a <code>RenderBundleEncoder</code>.0DhError type returned from the <code>select_bundled_translation</code> \xe2\x80\xa6CjAllows for timestamp queries directly on command encoders.0CeAllows uniform buffers to be bound as binding arrays.0c\xe2\x80\xa6CkSupports all the texture usages described in WebGPU. If \xe2\x80\xa6CmAmount of allocated gpu memory attributed to acceleration \xe2\x80\xa60ClThe index of the query set at which a start timestamp of \xe2\x80\xa600CcBuild bottom and top level acceleration structures.ClTo get the required sizes for the buffer allocations use \xe2\x80\xa6CjDesired maximum number of frames that the presentation \xe2\x80\xa60CnEnd the pipeline statistics query on this compute pass. It \xe2\x80\xa6CmEnd the pipeline statistics query on this render pass. It \xe2\x80\xa6ChAmount of samplers visible in a single shader stage. \xe2\x80\xa60AbWrapper around \xe2\x80\xa6fSafetyClConfigures this builder to use the specified winit event \xe2\x80\xa60C`Buffer used for acceleration structure building.Be<code>offset</code> - offset in bytesDi<code>first_vertex</code> - offset in the vertex buffer (as number of \xe2\x80\xa6CmQualcomm OOMs when there are zero color attachments but a \xe2\x80\xa6CmAn offset into the query resolve buffer has to be aligned \xe2\x80\xa60CgAllows the user to create uniform arrays of storage \xe2\x80\xa60CkA variant of <code>LanguageExtension::Unimplemented</code>.CkRaw window handle for a Web offscreen canvas registered viaDbDeprecated: Use <code>create_shader_module_trusted</code> instead.Cg<code>device_lost_closure</code> might never be called.DhPopulate this module\xe2\x80\x99s <code>SpecialTypes::ray_intersection</code> \xe2\x80\xa6DhMaximum value for <code>VertexBufferLayout::array_stride</code> when \xe2\x80\xa60DdReturns a tuple of <code>crate::Literal</code>s representing the \xe2\x80\xa6CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CfStops the current capture in the attached graphics \xe2\x80\xa6BaStop a graphics debugger capture.ClThe finest alignment of bound range checking for uniform \xe2\x80\xa6BaFlags for acceleration structuresChInformation of the required size for a corresponding \xe2\x80\xa6BnUpdate mode for acceleration structure builds.0ChError encountered while attempting to do a copy on a \xe2\x80\xa6CcSupports copies between depth textures and buffers.ClNO_DUPLICATE_ANY_HIT_INVOCATION, not useful unless using \xe2\x80\xa6CjAllows for timestamp queries directly on command encoders.0CgVertex formats allowed for creating and building BLASesCnStart a pipeline statistics query on this compute pass. It \xe2\x80\xa6CmStart a pipeline statistics query on this render pass. It \xe2\x80\xa6CkMaximum size in bytes of a binding to a storage buffer. \xe2\x80\xa60CkMaximum size in bytes of a binding to a uniform buffer. \xe2\x80\xa60CcStarts a capture in the attached graphics debugger.BbStart a graphics debugger capture.DbDescribes a depth/stencil attachment to a <code>RenderPass</code>.CfDescribes a depth/stencil attachment to a render pass.ocbindgen:ignore0D`A filterable triggering rule in a <code>DiagnosticFilter</code>.CkAllows the 3d dimension for textures with BC compressed \xe2\x80\xa60CmCreates a shader module which will bypass wgpu\xe2\x80\x99s shader \xe2\x80\xa6CmReturns the duration before the next timer is expected to \xe2\x80\xa6ClCreates a new Image from an existing OpenGL texture. The \xe2\x80\xa60CgCreates a new surface from the given drm configuration.DgReturns <code>true</code> if the format is a combined depth-stencil \xe2\x80\xa6ClWhether workgroup scoped memory will be initialized with \xe2\x80\xa6CfShould workgroup variables be zero initialized (by \xe2\x80\xa60CgDictates the way workgroup variables should be zero \xe2\x80\xa6222CmEnable automatic timestamp normalization. This means that \xe2\x80\xa6;ClDescriptor for a shader module that will bypass wgpu\xe2\x80\x99s \xe2\x80\xa6AfCreates a render pass.BoMemory budget thresholds used by some backends.CnMaximum allowed number of components (scalars) of input or \xe2\x80\xa60ChDispatches multiple draw calls from the active index \xe2\x80\xa6fSafetyCkConfigures this builder to use the specified winit hook \xe2\x80\xa60CkFlags for a geometry inside a bottom level acceleration \xe2\x80\xa6BkFlags for acceleration structure geometries0CmDescriptor for the size defining attributes of a triangle \xe2\x80\xa6CkDescriptor for all size defining attributes of a single \xe2\x80\xa6BjEnables multiview in mesh shader pipelines0Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa60CfSupport for 16-bit normalized storage texture formats.CmAllows the 3d dimension for textures with ASTC compressed \xe2\x80\xa60AgCreates a compute pass.EfMark acceleration structures as being built. <em><strong>Should only</strong></em> \xe2\x80\xa6CjMaximum number of bytes used for workgroup memory in a \xe2\x80\xa60CbCreate an new instance of wgpu, but disabling [\xe2\x80\xa6CfDescribes a depth/stencil attachment to a render pass.CgSupports buffer bindings with sizes that aren\xe2\x80\x99t a \xe2\x80\xa6ClSupports textures with mipmaps which have a non power of \xe2\x80\xa6c\xe2\x80\xa6ocbindgen:ignoreDbRequired <code>BufferBindingType::Storage</code> alignment for \xe2\x80\xa60DbRequired <code>BufferBindingType::Uniform</code> alignment for \xe2\x80\xa60CeModify the current limits to use the acceleration \xe2\x80\xa6fSafetyBe<code>offset</code> - offset in bytesCnUpdates use source_acceleration_structure if present, else \xe2\x80\xa6CjWith this feature not present, there are the following \xe2\x80\xa6BfThis is the index in the buffer at \xe2\x80\xa6DdFind the <code>element</code> that was defined at the text position.BmThe maximum value for each dimension of a \xe2\x80\xa60ChAmount of storage buffers visible in a single shader \xe2\x80\xa60ChAmount of uniform buffers visible in a single shader \xe2\x80\xa60ChWhat the scratch buffer for building an acceleration \xe2\x80\xa6CjWhether wgpu should expose adapters that run on top of \xe2\x80\xa6:ClThe maximum number of bytes necessary to hold one sample \xe2\x80\xa60DcMaximum value of the product of the <code>workgroup_size</code> \xe2\x80\xa60CiAmount of sampled textures visible in a single shader \xe2\x80\xa60CiAmount of storage textures visible in a single shader \xe2\x80\xa60CmGet an ID of one of the bind group layouts. The ID adds a \xe2\x80\xa6CgDefines the range of allowed memory block sizes for \xe2\x80\xa60fSafetyCjConfigures this builder to invoke the functions on the \xe2\x80\xa60Be<code>offset</code> - offset in bytesCjBuffer used for top level acceleration structure building.53BnBind target for dynamic storage buffer offsetsDeInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> \xe2\x80\xa65BhDescriptor for creating a shader module.BfReturns the alignment required for \xe2\x80\xa67C`Enables device specific texture format features.0ClReturns the size read by an acceleration structure build \xe2\x80\xa6CdReturn the leaf scalar type of <code>pointer</code>.CgBuffer used for bottom level acceleration structure \xe2\x80\xa6CjSupport for non-uniform indexing of uniform buffer arrays.CkAllows shaders to index storage texture resource arrays \xe2\x80\xa60CkSupport for non-uniform indexing of storage texture arrays.CmAmount of individual resources within binding arrays that \xe2\x80\xa60CmAll buffers, buffer addresses and offsets will be ignored.\xe2\x80\xa6ClThe maximum number of acceleration structures allowed to \xe2\x80\xa60C`Allows usage of additional vertex formats in \xe2\x80\xa60Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa60CnAmount of storage buffer bindings that can be dynamic in a \xe2\x80\xa60CnAmount of uniform buffer bindings that can be dynamic in a \xe2\x80\xa60ClAmount of individual samplers within binding arrays that \xe2\x80\xa60CmThe minimum guaranteed limits for acceleration structures \xe2\x80\xa6CmIf the following code returns false, then nvidia will end \xe2\x80\xa6CnAllows shaders to index sampled texture and storage buffer \xe2\x80\xa60ClSupport for non-uniform indexing of sampled textures and \xe2\x80\xa6")