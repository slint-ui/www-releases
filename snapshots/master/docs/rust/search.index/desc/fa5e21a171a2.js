rd_("oAlpha ComponentAlAlpha component of the color0001nBlue Component0AkBlue component of the color00011oGreen Component0AlGreen component of the color00011mRed Component0AjRed component of the color00011AaThe x coordinate.0AhX position of the originBiThe number of work groups in X dimension.10101022AaThe y coordinate.0AhY position of the originBiThe number of work groups in Y dimension.10101022AhZ position of the originBiThe number of work groups in Z dimension.101010BcCast a simple type to another kind.000i2D vector000CmTriangles with vertices in clockwise order are considered \xe2\x80\xa6000EhA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>\xe2\x80\xa6j1D textureh1D image021210021EhA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>\xe2\x80\xa6j2D textureh2D image021210021DdA three dimensional texture. <code>texture_3d</code> in WGSL and \xe2\x80\xa6j3D textureh3D image021210021Di<code>Backend::Gl</code>. Supported on Linux/Android, the web through \xe2\x80\xa60CjOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, \xe2\x80\xa6000B`An identifier for a wgpu object.0CjConditionally executes one of two blocks, based on the \xe2\x80\xa6000AjContains the success value000AhThe drm file descriptor.BfThe file descriptor of the DRM device.10DdOptions for the OpenGL/OpenGLES backend, [<code>Backend::Gl</code>].00000AePipeline Constant ID.0ChAn ID value inserted into the data attributes of the \xe2\x80\xa6110CkThe Intermediate Representation shared by all frontends \xe2\x80\xa60AiWhat operation to compute000CaKind of query that this query set should contain.AgThe type of the bindingAbType of the field.AjThe type of this variable.0AeType of the argument.AcType of the result.AfThe type of the resultBbThe current function being writtenAlThe type of this expression.655432878AoSub-type of the buffer binding.0987665432CiType of the uniform. This will only ever be a scalar, \xe2\x80\xa62877654:9:11CnArray of all <code>Backend</code> values, corresponding to \xe2\x80\xa6AnEnable writes to all channels.10iSrc + Dst000AjDepth, Stencil, and Color.000CnAll the types and methods that make up a implementation on \xe2\x80\xa6CjTriangles with vertices in counter clockwise order are \xe2\x80\xa6000AiCpu / Software Rendering.000AjSurface from a DRM device.ClA raw window handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6CmA raw display handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa6210kD.component000AhContains the error value000AkMay not be NaN or infinity.00EeEnables <code>f16</code>/<code>half</code> primitive support in all shader languages.111111111CiThe Fxc compiler (default) is old, slow and unmaintained.00000CiA raw window handle for the Linux Generic Buffer Manager.CjA raw display handle for the Linux Generic Buffer Manager.10Cmfloating-point RGBA, linear-color float can be outside of \xe2\x80\xa6000DbAll the resources tracked by a <code>crate::global::Global</code>.0DhThe <code>Key</code> enum is used to map a specific key by name e.g. \xe2\x80\xa6mmax(Src, Dst)000mmin(Src, Dst)000B`Passthrough for MSL source code.00AaTracing disabled.000c1.0000AiEnable red channel writes0ClExtremely limited shaders, including a total instruction \xe2\x80\xa6000BjMissing minor features and storage images.000B`WebGPU supports shader module 5.000kS.component000i3D vector000B`A raw window handle for the Web.BaA raw display handle for the Web.10AlA raw window handle for Xcb.AmA raw display handle for Xcb.10BiAdds a new variable to the current scope.BmIncrement the counter by the provided amount.10BjGet a flags value with all known bits set.0B`Returns self with all flags set.111111111111ClCreates a new configuration where all checks are enabled \xe2\x80\xa6222BdReturns slice of all variants of \xe2\x80\xa63333333333333333333333323333333333331333033333333333333333333333CfFind the overloads that could accept a given argument.0BiThe upper bound of the range (exclusive).0ClTypes that are useful for FFI bindings to <code>wgpu</code>.BdFunction to run on the atomic value.CeThe kind of atomic operation to perform on the texel.D`The specific operation we\xe2\x80\x99re performing on <code>query</code>.210210210CmReturns a reference that\xe2\x80\x99s tied to the life time of the \xe2\x80\xa6BaGet a reference to all instances.D`Return this arena\xe2\x80\x99s handle for <code>value</code>, if present.102Ao<code>wgpu-hal</code> counters.000ClAllocating resource ids, and tracking the resources they \xe2\x80\xa60AoNumber of elements in the arrayCcSize of the string, in bytes. This excludes the \xe2\x80\xa6ChReturn the current number of items stored in this arena.CiReturns the current number of items stored in this arena.1032ClReturns a new Model where all elements are mapped by the \xe2\x80\xa6AaThe maximum size.AiSlint on MicrocontrollersAaThe minimum size.DkReturns a new color that is a mix of this color and <code>other</code>. \xe2\x80\xa60AbShader MSL source.00AnCreates a new BackendSelector.BiCreate a new window from a window adapterDhCreates a new MapModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DkCreates a new FilterModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DiCreates a new SortModel based on the given <code>wrapped_model</code> \xe2\x80\xa6DkCreates a new ReverseModel based on the given <code>wrapped_model</code>\xe2\x80\xa6CkConstruct a new logical position from the given x and y \xe2\x80\xa6ClConstruct a new physical position from the given x and y \xe2\x80\xa6CiConstruct a new logical size from the given width and \xe2\x80\xa6CkConstruct a new physical size from the width and height \xe2\x80\xa6ClCreates a new SharedPixelBuffer with the given width and \xe2\x80\xa6AjCreates a new empty stringBfInstantiate a new MinimalWindowAdaptorAeCreate a new RendererChCreates a new instance that is reference counted and \xe2\x80\xa6AgConstruct TlasInstance.AoCreate an new instance of wgpu.AjCreate a new staging belt.CfCreate a new arena with no initial capacity allocated.0ClCreates a new <code>Span</code> from a range of byte indicesEcCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.D`Creates a new <code>Options</code> without doc comments parsing.BcConstruct a new validator instance.AoCreates a counter with value 0.BbCreate a new empty display handle.CeCreate a new handle to an <code>ANativeWindow</code>.1AnCreate a new handle to a view.2B`Create a new handle to a window.3DeCreate a new handle to an <code>OHNativeWindow</code> on OpenHarmony.4142BaCreate a new handle to a display.2BoCreate a new handle to a connection and screen.3AlCreate a new display handle.BaCreate a new handle to a surface.BiCreate a new handle to a file descriptor.AoCreate a new handle to a plane.B`Create a new handle to a device.3;BhCreate a new handle to a canvas element.DeCreate a new handle from a pointer to <code>HtmlCanvasElement</code>.DfCreate a new handle from a pointer to an <code>OffscreenCanvas</code>.>;;AgConstruct TlasInstance.CnCreate an new instance of wgpu using the given options and \xe2\x80\xa6AjCreate a new staging belt.C`Returns a new <code>TextureBlitterBuilder</code>ClReturns a <code>TextureBlitter</code> with default settings.CfCreate a new arena with no initial capacity allocated.0ClCreates a new <code>Span</code> from a range of byte indicesEcCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.D`Creates a new <code>Options</code> without doc comments parsing.DjReturns <code>None</code> if the entry point with the provided name can\xe2\x80\xa6BkCreates a new <code>Writer</code> instance.CaCreate a validator for Naga <code>Module</code>s.B`Returns a new mutable empty set.0AoCreates a counter with value 0.BdCreates a new default configuration.AnCreates a new BackendSelector.B`Returns a new ComponentCompiler.AgReturns a new Compiler.BiCreate a new window from a window adapterCkConstruct a new logical position from the given x and y \xe2\x80\xa6ClConstruct a new physical position from the given x and y \xe2\x80\xa6CiConstruct a new logical size from the given width and \xe2\x80\xa6CkConstruct a new physical size from the width and height \xe2\x80\xa6ClCreates a new SharedPixelBuffer with the given width and \xe2\x80\xa6AjCreates a new empty stringCjCompile and instantiate a component from the specified \xe2\x80\xa6DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000DkA pointer to the <code>JsValue</code> of an <code>HtmlCanvasElement</code>.DiA pointer to the <code>JsValue</code> of an <code>OffscreenCanvas</code>.10CkWhat operations will be performed on this color attachment.0CnRemoves last element from the array and returns it. If the \xe2\x80\xa60CfGet access to the raw resource if it is not destroyed.0CkReturns the red channel of the color as u8 in the range \xe2\x80\xa6A`The red channel.10DjThis is a convenience function that first calls <code>Self::show</code>\xe2\x80\xa600GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa60EcCalls <code>Self::insert</code> if <code>set</code> is true and otherwise calls \xe2\x80\xa6111111111111111111111111111111111111BgSets the counter to the provided value.221222222222222222222222222222222222222220CfBackend for SPIR-V (Standard Portable Intermediate \xe2\x80\xa60CeThe intersection of a source flags value with the \xe2\x80\xa60000000000000000000000000000000000000BmDecrement the counter by the provided amount.11111111111111111111111111111111111111110BbCreate a Web-based display handle.ClZip together an identifier and return its raw underlying \xe2\x80\xa60CjIntersecting with Axis Aligned Bounding Boxes. Matches \xe2\x80\xa6000Bmblock compressed texture. 16 bytes per block.000EhChooses either <code>Opaque</code> or <code>Inherit</code> automatically\xef\xbc\x8cdepending \xe2\x80\xa6000Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000Ci5x4 block compressed texture. 16 bytes per block (6.4 \xe2\x80\xa6000Cj5x5 block compressed texture. 16 bytes per block (5.12 \xe2\x80\xa6000Cj6x5 block compressed texture. 16 bytes per block (4.27 \xe2\x80\xa6000Cj6x6 block compressed texture. 16 bytes per block (3.56 \xe2\x80\xa6000Ci8x5 block compressed texture. 16 bytes per block (3.2 \xe2\x80\xa6000Cj8x6 block compressed texture. 16 bytes per block (2.67 \xe2\x80\xa6000Cg8x8 block compressed texture. 16 bytes per block (2 \xe2\x80\xa6000AjEnable blue channel writes0A`The back button.iBack face000BkBottom Level Acceleration Structure (BLAS).0mBoolean type.000CbCorrespond to the <code>bool</code> type in .slint0AnThe data can be copied around.0AaCalls a function.000EhA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in \xe2\x80\xa6hCube map011001AoCan be used for data variables.0Cm<code>Backend::Dx12</code>. Supported on Windows 10 and later0CmThe model data: A model is a set of rows and each row has \xe2\x80\xa6AeDirect3D-12 (Windows)000BfPassthrough for DXIL compiled with DXC00CjEmit a range of expressions, visible to all statements \xe2\x80\xa6000AaFace of a vertex.000CnPresentation frames are kept in a First-In-First-Out queue \xe2\x80\xa6000AcPolygons are filled000CbIndicates that no interpolation will be performed.000jNo issues.000AdPassthrough for HLSL00AiAn informational message.0AmKeep stencil value unchanged.000BdAborts the current shader execution.000BmStorage can be used as a source for load ops.0A`The left button.CeFunction passes if new value less than existing value000BcPolygons are drawn as line segments000CiLoads the existing value for this attachment into the \xe2\x80\xa6AhLoad a value indirectly.01110011AlExecutes a block repeatedly.000CgThe swap chain has been lost and needs to be recreated.BiThe surface under the swap chain is lost.0100CjBinding is visible from the mesh shader of a mesh pipelineCkBinding is visible from the mesh shader of a mesh pipeline.AdCall a math function000BmBinding is not visible from any shader stage.0Ak<code>Backend::Noop</code>.0BcYUV 4:2:0 chroma subsampled format.000iNo value.CgPower usage is not considered when choosing an adapter.1BbNo intersection found. Matches \xe2\x80\xa6021212002CkDo not obtain a waitable handle and do not wait for it. \xe2\x80\xa620BmDummy backend, which may be used for testing.000Ee<code>TextureFormat::R8Unorm</code> Y plane, and <code>TextureFormat::Rg8Unorm</code>0D`Blend state of <code>(1 * src) + ((1 - src_alpha) * dst)</code>.0BkA raw display handle for OpenHarmony OS NDK088CdCheck the device for a single time without blocking.A`This was a poll.101010i4D vector000BdData will be read from the variable.0AdMap only for reading0CdSingle <code>TextureFormat::Rgba8Unorm</code> or \xe2\x80\xa60AcA single type rule.0BaSampling returns signed integers.AdSigned integer type.011001BdGet the size at the specified level.000BbSome value of type <code>T</code>.00000BmA source code span, used for error reporting.0lS1.component000A`sRGB color space000CjBinding is visible from the task shader of a mesh pipelineCkBinding is visible from the task shader of a mesh pipeline.BhTop Level Acceleration Structure (TLAS).0BcA data type declared in the module.000BcSampling returns unsigned integers.AfUnsigned integer type.011001hAny, All0ChThe variant that expresses the non-type. This is the \xe2\x80\xa6CmThere is nothing in this value. That\xe2\x80\x99s the default. For \xe2\x80\xa6DfSame as <code>WaitForSubmissionIndex</code> but waits for the most \xe2\x80\xa60CfOn wgpu-core based backends, block until the given \xe2\x80\xa6CmObtain a waitable handle and wait for it before acquiring \xe2\x80\xa610CkStruct that\xe2\x80\x99s used to hold weak references of a Slint \xe2\x80\xa60AnWGSL module as a string slice.AmA raw window handle for Xlib.AnA raw display handle for Xlib.10DbSeparate <code>TextureFormat::R8Unorm</code> Y, Cb, and Cr planes.0lZero origin.000c0.0AjSet stencil value to zero.BoOn the Metal backend, this is equivalent to \xe2\x80\xa6210210210oBack face mode.DiBackend functions that export shader <code>Module</code>s into binary \xe2\x80\xa61101AaDepth bias state.000AnGet the underlying bits value.0CkGets the set flags as a container holding an array of bits.11111111111111111111111111111111111111011111111111111111111111111111111111111BhReference to the acceleration structure.0ClReturns the blue channel of the color as u8 in the range \xe2\x80\xa6AaThe blue channel.10AaBody of the case.CjBlock of instructions comprising the body of the function.101010ChReturn a new identifier based on <code>label_raw</code>.0DjConvert the scalar components of <code>expr</code> to <code>target</code>.0DjCopies the data from the source <code>TextureView</code> to the target \xe2\x80\xa6B`<code>wgpu-core</code> counters.000C`The data used to initialise the cache initialise0CnThis is a pseudo module which only exist for documentation \xe2\x80\xa6CbDraws primitives from the active vertex buffer(s).00000CkOptions for the DX12 backend, [<code>Backend::Dx12</code>].00000AcShader DXIL source.00CjSource expression, which can only be a scalar or a vector.000AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CgConvert a <code>BufferSlice</code> to an equivalent \xe2\x80\xa6EcConvert a <code>BufferSlice</code> to an equivalent <code>BufferBinding</code>, \xe2\x80\xacGLES API internals.BfShader GLSL source (currently unused).BkBackend for GLSL (OpenGL Shading Language).11DkGrow this typifier until it contains a type for <code>expr_handle</code>\xe2\x80\xa60DjConvenience function for <code>crate::Window::hide()</code>. Hides the \xe2\x80\xa6ClHides the window, so that it is not visible anymore. The \xe2\x80\xa6110AcShader HLSL source.BoBackend for HLSL (High-Level Shading Language).11BaA Win32 <code>HWND</code> handle.0AkAnalysis about the functionBcAnalysis information of the module.10B`Initializes the Android backend.CgThe default value of the pipeline-overridable constant.AjThe value of the constant.B`Initial value for this variable.0210021002100BaCalls <code>U::from(self)</codegReturns an iterator visiting all elements of the model.CkReturns an iterator over the rectangles in this region. \xe2\x80\xa6BfYield a set of contained flags values.0BgReturns an iterator over the set flags.111111111111ClReturns an iterator over the items stored in this arena, \xe2\x80\xa602222222222222222222222222212222222222220022222222222222222222222222BjIterate over all the fields in this structCjThis module contains the code serialize and desrialize \xe2\x80\xa6BmHow the value\xe2\x80\x99s bits are to be interpreted.AcTarget scalar kind.10AiKind of values to sample.0212100C`How data should be read through this attachment.000CjObtain a lock to the EGL context and get handle to the \xe2\x80\xa6CjMask for the instance used inside the shader to filter \xe2\x80\xa6CmBitmask that restricts the samples of a pixel modified by \xe2\x80\xa60100AiUtilitary math functions.0BkThe compiled mesh stage and its entry pointBkThe mesh processing state for this pipelineAeRange of mips to use.0BeSpecifies which thread to gather from0CnWhether the buffer is indexed by vertex number or instance \xe2\x80\xa6110lAdapter nameAmThe name of the type, if any.AmName of the variable, if any.0AmName of the argument, if any.AmName of the function, if any.BmName of this entry point, visible externally.433210CjThe name provided to the <code>allocate()</code> function.6654432154432106ChThe name of this Component as written in the .slint fileCkOptions for the noop backend, [<code>Backend::Noop</code>].AkA dummy API implementation.111011BkCreate an OpenHarmony-based display handle.CdReturns the path of the image on disk, if it was \xe2\x80\xa60CkCheck for resource cleanups and mapping callbacks. Will \xe2\x80\xa60Bm<code>Module</code> processing functionality.0BaAdd a row at the end of the modelCnAdd an element to the array. If the array was shared, this \xe2\x80\xa60AjGet the counter\xe2\x80\x99s value.0AhThe element\xe2\x80\x99s geometryDkConvenience function for <code>crate::Window::show()</code>. This shows \xe2\x80\xa6ChShows the window on the screen. An additional strong \xe2\x80\xa6110CmReturns the size of the window on the screen, in physical \xe2\x80\xa6BhReturns the size of the image in pixels.BhReturns the size of the Image in pixels.BkReturn the size of the Window on the screenBbThe new logical size of the windowCeReturns the length of the buffer allocation in bytes.AoReturns the size of this slice.BnReturns the size of this <code>Texture</code>.BdReturns the byte size of the format.AkSize of a buffer, in bytes.ClSize of the texture. All components must be greater than \xe2\x80\xa6DiSize of the binding in bytes, or <code>None</code> for using the rest \xe2\x80\xa6ChSub descriptor for the size defining attributes of a \xe2\x80\xa6AjGet the size of this type.43BgThe size of the region bound, in bytes.BdThe size in bytes of the allocation.BgThe size in bytes of this memory block.76;:9876543AmSize of the external texture.8732187CmReturns the size of the window on the screen, in physical \xe2\x80\xa6BhReturns the size of the image in pixels.BhReturns the size of the Image in pixels.CeReturns a new Model where the elements are sorted \xe2\x80\xa6CkStops the previously started timer. Does nothing if the \xe2\x80\xa6B`Swaps two elements in the model.BdGet and reset the counter\xe2\x80\x99s value.0CkThe compiled task stage, its entry point, and the color \xe2\x80\xa6BlThe task processing state for this pipeline.AlThe text content of the itemBnThe unicode representation of the key pressed.0BoThe unicode representation of the key released.CmUtility structures and functions that are built on top of \xe2\x80\xa60BaThe view to use as an attachment.00000000000ChWait for <code>fence</code> to reach <code>value</code>.BkConstruct a <code>Self::Wait</code> variant1CaCode shared between the WGSL front and back ends.BlFrontend for WGSL (WebGPU Shading Language).BlKeywords for WGSL (WebGPU Shading Language).AcShader WGSL source.32100ClThe types of the acceleration structure are axis aligned \xe2\x80\xa60AkEnable alpha channel writes0CkAllows an additional depth/stencil test to be performed \xe2\x80\xa6000ChAn arena holding some kind of component (e.g., type, \xe2\x80\xa60AmHomogeneous list of elements.000Ck10x5 block compressed texture. 16 bytes per block (2.56 \xe2\x80\xa6000Ck10x6 block compressed texture. 16 bytes per block (2.13 \xe2\x80\xa6000Cj10x8 block compressed texture. 16 bytes per block (1.6 \xe2\x80\xa6000nElect, BarrierhBarriersCfA block containing more statements, to be executed \xe2\x80\xa6ChA code block is a vector of statements, with maybe a \xe2\x80\xa6110100DgExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.000CnA brush is a data structure that is used to describe how a \xe2\x80\xa6EfCorrespond to <code>brush</code> or <code>color</code> type in .slint.  For color, \xe2\x80\xa601AlAlways perform a full build.000AkNumber of bytes per scalar.000BjEnable red, green, and blue channel writes0CjLoads the specified value for this attachment into the \xe2\x80\xa600000CgDirectly duplicate an acceleration structure to another0AlRGBA double precision color.0CcColor represents a color in the Slint run-time, \xe2\x80\xa6110CbGenerate debug information in shaders and objects.BdInclude debug labels for everything.10BmSampling does the depth reference comparison.AgDepth comparison image.011001ClReturned immediately when an attempt is made to encode a \xe2\x80\xa60ClFunction passes if new value is equal to existing value. \xe2\x80\xa6000AaAn error message.0BhErrors resulting from usage of GPU APIs.0AiA GLSL compilation error.CmThe diagnostic found is an error that prevents successful \xe2\x80\xa6CiA value you can block on to wait for something to finish.0CnThe <code>Api::Fence</code> type for <code>vulkan::Api</code>.0CmUse the value provided by the first vertex of the current \xe2\x80\xa6000AhSampling returns floats.AdFloating point type.011001CgRequires depth/stencil tests to be performed before \xe2\x80\xa6000jFront face000AkEnable green channel writes0AnA raw window handle for Haiku.AoA raw display handle for Haiku.10CjAllow a buffer to be the index buffer in a draw operation.BbThe index buffer used for drawing.10BjPossibly multidimensional array of texels.000CmAn image type that can be displayed by the Image element. \xe2\x80\xa6C`Correspond to <code>image</code> type in .slint.CcCorrespond to the <code>image</code> type in .slint2CgValues of this type always have the given number of \xe2\x80\xa6000AgObject debugging label.0AbIndentation level.0Ch<code>Backend::Metal</code>. Supported on macOS and iOS.0AkMetal API (Apple platforms)000ClA Model is providing Data for the repeated elements with \xe2\x80\xa6BgA model (that includes array in .slint)0CnThis processor assigns names to all the things in a module \xe2\x80\xa60AeFunction never passes000BhAnother platform-specific error occurred0CiA button that is none of left, right, middle, back or \xe2\x80\xa6AaOther or Unknown.CjAcquiring a texture failed with a generic error. Check \xe2\x80\xa611013AlPolygons are drawn as points000BjThe information about the data is queried.0BfHandle to a command queue on a device.0BbA strongly typed range of handles.0CcThe raw underlying representation of an identifier.0AaThe right button.CiThe data type has a size known by pipeline creation time.0BnStorage can be used as a target for store ops.0CbOne signed byte (i8). <code>i32</code> in shaders.000B`Passthrough for SPIR-V binaries.00AkSplat scalar into a vector.000CjStores the resulting value of the render pass for this \xe2\x80\xa6AmStores a value at an address.01110011CiTimer is a handle to the timer system that triggers a \xe2\x80\xa6CnControls API call tracing and specifies where the trace is \xe2\x80\xa6000CfA raw window handle for UIKit (Apple\xe2\x80\x99s non-macOS \xe2\x80\xa6CgA raw display handle for UIKit (Apple\xe2\x80\x99s non-macOS \xe2\x80\xa610CdOne unsigned byte (u8). <code>u32</code> in shaders.000AhApply an unary operator.000Cb8 bit integer RGBA, [0, 255] converted to/from \xe2\x80\xa6000DiA type that can be entirely characterized by a <code>TypeInner</code> \xe2\x80\xa6DhA free-floating <code>TypeInner</code>, representing a type that may \xe2\x80\xa610CgThis is a dynamically typed value used in the Slint \xe2\x80\xa6BeData will be written to the variable.0CkThe rendering is done on a HTML Canvas element using WebGL.0AnA raw window handle for Win32.0AnA raw window handle for WinRT.0AdMap only for writing0ClIf the future hasn\xe2\x80\x99t completed yet, this will make the \xe2\x80\xa60CmReturns the alpha channel of the color as u8 in the range \xe2\x80\xa6AdThe alpha component.oAlpha equation.00021B`Angle of the rotation in degreesBlIn degrees, around the center of the elementD`The bitwise or (<code>|</code>) of the bits in two flags values.00000000000000000000000000000000000000000000000000000000000000000000000000000BaBlend a single pixel with a colorBlThe blending that is used for this pipeline.000Akcompressed block dimensions000CiCompletes the process of building a slint::Image that \xe2\x80\xa6CnReturns a new <code>TextureBlitter</code> with given settings.CfThe pipeline cache to use when creating this pipeline.00000CjThe cache which will be used and filled when compiling \xe2\x80\xa600111111100BbDepth bias clamp value (absolute).000BeClears the model, removing all valuesBkClears the vector and removes all elements.BjClears the arena, keeping all allocations.BhClears the arena keeping all allocationsDfRemove all entries from this <code>Layouter</code>, retaining storage.2103CfIf the brush is SolidColor, the contained color is \xe2\x80\xa6oColor equation.0001CnTotal count of queries the set contains. Must not be zero. \xe2\x80\xa6CnThe number of samples calculated per pixel (for MSAA). For \xe2\x80\xa6CeIf the binding is an array of multiple resources. \xe2\x80\xa621022102102CnWhat operations will be performed on the depth part of the \xe2\x80\xa6000CjDrains the arena, returning an iterator over the items \xe2\x80\xa60BfGet a flags value with all bits unset.0AoReturns self with no flags set.111111111111111111111111111111111111110111111111111111111111111111BeReturns a reference to the empty set.022222222222AcVulkan entry point.0CnIf the pass is invalid, contains the error that caused the \xe2\x80\xa60BmShared types for WebGPU errors. See also: \xe2\x80\xa6110AgFlags for the geometry.CbFlags for the bottom level acceleration structure.0BkFlags to tune the behavior of the instance.AgCombined boolean flags.BiAdditional property flags for the format.BcConfiguration flags for the writer.4432154435443210443215443CkConstruct a float <code>Scalar</code> with the given width.0A`Front face mode.CmFrontend parsers that consume binary and text shaders and \xe2\x80\xa61101CmReturns the green channel of the color as u8 in the range \xe2\x80\xa6AbThe green channel.10AeThe bind group index.000BeCreate an Haiku-based display handle.DkThe image to load a texel from. This must have type <code>Image</code>. \xe2\x80\xa6CjThe image to perform an atomic operation on. This must \xe2\x80\xa6101010BaReturns the index of this handle.BfDefinitions for index bounds checking.CjHow should the generated code handle array, vector, or \xe2\x80\xa602CnThe index which can be used for dual source blending. This \xe2\x80\xa6211CeInner structure that depends on the kind of the type.000CbLabel for the bottom level acceleration structure.CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa6CmDebug label for the command encoder. This will show up in \xe2\x80\xa6AkDebug label for the device.AnDebug label for the query set.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6CmDebug label of the sampler. This will show up in graphics \xe2\x80\xa6CjDebug label of the shader module. This will show up in \xe2\x80\xa6000CmDebug label of the texture. This will show up in graphics \xe2\x80\xa6CiDebug label of the texture view. This will show up in \xe2\x80\xa6BoLabel for the top level acceleration structure.CgDebug label of the bind group. This will show up in \xe2\x80\xa6CnDebug label of the bind group layout. This will show up in \xe2\x80\xa6ClDebug label of the pipeline cache. This might show up in \xe2\x80\xa6CiDebug label of the compute pass. This will show up in \xe2\x80\xa6CnDebug label of the pipeline. This will show up in graphics \xe2\x80\xa6ClDebug label of the pipeline layout. This will show up in \xe2\x80\xa6;ChDebug label of the render pass. This will show up in \xe2\x80\xa62:BcDebug label of this command buffer.CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa6AkDebug label for the device.CnReturns a string identifying this resource for logging and \xe2\x80\xa62=AnDebug label for the query set.CbLabel for the bottom level acceleration structure.=B`Debug label of the texture view.AkDebug label of the sampler.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6BiDebug label of the render bundle encoder.AnDebug label of the bind group.BcDebug label of the pipeline layout.1BeDebug label of the bind group layout.1CjReturns the label of shader module passthrough descriptor.;<CmDebug label for the command encoder. This will show up in \xe2\x80\xa6CiDebug label of the texture view. This will show up in \xe2\x80\xa6CmDebug label of the texture. This will show up in graphics \xe2\x80\xa6CmDebug label of the sampler. This will show up in graphics \xe2\x80\xa6BcDebug label of this command buffer.:>=BoLabel for the top level acceleration structure.CjDebug label of the shader module. This will show up in \xe2\x80\xa6000?CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa67AkDebug label for the device.CmDebug label of the external texture. This will show up in \xe2\x80\xa6AnDebug label for the query set.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6859:6CgDebug label of the bind group. This will show up in \xe2\x80\xa6CnDebug label of the bind group layout. This will show up in \xe2\x80\xa6ClDebug label of the pipeline cache. This might show up in \xe2\x80\xa6CiDebug label of the compute pass. This will show up in \xe2\x80\xa6CnDebug label of the pipeline. This will show up in graphics \xe2\x80\xa6ClDebug label of the pipeline layout. This will show up in \xe2\x80\xa66ChDebug label of the render pass. This will show up in \xe2\x80\xa622<>;:CnReturns a string identifying this resource for logging and \xe2\x80\xa6<CmDebug label of the texture. This will show up in graphics \xe2\x80\xa6;:CbLabel for the bottom level acceleration structure.BoLabel for the top level acceleration structure.B`Debug label of the texture view.AkDebug label of the sampler.=BiDebug label of the render bundle encoder.CjDebug label of the shader module. This will show up in \xe2\x80\xa6AnDebug label of the bind group.BcDebug label of the pipeline layout.1BeDebug label of the bind group layout.1AkDebug label for the device.CjDebug label of a buffer. This will show up in graphics \xe2\x80\xa6CmDebug label for the command encoder. This will show up in \xe2\x80\xa6CiDebug label of the texture view. This will show up in \xe2\x80\xa6=CmDebug label of the external texture. This will show up in \xe2\x80\xa6CmDebug label of the sampler. This will show up in graphics \xe2\x80\xa6BcDebug label of this command buffer.ClDebug label of the render bundle encoder. This will show \xe2\x80\xa6AnDebug label for the query set.CbLabel for the bottom level acceleration structure.BoLabel for the top level acceleration structure.>BhA level of detail, for mipmapped images.CcIf <code>None</code>, the base level is considered.101010BdReturn the level for this diagnosticAdMulti-sampled image.AjMulti-sampled depth image.101010AmThe primary drm plane handle.BoThe plane index on which to create the surface.10ClThe <code>RayQuery</code> object this statement operates on.000AfThe WGPU queue to use.0BoThe WGPU queue for used for command submission.000ClRange in push constant memory to use for the stage. Must \xe2\x80\xa6CjRange within the texture that is accessible via this view.1101CmManually reapply the filter. You need to run this e.g. if \xe2\x80\xa6CnManually reapply the sorting. You need to run this e.g. if \xe2\x80\xa6CkNotify the peer that the model has been changed in some \xe2\x80\xa6AmReset the validator internals0EhReturns a <code>BufferSlice</code> referring to the portion of <code>self</code>\xe2\x80\x99s \xe2\x80\xa6EhReturn another <code>BufferSlice</code> referring to the portion of <code>self</code>\xe2\x80\xa610eSlintChThis macro allows you to use the Slint design markup \xe2\x80\xa6BbHow this variable is to be stored.000BoIterator over stored <code>SpanContext</code>s.0BdBinary SPIR-V data, in 4-byte words.00mShader stage.0BoThe compiled compute stage and its entry point.BnThe compiled vertex stage and its entry point.C`The compiled fragment stage and its entry point.210233210BlThe compiled task stage and its entry point.BlThe compiled mesh stage and its entry point.432104CiStarts the timer with the given mode and interval, in \xe2\x80\xa6BiThe lower bound of the range (inclusive).0AoThe new state to transition to.0000000ChWhether data will be written to through this attachment.000ClReturns the widget style the compiler is currently using \xe2\x80\xa60AnThe title of the column headerAlReturns the Window\xe2\x80\x99s titleBlRemoves the third dimension from this origin0BgAdds the third dimension to this origin0CkWhether API tracing for debugging is enabled, and where \xe2\x80\xa600000BkArena for the types defined in this module.000BdCreate a UiKit-based display handle.D`The bitwise or (<code>|</code>) of the bits in two flags values.0BfBitwise or - <code>self | other</code>11111111111111111111111111111111111111011111111111111111111111111111111111111BcUnmaps the buffer from host memory.0EnReturns a new <code>Span</code> starting at <code>self</code> and ending at <code>other</code>0BkUnzip a raw identifier into its components.0ChReturns the allowed usages for this <code>Buffer</code>.ChReturns the allowed usages of this <code>Texture</code>.CmUsages of a buffer. If the buffer is used in any way that \xe2\x80\xa6CmThe usage of the swap chain. The only usage guaranteed to \xe2\x80\xa6CmAllowed usages of the texture. If used in other ways, the \xe2\x80\xa6ChThe allowed usage(s) for the texture view. Must be a \xe2\x80\xa63310AnSupported texture usage flags.BbAllowed usage of surface textures,CmContains either a single mutating usage as a target, or a \xe2\x80\xa6653487654366432106534AaShader validator.0BnValue, upon which the case is considered true.AmValue to use in the function.CeThe value with which to perform the atomic operation.210210210BiReturns the width of the image in pixels.AlThe width in logical pixels.AmThe width in physical pixels.Bothe actual width of the column (logical length)BoReturns the width of this <code>Texture</code>.CiWidth of the swap chain. Must be the same size as the \xe2\x80\xa6AcWidth of the extentB`This size of the value in bytes.021BgThe display width of the selected mode.4AnWidth of the external texture.432204301987CdWrites the <code>Module</code> as glsl to the outputBoStorage can be used as a target for atomic ops.CdAtomic operations will be performed on the variable.10BcArray access with a computed index.000AfFunction always passes000AoA raw window handle for AppKit.B`A raw display handle for AppKit.10CnThe texture can be both read and written in the shader via \xe2\x80\xa6nAtomic scalar.A`Atomic function.102210102Cl10x10 block compressed texture. 16 bytes per block (1.28 \xe2\x80\xa6000Cl12x10 block compressed texture. 16 bytes per block (1.07 \xe2\x80\xa6000Cl12x12 block compressed texture. 16 bytes per block (0.89 \xe2\x80\xa6000Aaballot, broadcast0AnStatements and blocks of them.0AhApply a binary operator.000AnBinding is backed by a buffer.AaA buffer binding.0100BbHandle to a GPU-accessible buffer.0CaInterpolate the value at the center of the pixel.000CkStructure describing a logical device. Some members are \xe2\x80\xa60CdOpen connection to a graphics and/or compute device.1CmA connection to a GPU and a pool of resources to use with \xe2\x80\xa6120CmUse the value provided by the first or last vertex of the \xe2\x80\xa6000CeThis trait is used to obtain references to global \xe2\x80\xa60BlOpaque handles, such as samplers and images.0BfA type stored in the associated arena.110BlA strongly typed reference to an arena item.0BfIgnore the stencil state for the face.0AdIndent for backends.0AnBitwise inverts stencil value.000CiRepresents the sets of limits an adapter/device supports.000AdLinear InterpolationCcIndicates that linear, non-perspective, correct \xe2\x80\xa6011001CnOperation to perform to the output attachment at the start \xe2\x80\xa600000DfReturned by a subsequent call to <code>encoder.finish()</code>, if \xe2\x80\xa60DkUse <code>Manual</code> if you\xe2\x80\x99ve initialized WGPU and want to supply \xe2\x80\xa6CkApplications that have control over the content that is \xe2\x80\xa60100CgMarker trait used to determine which types uniquely \xe2\x80\xa60AbMatrix of numbers.000AbThe center button.nShader module.000EdEquivalent of the WGSL\xe2\x80\x99s <code>%</code> operator or SPIR-V\xe2\x80\x99s <code>OpFRem</code>000DfVia <code>VK_KHR_zero_initialize_workgroup_memory</code> or Vulkan 1.30CnFences in OpenGL behave normally. If you don\xe2\x80\x99t know what \xe2\x80\xa600000EfAn <code>int</code> or a <code>float</code> (this is also used for unit based type \xe2\x80\xa60CeIs OPAQUE (is there no alpha test) recommended as \xe2\x80\xa60CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa6000hPlane 0.000hPlane 1.000hPlane 2.000CjRed channel only. 8 bit integer per channel. Signed in \xe2\x80\xa6000ClRed channel only. 8 bit integer per channel. Unsigned in \xe2\x80\xa6000BfRepeat the texture in a tiling fashion000CbReturns from the function (possibly with a value).000CeInterpolate the value at each sample location. In \xe2\x80\xa6000BjNumber of integral or floating-point kind.BaCharacteristics of a scalar type.110100BoSelect between two values based on a condition.000CdOne signed short (u16). <code>i32</code> in shaders.000CbOne signed int (i32). <code>i32</code> in shaders.000CnOne signed byte (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x88\x92\xe2\x80\xa6000CdCorrespond to the <code>string</code> type in .slint0AgUser-defined structure.000iAn object0CkThis type represents a runtime instance of structure in \xe2\x80\xa6CkConditionally executes one of multiple blocks, based on \xe2\x80\xa6000CkTypes that can return the WGSL source representation of \xe2\x80\xa60BeIndices are 16 bit unsigned integers.CfOne unsigned short (u16). <code>u32</code> in shaders.101010BeIndices are 32 bit unsigned integers.CdOne unsigned int (u32). <code>u32</code> in shaders.101010CnOne unsigned byte (u8). [0, 255] converted to float [0, 1] \xe2\x80\xa6000ocbindgen:ignore00000000000000000CiBinding is visible from the vertex shader of a render \xe2\x80\xa6CkAllow a buffer to be the vertex buffer in a draw operation.BaA vertex buffer used for drawing.210Dj<code>Backend::Vulkan</code>. Supported on Windows, Linux/Android, and \xe2\x80\xa60AbVector of numbers.000BeVertex data is advanced every vertex.000CbVulkan API (Windows, Linux, Android, MacOS via \xe2\x80\xa6000CiThe rendering is based on WGPU 26.x. Use the provided \xe2\x80\xa60CiThe rendering is based on WGPU 27.x. Use the provided \xe2\x80\xa60AgWindow handle producer.0CgThis type represents a window towards the windowing \xe2\x80\xa60BkWriter responsible for all code generation.AoAllowed access to this texture.000BnThe pending fence values have to be ascending.0ChAdds a new value to the arena, returning a typed handle.0BfCreate an AppKit-based display handle.CiReturn something that can be downcast\xe2\x80\x99ed (typically \xe2\x80\xa6DeGet the <code>wgpu_hal</code> surface from this <code>Surface</code>.DeGet the <code>wgpu_hal</code> adapter from this <code>Adapter</code>.EaGet the <code>wgpu_hal</code> acceleration structure from this <code>Blas</code>.DcGet the <code>wgpu_hal</code> buffer from this <code>Buffer</code>.DcGet the <code>wgpu_hal</code> device from this <code>Device</code>.DgGet the <code>wgpu_hal</code> instance from this <code>Instance</code>.DbGet the <code>wgpu_hal</code> device from this <code>Queue</code>.DeGet the <code>wgpu_hal</code> texture from this <code>Texture</code>.DnGet the <code>wgpu_hal</code> texture view from this <code>TextureView</code>.EaGet the <code>wgpu_hal</code> acceleration structure from this <code>Tlas</code>.fSafety:9876543210BfGet the underlying raw display handle.BeGet the underlying raw window handle.AlReturn a slice to the string0A`The copy aspect.CaAspect of the texture. Color textures must be \xe2\x80\xa61101101101011011110110DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.00000000000000000000000000000000000000000000000000000000000000000000000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000AbAll memory blocks.000BfReturns the buffer this is a slice of.B`The buffer to be copied to/from.AcThe buffer to bind.AiThe buffer to transition.2CjHow should the generated code handle array, vector, or \xe2\x80\xa603AgThe buffer being bound.2454324114424AlThe button that was pressed.AmThe button that was released.CfCode common to the front and backends for specific \xe2\x80\xa60CiCreates a new instance of the component and returns a \xe2\x80\xa6CdReturns a new version of this color that has the \xe2\x80\xa6CdReturns a new version of this brush that has the \xe2\x80\xa610Cf<code>Backend</code>-specific device ID of the adapter0AgThe WGPU device to use.110BcThe WGPU device used for rendering.000kDriver name000BmWhether to allow the noop backend to be used.00000CaExtend the model with the content of the iteratorD`The bitwise or (<code>|</code>) of the bits in each flags value.00000000000000000000000000000000000000000000000000000000000000000000000000000BhRequested texture extent. Must be in \xe2\x80\xa60CnReturns a new Model where the elements are filtered by the \xe2\x80\xa6DkFinishes recording and returns a <code>CommandBuffer</code> that can be \xe2\x80\xa6DjFinishes recording and returns a <code>RenderBundle</code> that can be \xe2\x80\xa6CiPrepare currently mapped buffers for use in a submission.210DiThis macro is the same as <code>std::format!</code>, but it returns a \xe2\x80\xa6C`Returns the format of this <code>Texture</code>.CjThe texture format of the swap chain. The only formats \xe2\x80\xa6AfFormat of the texture.CnFormat of the texture view. Either must be the same as the \xe2\x80\xa6DgThe <code>TextureFormat</code> of the image that this pipeline will \xe2\x80\xa6CmFormat of the depth/stencil buffer, must be special depth \xe2\x80\xa6AcFormat of the inputAiFormat of the attachment.5DkFormat of the texture view, or <code>None</code> for the same format as \xe2\x80\xa6AoFormat of the surface textures.5438672779AoFormat of the external texture.987654380216549780388CjIf Some(), this operation is a gather operation on the \xe2\x80\xa6000ChThis function provides access to instances of global \xe2\x80\xa600CmRaw handle to the acceleration structure, used inside raw \xe2\x80\xa60BjReturns the height of the image in pixels.AfThe height in logical.AnThe height in physical pixels;C`Returns the height of this <code>Texture</code>.CjHeight of the swap chain. Must be the same size as the \xe2\x80\xa6AdHeight of the extent10BhThe display height of the selected mode.3AoHeight of the external texture.3203201765ClInserts a row at position index. All rows after that are \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in two flags values.0BcInserts specified flag(s) into self111111111111BbInsert a new value into the arena.222222222222222222222222221222222222222022222222222222222222222222CfCall the given callback or function with the argumentsAaForward to invokeCcWhether all known bits in this flags value are set.0BmReturns whether the struct has all flags set.11111111111111111111111111111111111111011111111111111111111111111111111111111CeReturns <code>true</code> for BCn compressed formats.0CaReturns <code>true</code> if only one flag is set0AgRange of layers to use.0BnThe layout of the texture data in this buffer.DeThe <code>BindGroupLayout</code> that corresponds to this bind group.BlThe layout of bind groups for this pipeline.022000011000221000222000011002BlLength in code units (in bytes) of the span.000CjThe best limits which can be used to create devices on \xe2\x80\xa6BlThe limits which can be used on this device.AaAdditional limits02100ChPerform a lookup for a variable named <code>name</code>.0BjThe compiled shader module for this stage.0000AaShader module IR.1111111101DgReturns the offset in <code>Self::buffer()</code> this slice starts at.BoThe offset in the buffer where the copy starts.BdBase offset of the buffer, in bytes.Ck0-based Offset in code units (in bytes) of the start of \xe2\x80\xa6BeByte offset of the start of the inputClOffset into the buffer that is the start of the texture. \xe2\x80\xa6BjOffset from the beginning from the struct.3B`This must be a const-expression.10CmThe byte offset within the push constant storage to write \xe2\x80\xa6BlThe offset at which the bound region starts.CjThe offset in bytes of the allocation in its memory block.965:98765473CmThe offset in the push constant memory block this uniform \xe2\x80\xa6543321:76CjConfigures the texture to be rendered vertically mirrored.DiThe base texel of the texture in the selected <code>mip_level</code>. \xe2\x80\xa60DeThe base texel of the texture in the selected <code>mip_level</code>.10ClOrigin within a texture. Note: for 1D and 2D textures, Z \xe2\x80\xa6212212121021CnHLSL binding information for a buffer holding the sampling \xe2\x80\xa6CgReturns the number of planes a multi-planar format has.0CkHLSL binding information for the individual plane textures.CcRecall all of the closed buffers back to be reused.0CmReload the component from the .slint file. If there is an \xe2\x80\xa6C`Remove the row at the given index from the modelCeThe intersection of a source flags value with the \xe2\x80\xa60BcRemoves specified flag(s) from self11111111111111111111111111111111111111011111111111111111111111111111111111111BlRender the window to the given frame buffer.ChResize the array to the given size. If the array was \xe2\x80\xa6CmThis function is called by the renderers when the surface \xe2\x80\xa61BdThe result of this function, if any.Dg<code>AtomicResult</code> expression representing this function\xe2\x80\x99s \xe2\x80\xa6DgThe <code>WorkGroupUniformLoadResult</code> expression representing \xe2\x80\xa6DjThe <code>SubgroupBallotResult</code> expression representing this load\xe2\x80\xa6DiThe <code>SubgroupOperationResult</code> expression representing this \xe2\x80\xa60432100432100432100EdA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.000BlReturn the scalar type of <code>self</code>.0BnAn X11 screen to use with this display handle.000ChCompletes the backend selection process and tries to \xe2\x80\xa60AbShader MSL source.BdBinary SPIR-V data, in 4-byte words.AcShader HLSL source.AcShader DXIL source.AkSource code for the shader.B`Lower level source of the error.00AnThe source code of the shader.634521110CmStage push constant range is visible from. Each stage can \xe2\x80\xa6000CmThe byte stride in the buffer between one attribute value \xe2\x80\xa60CkSubmits a series of finished command buffers for execution.CiSubmit <code>command_buffers</code> for execution on GPU.10BgReturns the string name of the backend.0DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60BaToggles specified flag(s) in self11111111111111111111111111111111111111011111111111111111111111111111111111111CdConvenience function that returns a new strongly \xe2\x80\xa60DiExtend this <code>Layouter</code> with layouts for any new entries in \xe2\x80\xa60CnBitflag of supported texture usages for the surface to use \xe2\x80\xa6000Cf<code>Backend</code>-specific vendor ID of the adapter000CmThe compiled vertex stage, its entry point, and the input \xe2\x80\xa6BnThe vertex processing state for this pipeline.010AeVulkan API internals.0CjReturns the Window associated with this component. The \xe2\x80\xa6AgReturns the window API.1BaA pointer to an orbclient window.AlAn Xlib <code>Window</code>.BaAn X11 <code>xcb_window_t</code>.2104CdHandle to a physical graphics and/or compute device.0BeA raw display handle for Android NDK.0AkBackends supported by wgpu.000AeMemory barrier flags.000CfDescribes how an input/output variable is to be bound.000AiBuilt-in shader variable.AlBuilt-in inputs and outputs.110100CgFlag used by the wgpu-core texture tracker to say a \xe2\x80\xa60CkBinding is visible from the compute shader of a compute \xe2\x80\xa60BoDuplicate and compact an acceleration structure0AeComposite expression.000DjA two dimensional array texture. <code>texture_2d_array</code> in WGSL \xe2\x80\xa6000CgThe binding layout is derived from the pipeline layout.0Ag<code>core</code> GLSL.ClDiscards the resulting value of the render pass for this \xe2\x80\xa600000BeThe array size can change at runtime.0C`The number of elements is determined at runtime.01100B`Helper class to emit expressions0AlFloat values with width = 8.0DfOne half-precision float (no Rust equiv). <code>f32</code> in shaders.000CnOne single-precision float (f32). <code>f32</code> in shaders.000DkOne double-precision float (f64). <code>f32</code> in shaders. Requires \xe2\x80\xa6000AcThe forward button.CkFunction passes if new value is greater than existing value000CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa6000CmUsed internally by wgpu functions to indicate the encoder \xe2\x80\xa60CbExtension trait, adding JSON serialization methodshLiteral.000AoThe position in logical pixels.BbThe size in logical screen pixels.10CiPresentation frames are kept in a single-frame queue. \xe2\x80\xa6000AgType of buffer mapping.0CeModelRc is a type wrapper for a reference counted \xe2\x80\xa6AjNearest neighbor sampling.000ClThe combination of all usages that the are guaranteed to \xe2\x80\xa6000BnA raw window handle for the OpenHarmony OS NDK0BgConfiguration for the whole parser run.0BnConfiguration used in the <code>Writer</code>.0CcA raw window handle for the Redox operating system.CdA raw display handle for the Redox operating system.10BfReady to present image to the surface.0ChAll the apis that wgpu offers first tier of support for.0BiThe array size is an override-expression.000AhPointer to another type.000BfPrivate data, per invocation, mutable.000CjStart or continue the query given by the statement\xe2\x80\x99s \xe2\x80\xa6000CkRed channel only. 16 bit integer per channel. Signed in \xe2\x80\xa6000CmRed channel only. 16 bit integer per channel. Unsigned in \xe2\x80\xa6000CkRed channel only. 32 bit integer per channel. Signed in \xe2\x80\xa6000CmRed channel only. 32 bit integer per channel. Unsigned in \xe2\x80\xa6000CmRed channel only. 64 bit integer per channel. Unsigned in \xe2\x80\xa6000CnRed channel only. 8 bit integer per channel. [\xe2\x88\x92127, 127] \xe2\x80\xa6000CiRed channel only. 8 bit integer per channel. [0, 255] \xe2\x80\xa6000CmDefault blending state that replaces destination with the \xe2\x80\xa6CkBlend mode that does no color blending, just overwrites \xe2\x80\xa610CeRay flags used when casting rays. Matching vulkan \xe2\x80\xa600DcRay flags, for a <code>RayDesc</code>\xe2\x80\x99s <code>flags</code> field.10ClReplace stencil value with value provided in most recent \xe2\x80\xa6000AgThe window was resized.CmRed and green channels. 8 bit integer per channel. Signed \xe2\x80\xa6000CfRed and green channels. 8 bit integer per channel. \xe2\x80\xa6000AfFormat can be sampled.0Adshuffle, shuffle xor0DkAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a \xe2\x80\xa6D`Barrier affects all <code>AddressSpace::Storage</code> accesses.10AfRegular sampled image.000AeBinding is a sampler.BoA sampler that can be used to sample a texture.BiCan be used to sample values from images.0121001AdHandle to a sampler.0ClEach gathers from a different lane at the index given by \xe2\x80\xa6000CoTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.000D`Four signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.000CjOne signed short (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa6000AaA storage buffer.BiStorage buffer data, potentially mutable.nStorage image.102210102ClOperation to perform to the output attachment at the end \xe2\x80\xa600000B`Handle to a presentable surface.0oVector swizzle.000CeBarrier synchronizes texture memory accesses in a \xe2\x80\xa60AbA texture binding.000AoHandle to a texture on the GPU.0CnA timeout was encountered while trying to acquire the next \xe2\x80\xa6CjThe requested Wait timed out before the submission was \xe2\x80\xa6BhUnable to get the next frame, timed out.1021010CnThe top-left of the texture is the top-left of the texture \xe2\x80\xa6DkAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a \xe2\x80\xa6BgA uniform buffer bound in a bind group.10CnFlag used by the wgpu-core texture tracker to say that the \xe2\x80\xa60DaTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.000DbFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.000AlA buffer for uniform values.AdUniform buffer data.011001BiThe surface status is not known since \xe2\x80\xa6CkThe device was lost for an unspecific reason, including \xe2\x80\xa6101010ClOne unsigned short (u16). [0, 65535] converted to float [\xe2\x80\xa6000oA GLSL version.AbA warning message.0BbThe diagnostic found is a warning.B`A raw window handle for Wayland.BaA raw display handle for Wayland.10AoA raw display handle for Win32.0AhThe WGPU adapter to use.0A`Android backend.BgCreate an Android-based display handle.AkReturns a new weak pointer.00AgBackend used for deviceBjReturns the backend this adapter is using.BiReturns the backend this device is using.1221012ClSlot for which binding provides resource. Corresponds to \xe2\x80\xa6ChBinding index. Must match shader index and be unique \xe2\x80\xa6BeFor I/O structs, defines the binding.B`Binding number within the group.BiFor resources, defines the binding point.CnFor entry points, an argument has to have a binding unless \xe2\x80\xa6CmFor entry points, the result has to have a binding unless \xe2\x80\xa643210665654321043210EhCreate a new <code>hal::BufferBinding</code> for the buffer with <code>offset</code> \xe2\x80\xa6776ClThe format of any vertex buffers used with this pipeline \xe2\x80\xa6CiThe format of any vertex buffers used with this pipeline.0100AaASTC RGBA channel000CiCreates a new configuration where the shader is fully \xe2\x80\xa60A`Command EncodingDfRemove most unused objects from <code>module</code>, which must be \xe2\x80\xa60CnIf this is enabled, this is a comparison sampler using the \xe2\x80\xa6CiComparison function that determines if the fail_op or \xe2\x80\xa610110101DcCompile the <code>.slint</code> file and generate rust code for it.BcReturns the underlying EGL context.CfIf provided, converts to the specified byte width. \xe2\x80\xa6000AhConstruct an empty modelCdCreates a new instance of wgpu with default options.BoConstructs a new symbol table with a root scope10ClThe amount of logical pixels to scroll in the horizontal \xe2\x80\xa6CjThe amount of logical pixels to scroll in the vertical \xe2\x80\xa6CfDestroy the associated native resources as soon as \xe2\x80\xa6AdDestroy this device.11011BjA pointer to an Xlib <code>Display</code>.BgA pointer to a <code>wl_display</code>.10DfUses of <code>Features</code> prefixed with \xe2\x80\x9cEXPERIMENTAL\xe2\x80\x9d may \xe2\x80\xa6BiThe resources to bind to this bind group.BhArray of entries in this BindGroupLayout11010110DkRe-implement to intercept the <code>ApplicationHandler::exiting()</code>\xe2\x80\xa6CdOperation that is performed when stencil test fails.000ClList of supported formats to use with the given adapter. \xe2\x80\xa6BbList of supported texture formats.1101CcGet a mutable reference to an element in the arena.0CcReturns the names of all exported global singletonsCfReturns <code>true</code> for ASTC compressed formats.0BkReturns <code>true</code> for srgb formats.0CjThis <code>PollType</code> represents a wait of some kind.0CnOperation to perform to the output attachment at the start \xe2\x80\xa600000AoMarker types for each resource.0AhThe text of the message.0BdReturn a message for this diagnosticBkA pointer to an <code>NSView</code> object.0BgCreate an Orbital-based display handle.CfOperation that is performed when stencil test success.000AkPointer to an atomic value.EeThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space101010CgSchedule this texture to be presented on the owning \xe2\x80\xa6mPresentation.10BfReplace an old value with a new value.0DjReserves capacity for at least <code>additional</code> bytes more than \xe2\x80\xa60DgReturn the number of elements that <code>size</code> represents, if \xe2\x80\xa6BhDetermine the type of <code>expr</code>.10CnRestarts the timer. If the timer was previously started by \xe2\x80\xa6DkRe-implement to intercept the <code>ApplicationHandler::resumed()</code>\xe2\x80\xa6CmReturns a new Model where the elements are reversed. This \xe2\x80\xa6CfReturns true if the timer is running; false otherwise.CkHandle to the associated sampler global variable, if it \xe2\x80\xa6AoReplace inner Vec with new dataClReturns a new Model where the elements are sorted by the \xe2\x80\xa6nStencil state.ClWhat operations will be performed on the stencil part of \xe2\x80\xa6011001EfModifies <code>self</code> to contain the smallest <code>Span</code> possible that \xe2\x80\xa60BgA pointer to a <code>wl_surface</code>.0BfThe color state of the render targets.CnThe effect of draw calls on the color aspect of the output \xe2\x80\xa60100CfThis module contains a few functions used by the testsDnReturns the <code>Texture</code> that this <code>TextureView</code> refers to.BaThe texture to be copied to/from.AmAccessible view of the frame.AjThe texture to transition.2222022321022BdHandle to the image global variable.3333133C`Max time to wait for the submission to complete.0BkConverts this color to the HSV color space.0AhConvert to a JSON objectCnReturns the pixel buffer for the Image if available in RGB \xe2\x80\xa60ClReturn WGSL source code representation of <code>self</code>.0CfGet access to the raw resource if it is not destroyed.0BkA pointer to an <code>UIView</code> object.0CmReturns a new strongly referenced component if some other \xe2\x80\xa60BnMapping between names and attribute locations.AlThe GLSL version to be used.BhWGPU 26.x specific types and re-exports.BhWGPU 27.x specific types and re-exports.BfCreate a Windows-based display handle.BoThis type can be passed as a function argument.0BhGroup, binding, and location attributes.0BkRepresents the backends that wgpu will use.000CfAllow a buffer to be the destination buffer for a [\xe2\x80\xa6CcThe destination of a hardware copy. cbindgen:ignoreCaAllows a texture to be the destination in a  [\xe2\x80\xa61AhFormat can be copied to.32120CaAllow a buffer to be the source buffer for a [\xe2\x80\xa6BnThe source of a hardware copy. cbindgen:ignoreBkAllows a texture to be the source in a [\xe2\x80\xa61AjFormat can be copied from.32120CiInterpolate the value at a point that lies within all \xe2\x80\xa6000CkThis is the entry point of the crate, it can be used to \xe2\x80\xa6hConstantAkThe array size is constant.oConstant value.0102210010200DiSkips to the <code>continuing</code> block of the innermost enclosing \xe2\x80\xa6000BaCreate the swapchain with the \xe2\x80\xa60gD.alpha000Ae<code>es</code> GLSL.BfExtent of a texture related operation.000AaExternal texture.0CkBinding is visible from the fragment shader of a render \xe2\x80\xa60CaFeatures that are not guaranteed to be supported.000ClStructure used to encode additions to GLSL that aren\xe2\x80\x99t \xe2\x80\xa6BmA error occurred while writing to the output.A`Function locals.AcA regular function.BaA function defined in the module.2210200CkAllow a buffer to be the indirect buffer in an indirect \xe2\x80\xa6CfThe indirect or count buffer in a indirect draw or \xe2\x80\xa610BgVertex data is advanced every instance.000CeContext for all other wgpu objects. Instance of wgpu.CjContains the various entry points to start interacting \xe2\x80\xa6AkCatch only internal errors.ChInternal error. Used for signalling any failures not \xe2\x80\xa6B`A <code>GPUInternalError</code>.210CeHelper processor that derives the sizes of all types.0CiVertex data is a list of lines. Each pair of vertices \xe2\x80\xa6000AaIndexed location.000CmAdapter that uses the least possible power. This is often \xe2\x80\xa6000CbAllow a buffer to be mapped for reading using [\xe2\x80\xa6BdThe argument to a read-only mapping.10ClProvides rows that are generated by a map function based \xe2\x80\xa6BmThe texture is laid out densely in memory as:000CkExtension trait with extra methods implemented on types \xe2\x80\xa6CiFunction passes if new value is not equal to existing \xe2\x80\xa6000CnNo adapter available via the instance\xe2\x80\x99s backends matched \xe2\x80\xa6000BaOrigin of a copy from a 2D image.000BcOrigin of a copy to/from a texture.000CnThe underlying surface has changed, and therefore the swap \xe2\x80\xa6BmThe surface under the swap chain has changed.0100AnPipeline-overridable constant.0000000B`The position in physical pixels.AlThe size in physical pixels.10CfThis trait defines the interface between Slint and \xe2\x80\xa6DgPassed to <code>Device::poll</code> to control how and if it should \xe2\x80\xa6000AiVia assignments + barrier0CcThe binding layout is provided by the user in BGLs.0ClEach gathers from the opposite quad lane along the given \xe2\x80\xa6000AfHandle to a query set.0ChRed channel only. 16 bit float per channel. Float in \xe2\x80\xa6000ClRed channel only. 16 bit integer per channel. [\xe2\x88\x9232767, \xe2\x80\xa6000ClRed channel only. 16 bit integer per channel. [0, 65535] \xe2\x80\xa6000ChRed channel only. 32 bit float per channel. Float in \xe2\x80\xa6000BfRead-only sampled or fetched resource.0BdLocally used handle for ray queries.000CmThe texture can only be read in the shader and it must be \xe2\x80\xa6000ClThis trait represents a Renderer that can render a slint \xe2\x80\xa6ClA Repeated timer is fired repeatedly until it is stopped \xe2\x80\xa6CeReplace out-of-bounds indexes with some arbitrary \xe2\x80\xa6000CnRed and green channels. 16 bit integer per channel. Signed \xe2\x80\xa6000CgRed and green channels. 16 bit integer per channel. \xe2\x80\xa6000CnRed and green channels. 32 bit integer per channel. Signed \xe2\x80\xa6000CgRed and green channels. 32 bit integer per channel. \xe2\x80\xa6000CjRed and green channels. 8 bit integer per channel. [\xe2\x88\x92\xe2\x80\xa6000CnRed and green channels. 8 bit integer per channel. [0, 255]\xe2\x80\xa6000AhRotate 90\xc2\xb0 to the rightCkAllows compute and fragment shaders to use the subgroup \xe2\x80\xa60ChSupport for subgroup operations. Implies support for \xe2\x80\xa611ChSupport for subgroup operations (except barriers) in \xe2\x80\xa6CeThe sampling qualifiers of a binding or struct field.000CbA severity set on a <code>DiagnosticFilter</code>.0DaTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.000DbFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.000CoTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.000DaThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.000D`Four signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.000ClTwo signed bytes (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x80\xa6000CmFour signed bytes (i8). [\xe2\x88\x92127, 127] converted to float [\xe2\x80\xa6000gS.alpha000BjStencil format with 8 bit integer stencil.000iSrc - Dst000BhIntersecting with triangles. Matches \xe2\x80\xa6000CmA table of types for an <code>Arena&lt;Expression&gt;</code>.0DcTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.000DdFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.000DaTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.000DcThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.000DbFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.000ChReturned when attempting to end a pass if the parent \xe2\x80\xa60CnTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]\xe2\x80\xa6000CnFour unsigned bytes (u8). [0, 255] converted to float [0, 1\xe2\x80\xa6000DeA slice of all variants of <code>ImplementedLanguageExtension</code>.0EfA <code>Model</code> backed by a <code>Vec&lt;T&gt;</code>, using interior mutability.AjRequest an ES 3.0 context.00000AjRequest an ES 3.1 context.00000AjRequest an ES 3.2 context.00000DfWrapper class for <code>Error</code>, augmenting it with a list of \xe2\x80\xa60BfAdds a new variable to the root scope.0CiAligns a <code>value</code> to an <code>alignment</code>.000DfAllocate a staging belt slice with the given <code>size</code> and \xe2\x80\xa60CeConvert inner error into another type. Joins span \xe2\x80\xa60AkThe value to broadcast overAiThe value to compute over101010BlReturns the pixels interpreted as raw bytes.ClReturns the bytes representation of the struct, ready to \xe2\x80\xa6000001AkReturn a slice to the arrayBaReturn a slice to the pixel data.10AmA pointer to a BWindow object0BjThe backends to use for the WGPU instance.BfWhich <code>Backends</code> to enable.001000CdReturns a new version of this color that has the \xe2\x80\xa6CdReturns a new version of this brush that has the \xe2\x80\xa610AgThe stream of commands.000CnConstant depth biasing factor, in basic units of the depth \xe2\x80\xa6000CmWhether all set bits in a source flags value are also set \xe2\x80\xa60DoWhether all the bits set in <code>other</code> are all set in <code>self</code>1111111111111111111111111EjReturn <code>true</code> if any of <code>self</code>\xe2\x80\x99s policies are <code>policy</code>.222222222222212222222222222222222222222220CbReturns whether the set contains the given string.CkReturns whether the set contains the given string, with \xe2\x80\xa644444444444Cgreturn true if the point is inside the (potentially \xe2\x80\xa6BaContents of a buffer on creation.0CiThese default limits are guaranteed to to work on all \xe2\x80\xa60DfUses of <code>Features</code> prefixed with \xe2\x80\x9cEXPERIMENTAL\xe2\x80\x9d are \xe2\x80\xa6BdPath to <code>dxcompiler.dll</code>.00000ClWhether to create a cache without data when the provided \xe2\x80\xa60ClThe features which can be used to create devices on this \xe2\x80\xa6BnThe features which can be used on this device.10BcFetch a handle to an existing type.0CiThe compiled fragment stage, its entry point, and the \xe2\x80\xa6C`The fragment processing state for this pipeline.01100CeChoose which DX12 shader compiler to use from the \xe2\x80\xa6ChChoose which minor OpenGL ES version to use from the \xe2\x80\xa60ChGet a power preference from the environment variable \xe2\x80\xa6ChGets a set of backends from the environment variable \xe2\x80\xa632210CdChoose which presentation system to use from the \xe2\x80\xa6CnChoose whether to use a frame latency waitable object from \xe2\x80\xa6ChCreate an new instance of wgpu from a wgpu-hal instance.DkOnly use this function in contexts where there is no <code>Device</code>\xe2\x80\xa6ClCreate an new instance of wgpu from a wgpu-hal instance. \xe2\x80\xa61fSafety00000ClCreate a pixel from the red, gree, blue component in the \xe2\x80\xa6AfThe entrance function.000kGeometries.0CnGet the data associated with this pipeline cache. The data \xe2\x80\xa60BbGet info about the adapter itself.0CdReturn the span associated with <code>handle</code>.0B`Types for dealing with InstancesAiThe WGPU instance to use.10BeThe WGPU instance used for rendering.0AcReturn the instance11CmReturns the interval of the timer. If the timer was never \xe2\x80\xa6CbCoerce the identifiers into its raw underlying \xe2\x80\xa60BhReturn true if the SharedVector is emptyBbReturn true if the String is emptyBoWhether all bits in this flags value are unset.0BeReturns whether there is no flag set.111111111111CkReturn <code>true</code> if the arena contains no elements.ClReturns <code>true</code> if the arena contains no elements.3333333333333CoReturn true if <code>self</code> is the empty set of overloads.444444444444434444444444442144444444444444404444444444465BbReturns true for strip topologies.0CkReturns a iterator over the items stored in this arena, \xe2\x80\xa60CmLists of reserved keywords for each shading language with \xe2\x80\xa60BoWhere in the source code the message points at.DfReturn a <code>SourceLocation</code> for this span in the provided \xe2\x80\xa6DhReturn a <code>SourceLocation</code> for our first span, if we have one.DjReturns a <code>SourceLocation</code> for the first label in the error \xe2\x80\xa63210CcThe location of the global. This corresponds to \xe2\x80\xa6CaCalculates the maximum possible count of mipmaps.0BaFunction may kill the invocation.0CaThe messages from the shader compilation process.0DjHelper method that generates a <code>NameKey</code> for a local in the \xe2\x80\xa60AiCreate a new gles versionCnFor each callback declared at the root of the component, a \xe2\x80\xa6CfThis module contains items that you need to use or \xe2\x80\xa6AbPolls all devices.0ChReturns the position of the window on the screen, in \xe2\x80\xa60CaThe position of the cursor for this event, if any1AnAppend a string to this string0AnType for <code>RayDesc</code>.000CaFor regular bindings this is the register number.AdReturn the renderer.BaResource to attach to the binding00000CjRound <code>n</code> up to the nearest alignment boundary.0BfReturns the data for a particular row.CgAn optional selector to transition only part of the \xe2\x80\xa6000BlSet the bottom level acceleration structure.0CnResizes the window to the specified size on the screen, in \xe2\x80\xa6CnRequest a new size for the window to the specified size on \xe2\x80\xa61ClOperation to perform to the output attachment at the end \xe2\x80\xa600000DcMaps this <code>LanguageExtension</code> into the sentinel word \xe2\x80\xa6DiMaps this <code>ImplementedLanguageExtension</code> into the sentinel \xe2\x80\xa6DaMaps this <code>EnableExtension</code> into the sentinel word \xe2\x80\xa621D`Converts <code>self</code> to a range if the span is not unknown0CjReturns the pixel buffer for the Image if available in \xe2\x80\xa60CbThe primitive topology used to interpret vertices.000DiAttempt to calculate the size of this type. Returns <code>None</code> \xe2\x80\xa6BlMapping between uniform variables and names.BcCheck the given module to be valid.0CmConstruct a <code>Self::WaitForSubmissionIndex</code> variantCgTakes the given options, modifies them based on the \xe2\x80\xa6CeTakes the given flags, modifies them based on the \xe2\x80\xa61111CfTakes the given compiler, modifies it based on the \xe2\x80\xa60022122220002CmTakes the given presentation system, modifies it based on \xe2\x80\xa6CeTakes the given setting, modifies it based on the \xe2\x80\xa6CnA newtype struct where its only valid values are powers of \xe2\x80\xa60AaSize of an array.000AeASTC block dimensions000BhChooses the first supported mode out of:000DgUse <code>Automatic</code> if you want to let Slint select the WGPU \xe2\x80\xa6CfNo explicit minor version is requested, the driver \xe2\x80\xa6001000CkIf not present, the texture can\xe2\x80\x99t be blended into the \xe2\x80\xa60Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60000000AjHandle to a binding group.0CkAll gather from the same lane at the index given by the \xe2\x80\xa6000jConstants.0DeThe clip board, used in <code>Platform::clipboard_text</code> and \xe2\x80\xa6DhA cubemap array texture. <code>texture_cube_array</code> in WGSL and \xe2\x80\xa6000fDepth.000CfThe device\xe2\x80\x99s <code>destroy</code> method was called.000C`Utility methods not meant to be in the main API.0AfDisplay-P3 color space000AmError validating a draw call.0ClThe combination of states that a buffer must exclusively \xe2\x80\xa6CmThe combination of states that a texture must exclusively \xe2\x80\xa610ChAttempted to obtain adapter specified by environment \xe2\x80\xa6000ClA classification of WebGPU error for implementers of the \xe2\x80\xa60CiA collection of Vulkan fences, each associated with a \xe2\x80\xa60ChThe sampling result is produced based on more than a \xe2\x80\xa6000DnTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in \xe2\x80\xa6000DoFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in \xe2\x80\xa6000DkTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.000DmThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.000DlFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.000DoTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. \xe2\x80\xa6000EaThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. \xe2\x80\xa6000E`Four double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. \xe2\x80\xa6000CnVertex winding order which classifies the \xe2\x80\x9cfront\xe2\x80\x9d face \xe2\x80\xa6000CcIntersecting with generated primitives. Matches \xe2\x80\xa6000BhIndicates how a global variable is used.0DeThe combination of states that a buffer may be in <em>at the </em>\xe2\x80\xa6DfThe combination of states that a texture may be in <em>at the </em>\xe2\x80\xa610AkLoad a texel from an image.000CkPresentation frames are not queued at all. The moment a \xe2\x80\xa6000CeThe types of the acceleration structure are instances0CiFunction passes if new value is less than or equal to \xe2\x80\xa6CmShader may rewrite depth smaller than one that would have \xe2\x80\xa6011001CmVertex data is a strip of lines. Each set of two adjacent \xe2\x80\xa6000CbAllow a buffer to be mapped for writing using [\xe2\x80\xa6BeThe argument to a write-only mapping.10DkEnables multiview render passes and <code>builtin(view_index)</code> in \xe2\x80\xa60BlSupport for <code>BuiltIn::ViewIndex</code>.110CjDescribes the mesh shader stage in a mesh shader pipeline.CdDescribes the mesh shader in a mesh shader pipeline.CmRepresent a handle to a view that listens to changes to a \xe2\x80\xa6ClThe full window is always redrawn. No attempt at partial \xe2\x80\xa6CcGet the number of array layers, a <code>u32</code>.000CdGet the number of mipmap levels, a <code>u32</code>.000CgQuery returns a single 64-bit number, serving as an \xe2\x80\xa6000CiVertex data is a list of points. Each vertex is a new \xe2\x80\xa6000B`Error states after a device poll000BjThe winit event should propagate normally.0CcType of query contained in a <code>QuerySet</code>.000CdSupport for ray queries and acceleration structures.0B`Raw window &amp; display handle.0CnThe texture can be both read and written in the shader and \xe2\x80\xa6000CnRed and green channels. 16 bit float per channel. Float in \xe2\x80\xa6000CkRed and green channels. 16 bit integer per channel. [\xe2\x88\x92\xe2\x80\xa6000CkRed and green channels. 16 bit integer per channel. [0, \xe2\x80\xa6000CnRed and green channels. 32 bit float per channel. Float in \xe2\x80\xa6000CkConvenience alias for a pixel with three color channels \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa60000000CnRgbaColor stores the red, green, blue and alpha components \xe2\x80\xa60Al180\xc2\xb0 rotation (upside-down)AgRotate 90\xc2\xb0 to the leftCmAll the apis that wgpu offers second tier of support for. \xe2\x80\xa60CiBarrier synchronizes execution across all invocations \xe2\x80\xa60AoCannot write the generated fileCmEach gathers from their lane minus the shift given by the \xe2\x80\xa6000CkTwo signed shorts (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa6000ClFour signed shorts (i16). [\xe2\x88\x9232767, 32767] converted to \xe2\x80\xa6000CmProvides a sorted view of rows by another <code>Model</code>.hS1.alpha000BoInstructions which make up an executable block.000BeThe statically-linked variant of Dxc.00000BlEnables subgroup built-ins in all languages.BnThe command buffer has already been submitted.0CjDescribes the task shader stage in a mesh shader pipeline.CdDescribes the task shader in a mesh shader pipeline.CnThe TimerMode specifies what should happen after the timer \xe2\x80\xa6CnQuery returns a 64-bit number indicating the GPU-timestamp \xe2\x80\xa6000AjTriangle geometry version.0CeThe types of the acceleration structure are triangles110CdTypes that may be able to return the WGSL source \xe2\x80\xa60DcFlags associated with <code>Type</code>s by <code>Validator</code>.0CnEnum with additional information, depending on the kind of \xe2\x80\xa6000BcShader may not rewrite depth value.000ClNaga adds no checks to indexing operations. Generate the \xe2\x80\xa6000CmTwo unsigned shorts (u16). [0, 65535] converted to float [\xe2\x80\xa6000CnFour unsigned shorts (u16). [0, 65535] converted to float [\xe2\x80\xa6000Cm8 bit integer RGBA, Srgb-color [0, 255] converted to/from \xe2\x80\xa6000CmThis enum represents the different public variants of the \xe2\x80\xa6CgA raw window handle for a Web canvas registered via \xe2\x80\xa60AoWorkgroup shared data, mutable.000CeThe texture can only be written in the shader and it:000CmThe property exists but does not have a type matching the \xe2\x80\xa6AeZero value of a type.000BdInformation about function argument.000DhOptional <code>blend_src</code> index used for dual source blending. \xe2\x80\xa6000BmReturns the size in bytes of the index format0CeReturns the names of all publicly declared callbacks.CjAll flags that indicate if the backend is WebGPU compliant0CnReturn the component definition for the given name. If the \xe2\x80\xa6AbBoolean expression000CbInitializes <code>Surface</code> for presentation.CgConfigure <code>self</code> to use <code>device</code>.10CmSpecifies the values of pipeline-overridable constants in \xe2\x80\xa6BoArena for the constants defined in this module.011AbPipeline constants211220AfThe face culling mode.000CjThis function is called when debug() is used in .slint \xe2\x80\xa6CbEnable recommended debugging and validation flags.0CnWhat operations will be performed on the depth part of the \xe2\x80\xa60CcReturns the dimension of this <code>Texture</code>.AjDimensions of the texture.ClThe dimension of the texture view. For 1D textures, this \xe2\x80\xa61BbThe dimension of the texture view.123212012gSafety:0CeFormat this type using <code>core::fmt::Debug</code>.0BoReturn an object that can be formatted with \xe2\x80\xa6110AjConvert from a bits value.0DkTakes in <code>FeatureBits</code> and returns None if there are invalid \xe2\x80\xa611111111111111111111111111111111111111011111111111111111111111111111111111111CiCreate an new instance of wgpu from a wgpu-core instance.0CmConstruct a color from the hue, saturation, and value HSV \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in each flags value.00000000000000000000000000000000000000000000000000000000000000000000000000000BkConvert to JSON object to <code>Self</code>ClGet a flags value with the bits of a flag with the given \xe2\x80\xa60CmTakes in a name and returns Self if it matches or none if \xe2\x80\xa611111111111111111111111111111111111111011111111111111111111111111111111111111CgCreates a new Image from the specified shared pixel \xe2\x80\xa60BoArena for the functions defined in this module.000CeReturns the names of all publicly declared functions.BfGet the value for a given struct fieldCkThis module contains the code for the highlight of some \xe2\x80\xa6E`The <code>GWLP_HINSTANCE</code> associated with this type\xe2\x80\x99s <code>HWND</code>.0CnReturns true if this is a handle to a type rather than the \xe2\x80\xa60CjReturns true if the fence behavior is <code>Normal</code>.0BjReturns true if this brush is fully opaque0ClMap the buffer to host (CPU) memory, making it available \xe2\x80\xa6000AkMap on the wait index type.0ClTakes a closure and maps the label of the command buffer \xe2\x80\xa6CdTakes a closure and maps the label of the device \xe2\x80\xa6CdTakes a closure and maps the label of the buffer \xe2\x80\xa6CmTakes a closure and maps the label of the command encoder \xe2\x80\xa6CeTakes a closure and maps the label of the texture \xe2\x80\xa6CkTakes a closure and maps the label of the render bundle \xe2\x80\xa6CgTakes a closure and maps the label of the query set \xe2\x80\xa6CmTakes a closure and maps the label of the blas descriptor \xe2\x80\xa60CkTakes a closure and maps the label of the shader module \xe2\x80\xa687654CnTakes a closure and maps the label of the external texture \xe2\x80\xa643221BiThe minimum column width (logical length)BdThe target mip level of the texture.000000000000000CfReturns the mip level range of a subresource range \xe2\x80\xa60CjIf this render bundle will rendering to multiple array \xe2\x80\xa6CnIf the pipeline will be used with a multiview render pass, \xe2\x80\xa610000100CjHow many views to render to, if doing multiview rendering.2111CkThe binary operation applied to the source and destination,000CkArena for the pipeline-overridable constants defined in \xe2\x80\xa6000CcThis function may consume a lot of stack space. \xe2\x80\xa60CgRemoves the current lexical scope and all its variables0CaThe value from this thread to store in the ballot000AcThe preferred size.ClThe properties of the pipeline at the primitive assembly \xe2\x80\xa6000000000AjThe query set to write to.0BiThe query set to write the timestamps to.110CnStencil values are AND\xe2\x80\x99d with this mask when reading and \xe2\x80\xa6000CeIf true, the relevant channel is not changed by a \xe2\x80\xa6DhIf <code>true</code>, the buffer can only be read in the shader, and it:0100CiThe number of direct references to this expression in \xe2\x80\xa60DdReclaim all resources belonging to this <code>CommandEncoder</code>.0BeNotify the peers that rows were addedAoThe number of rows in the modelBeSet the value of a given struct fieldBfSets the style to be used for widgets.0CfHow often this vertex buffer is \xe2\x80\x9cstepped\xe2\x80\x9d forward.00000BaRe-implement to intercept the \xe2\x80\xa6CiProduce the stride as if this type is a base of an array.0CkAdds color space and premultiplied alpha information to \xe2\x80\xa60CjAffine transform matrix 3x4 (rows x columns, row major \xe2\x80\xa60CjReturn the name to be used for the type referred to by \xe2\x80\xa60ClCreates a new configuration where none of the checks are \xe2\x80\xa60BcAn Xlib visual ID, or 0 if unknown.BcAn X11 <code>xcb_visualid_t</code>.10BkWinit 0.30.x specific types and re-exports.B`Add a new span with description.0Aareductions, scans0CgThere is already a rendering notifier set, multiple \xe2\x80\xa6CkThe platform has already been initialized in an earlier \xe2\x80\xa61BdA raw window handle for Android NDK.0DkFences in OpenGL are short-circuited to always return <code>true</code> \xe2\x80\xa600000CjAllows a buffer to be used as input for a bottom level \xe2\x80\xa60BbWidth of a boolean type, in bytes.0Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa60000000CkBlue, green, red, and alpha channels. 8 bit integer per \xe2\x80\xa6000CfDirect3D 12 binding information for a global variable.BgMapping between resources and bindings.CiDescribe the blend state of a render pipeline, within \xe2\x80\xa6000CiThe bottom-left of the texture is the top-left of the \xe2\x80\xa6CfIntegral type used for <code>BufferSlice</code> sizes.000CkSimilar to <code>BufferUsages</code>, but used only for \xe2\x80\xa6000BnA read-only view of a mapped buffer\xe2\x80\x99s bytes.0AkNames of vector components.0BcResult of calling another function.000AoSPIR-V operand kind: Capability0BkError encountered while attempting a clear.0ClUse as a comparison sampler instead of a normal sampler. \xe2\x80\xa6000BgThe result type of a <code>Rule</code>.0BbCompute the derivative on an axis.000ClIndicates that device loss occurred. In JavaScript, this \xe2\x80\xa60B`Supported physical device types.000CgThis structure represent a diagnostic emitted while \xe2\x80\xa6BmThe Dxc compiler is new, fast and maintained.00000CeThe raw files in .slint files are embedded in the \xe2\x80\xa6DoAn <code>EntryPoint</code>, and its index in <code>Module::entry_points</code>.BgThe main function for a pipeline stage.1000CfAn expression that can be evaluated to obtain a value.000CiIf not present, the texture can\xe2\x80\x99t be sampled with a \xe2\x80\xa60BoTexel mixing mode when sampling between texels.000DaThe specific behavior of a <code>SubgroupGather</code> statement.000BjThe Window will be hidden (default action)0A`Image size queryAlSub-class of the image type.000B`Query information from an image.AgType of an image query.110100BaStores a texel value to an image.000BlInitialize the <code>RayQuery</code> object.000CkThe return value of the <code>spawn_local()</code> function0EdConfiguration option for <code>compact</code>. See <code>compact</code> for details.0AbA key was pressed.DgA case-sensitive set of strings, for use with <code>Namer</code> to \xe2\x80\xa6CnOptimize for low memory footprint (both while building and \xe2\x80\xa60BmThe texture is laid out densely in memory as:000CdDon\xe2\x80\x99t use this error type with thiserror\xe2\x80\x99s #[\xe2\x80\xa60AcNaga shader module.0CmNo default platform was selected, or no platform could be \xe2\x80\xa600kNo rotationBnGet the number of samples, a <code>u32</code>.000BkAn open connection to a device and a queue.CkPair of load and store operations for an attachment aspect.000BiAnother platform-specific error occurred.00B`Status of device poll operation.000BnSize in bytes of a single piece of query data.CkSize of a single occlusion/timestamp query, when copied \xe2\x80\xa61101BkError encountered when dealing with queries0CgThere are no active submissions in flight as of the \xe2\x80\xa6000AkCall a relational function.000ClIn-progress recording of a render pass: a list of render \xe2\x80\xa6CnA pass\xe2\x80\x99s encoder state and its validity are two distinct \xe2\x80\xa610ClRed, green, blue, and alpha channels. 16 bit integer per \xe2\x80\xa60000000ClRed, green, blue, and alpha channels. 32 bit integer per \xe2\x80\xa60000000CjConvenience alias for a pixel with four color channels \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa60000000CnAllows shaders to use 16-bit floating point types. You may \xe2\x80\xa6000CfEnables 64-bit floating point types in SPIR-V shaders.000DjAllows shaders to use i16. Not currently supported in <code>naga</code>\xe2\x80\xa6000BaSkip axis-aligned bounding boxes.0AlPrimitive type for a scalar.000CeRight shift carries the sign of signed integers only.000ClEach gathers from their lane xored with the given by the \xe2\x80\xa6000BfA SingleShot timer is fired only once.CfInternal type used by the winit backend for thread \xe2\x80\xa6CmThe color variant of brush is a plain color that is to be \xe2\x80\xa60CmErrors produced when validating a programmable stage of a \xe2\x80\xa60ChThe swap chain is operational, but it does no longer \xe2\x80\xa6000AnA case for a switch statement.000CgAllows a buffer to be used as input for a top level \xe2\x80\xa60BjSize and alignment information for a type.0BeUniform control flow characteristics.0AoEnable validation, if possible.CbEnable validation in the backend API, if possible:AmCatch only validation errors.CfValidation error, signifying a bug in code or data \xe2\x80\xa6BbA <code>GPUValidationError</code>.210BaNumber of components in a vector.000CiHow a render pipeline will retrieve attributes from a \xe2\x80\xa60AaVirtual / Hosted.000DbBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.0CjThe size of a window represented in either physical or \xe2\x80\xa60CmSpecifies how the alpha channel of the textures should be \xe2\x80\xa6000CkGet the binding resource for the underling acceleration \xe2\x80\xa60CnReturns the inner hal CommandEncoder using a callback. The \xe2\x80\xa6EdGet the <code>wgpu_hal</code> command encoder from this <code>CommandEncoder</code>.CkConfigures the compiler to treat the Slint as part of a \xe2\x80\xa6BkMacros for validation internal to the wgpu.0CfThe list of attributes which comprise a single vertex.00000BkThe background color or brush of the WindowClPixel which will be filled as the background in case the \xe2\x80\xa6CjThe number of bytes one texel block occupies during an \xe2\x80\xa60DiCreate a <code>DisplayHandle</code> from a <code>RawDisplayHandle</code>.DgBorrow a <code>WindowHandle</code> from a <code>RawWindowHandle</code>.EdConvert the scalar leaves of  <code>expr</code> to <code>target</code>, handling \xe2\x80\xa60DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa60B`Bitwise not - <code>!self</code>11111111111111111111111111111111111111011111111111111111111111111111111111111CaReturns the number of components this format has.0CaReturns an iterator over the compiled components.CgA pointer to an X server <code>xcb_connection_t</code>.0CmThe coordinate of the texel we wish to load. This must be \xe2\x80\xa60000000BgThe width of the copy region in pixels.000DgReturn the <code>ComponentDefinition</code> that was used to create \xe2\x80\xa6CbA struct of detailed parameters for the ray query.000CeThe intersection of a source flags value with the \xe2\x80\xa60DgBitwise and of the complement of other - <code>self &amp; !other</code>11111111111111111111111111111111111111011111111111111111111111111111111111111CjMultiplier for the destination, which is stored in the \xe2\x80\xa6000ChReturns true if variants are same (ignoring clear value)0CiThe extensions to enable for the device. You must not \xe2\x80\xa6CkThe extensions to enable for the instance. You must not \xe2\x80\xa610DhIf this is <code>false</code>, the texture can\xe2\x80\x99t be sampled with a \xe2\x80\xa6000ClConvert from a sentinel word in WGSL into its associated \xe2\x80\xa60BmReturns the texture aspect for a given plane.0CgCreates a new Image from the specified shared pixel \xe2\x80\xa60BaAllocate a new model from a sliceBbCreate a SharedVector from a slice0fPanics0CmThe face to consider the front for the purpose of culling \xe2\x80\xa6000CjReturns true if the window should be shown fullscreen; \xe2\x80\xa6oThe gbm device.0DjReturn this arena\xe2\x80\x99s value at <code>handle</code>, if that is a valid \xe2\x80\xa60CmReturns true if the compilation failed. The errors can be \xe2\x80\xa6CjHow should the generated code handle image texel loads \xe2\x80\xa6000CmWhether any set bits in a source flags value are also set \xe2\x80\xa60DkReturns whether any bit set in <code>self</code> matched any bit set in \xe2\x80\xa611111111111111111111111111111111111111011111111111111111111111111111111111111AjExtracts the inner vector.DdReverse of <code>Self::new</code>, discards span information and \xe2\x80\xa610BlConvert inner error using <code>From</code>.0CkRecompute the type resolution for <code>expr_handle</code>.0DfReturns whether or not <code>n</code> is a multiple of this alignment.0DhCheck whether <code>self</code> was defined or is a default/unknown span0BlReturns true if the stencil test is enabled.BmReturns true if the depth biasing is enabled.CnReturns true if the user has agreed to access experimental \xe2\x80\xa621ChReturns true if this timestamp is the invalid timestamp.0CmReturns the visibility state of the window. This function \xe2\x80\xa60BlYield a set of contained named flags values.0CgReturns an iterator over the set flags and their names.11111111111111111111111111111111111111011111111111111111111111111111111111111CkHow to filter the texture when it needs to be magnified \xe2\x80\xa600000CjReturn a pointer to CPU memory mapping the contents of \xe2\x80\xa60CjHow to filter the texture when it needs to be minified \xe2\x80\xa600000BaRe-implement to intercept the \xe2\x80\xa6ChNumber of planes. 1 indicates a single RGBA plane. 2 \xe2\x80\xa6ChThe number of underlying planes used by the external \xe2\x80\xa6CnReturns an iterator over all publicly declared properties. \xe2\x80\xa6AiAdds a new lexical scope.0ChGet the range of handles from a particular number of \xe2\x80\xa60fSafety00000ClThe number of bytes to write. This must be a multiple of \xe2\x80\xa600A`Sorts the columnCgMultiplier for the source, which is produced by the \xe2\x80\xa6000CeThe intersection of a source flags value with the \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000Db<code>true</code> if the acquired buffer can still be used for \xe2\x80\xa6ChThe presentation configuration no longer matches the \xe2\x80\xa60100CgConverts this color to an RgbaColor struct for easy \xe2\x80\xa60CkConvert this physical position to a logical position by \xe2\x80\xa6ClConvert this physical size to a logical size by dividing \xe2\x80\xa6DaTurn the <code>WindowSize</code> into a <code>LogicalSize</code>.210DiReturns the smallest <code>Span</code> possible that contains all the \xe2\x80\xa60BlWhether this expression is uniform, and why.AkUniformity characteristics.10CnReturns the type variant that this value holds without the \xe2\x80\xa6BiWhich shader stages can see this binding.000ClReturns a new version of this color with the opacity set \xe2\x80\xa6CmReturns a new version of this brush with the related color\xe2\x80\xa610CkCreate a new configuration that selects the style to be \xe2\x80\xa6CcMask which enables/disables writes to different \xe2\x80\xa6CmStencil values are AND\xe2\x80\x99d with this mask when writing to \xe2\x80\xa6101010DdWrite the type <code>ty</code> as it would appear in a value\xe2\x80\x99s \xe2\x80\xa60AkWGSL abstract integer type.000EgAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known \xe2\x80\xa6000AmInformation about an adapter.000CbHow edges should be handled in texture addressing.000CnGet the length of an array. The expression must resolve to \xe2\x80\xa6000AaASTC RGBA channel000BhChooses the first supported mode out of:000DjSupports non-zero <code>base_vertex</code> parameter to direct indexed \xe2\x80\xa60BiType of a binding in a bind group layout.000AcAlpha blend factor.000BiBinding is backed by an array of buffers.0DfA slice of a <code>Buffer</code>, to be mapped, used for vertex or \xe2\x80\xa60AeCull opaque geometry.0BjClamp the value to the edge of the texture000CiColor write mask. Disabled color channels will not be \xe2\x80\xa6000BhIn-progress recording of a compute pass.CnA pass\xe2\x80\x99s encoder state and its validity are two distinct \xe2\x80\xa610CeWhat kind of WGSL thing <code>Self</code> represents.0n8 byte floats.ChSpecial depth format with at least 24 bit integer depth.000BjDiscrete GPU with separate CPU/GPU memory.000AmDoc comments preceding items.000DfBase trait for all resources, allows downcasting via <code>Any</code>.0lExpressions.0Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa60000000EaKinds of <code>Error</code>s a <code>Device::push_error_scope()</code> may be \xe2\x80\xa60B`Lower level source of the error.0BcReturned by callbacks passed to \xe2\x80\xa6CmHash map that is faster but not resilient to DoS attacks. \xe2\x80\xa60CmHash set that is faster but not resilient to DoS attacks. \xe2\x80\xa60BmBits from <code>Features</code> in array form0CnPresentation frames are kept in a First-In-First-Out queue \xe2\x80\xa6000DaProvides a filtered subset of rows by another <code>Model</code>.CmHelper structure that stores data needed when writing the \xe2\x80\xa60CfThis enum describes a low-level access to specific \xe2\x80\xa60D`<code>wgpu-hal</code>\xe2\x80\x99s part of <code>InternalCounters</code>.000CnAn error that can occur while fetching a display or window \xe2\x80\xa60CjPerforms an atomic operation on a texel value of an image.000BoSample a point from a sampled or a depth image.000BeFormat of indices used with pipeline.000ChError returned by <code>ComponentInstance::invoke</code>AcA key was released.CiA size represented in the coordinate space of logical \xe2\x80\xa60CiHints to the device about the memory allocation strategy.000BdFavor memory usage over performance.000DfDispatch notifications from a <code>Model</code> to one or several \xe2\x80\xa6Aa1.0 - D.component000Aa1.0 - S.component000l[0, 0, 0, 1]000l[1, 1, 1, 1]000B`Catch only out-of-memory errors.nOut of memory.CeThere is no more memory left to allocate a new frame.BcA <code>GPUOutOfMemoryError</code>.3210CkA trait for types representing of a set of Naga IR type \xe2\x80\xa60CnDescribes an individual channel within a render pass, such \xe2\x80\xa60ChFavor performance over memory usage (the default value).000CkThe value will be interpolated in a perspective-correct \xe2\x80\xa6000BaType of drawing mode for polygons000CfA type that should be registered in the module\xe2\x80\x99s \xe2\x80\xa60CfTiming and queueing with which frames are actually \xe2\x80\xa6000ClRed, green, blue, and alpha channels. 10 bit integer for \xe2\x80\xa6000CjA 16bit pixel that has 5 red bits, 6 green bits and  5 \xe2\x80\xa6CjRed, green, blue, and alpha channels. 16 bit float per \xe2\x80\xa6000CmRed, green, blue, and alpha. 16 bit integer per channel. [\xe2\x80\xa6000ClRed, green, blue, and alpha channels. 16 bit integer per \xe2\x80\xa6000CjRed, green, blue, and alpha channels. 32 bit float per \xe2\x80\xa6000CaSampling modifier to control the level of detail.000mShader input.0ClCollections of shader features a device supports if they \xe2\x80\xa6000AlA HLSL shader model version.BcStage of the programmable pipeline.000ClEach gathers from their lane plus the shift given by the \xe2\x80\xa6000CeA source code span together with \xe2\x80\x9ccontext\xe2\x80\x9d, a \xe2\x80\xa60CjEfficiently performs many buffer writes by sharing and \xe2\x80\xa60hStencil.000AmThe value of the switch case.000CkStructure responsible for managing variable lookups and \xe2\x80\xa60CnThis is used to define the column and the column header of \xe2\x80\xa6AlThe pixel type of the bufferBbTrait for the pixels in the bufferClSimilar to <code>TextureUsages</code>, but used only for \xe2\x80\xa6000AoBinding is backed by a texture.0AiHandle to a texture view.0BmA context for printing Naga IR types as WGSL.0BgThe underlying handle is not available.0CdAn arena whose elements are guaranteed to be unique.0CkThe rendering backend does not support rendering notifiers.0CeDescribes the vertex processing in a render pipeline.CbDescribes the vertex process in a render pipeline.10DhA trait for querying the <code>ErrorType</code> classification of an \xe2\x80\xa60CiA event that describes user input or windowing system \xe2\x80\xa6AaWorkaround flags.0C`Configuration flags for the <code>Writer</code>.CmGL uniform name for the item. This name is the same as if \xe2\x80\xa6CgAll live allocations, sub-allocated from memory blocks.DiThe range of allocations in <code>AllocatorReport::allocations</code> \xe2\x80\xa61101CgList of supported alpha modes to use with the given \xe2\x80\xa6000DhThe index into an arrayed image. If the <code>arrayed</code> flag in \xe2\x80\xa60000000CmAttach one peer. The peer will be notified when the model \xe2\x80\xa60ClThe value added to the vertex index before indexing into \xe2\x80\xa6000gSafety:0CbMap of resources to information about the binding.CgHLSL binding information for each Naga global variable.CbMap of resources association to binding locations.2fSafety0BlBlend a color to all the pixel in the slice.BnSets the <code>BlendState</code> that is used.B`The color space of this texture.000000BhThe height of the copy region in pixels.000BgA WinRT <code>CoreWindow</code> handle.0CmCreate a bottom level acceleration structure, used inside \xe2\x80\xa60CiThe create info for the device. You may add or modify \xe2\x80\xa6CkThe create info for the instance. You may add or modify \xe2\x80\xa610CkCreate a top level acceleration structure, used for ray \xe2\x80\xa60CaCreates a view of this texture, specifying an \xe2\x80\xa60CeCustom index for the instance used inside the shader.0CfThe depth slice index of a 3D view. It must not be \xe2\x80\xa600000BdDescription of the validation error.BfDescription of the internal GPU error.10BfDescriptor for each triangle geometry.000DeCheck <code>device_id</code> for freeable resources and completed \xe2\x80\xa60nType of device000CjReturns the diagnostics that were produced in the last \xe2\x80\xa6BhReturn an iterator over the diagnostics.kDriver info000CkReturns the EGL version the adapter context was created \xe2\x80\xa6BgReturns the version of the EGL display.kEntrypoint.00CjThe name of the entry point in the compiled shader to use.00AlThe name of the entry point.CkThe name of the entry point in the compiled shader. The \xe2\x80\xa60CmThe name of the entry point in the compiled shader. There \xe2\x80\xa6444AnEntrypoint. Unused for Spir-V.44444AiThe entry point to write.4413321BfExpressions used inside this function.CjThe expression arena of the current function being written1101ClNumber of indexes to skip in the index buffer (optional, \xe2\x80\xa6BhThe first index within the index buffer.0100ChConstruct a color from the red, green and blue color \xe2\x80\xa60DdCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.0A`The gbm surface.0CkA getter is generated for each property declared at the \xe2\x80\xa6CnNumber of indices. Only needed if an index buffer is used. \xe2\x80\xa6AnThe number of indices to draw.011001CdReturn the index range covered by <code>self</code>.0CeReturn true if <code>self</code> is an abstract type.0DgChecks if the task associated with this <code>JoinHandle</code> has \xe2\x80\xa60ChThe byte size required to fit the last vertex in the \xe2\x80\xa60ClReturns the layer range of a subresource range describes \xe2\x80\xa60ClReturns a tuple with the line (starting at 1) and column \xe2\x80\xa6Ad1-based line number.000D`Return the <code>Type</code> referred to by <code>handle</code>.0CiChecks that we are operating within the memory budget \xe2\x80\xa60BnThe multi-sampling properties of the pipeline.000000000BgGenerating names for predeclared types.0CgReturns the EGLDisplay corresponding to the adapter \xe2\x80\xa6BmAsynchronously read the contents of a buffer.0CnAdds the requirement to the selector that the backend must \xe2\x80\xa60C`Notify the peers that a specific row was changedBgNotify the peers that rows were removedCgSpecify the Rust module to place the generated code in.CkReturns the sample type compatible with this format and \xe2\x80\xa6BcSample type of the texture binding.01BlSets the <code>Sampler</code> Filtering Mode11CkA setter is generated for each property declared at the \xe2\x80\xa6ChShow the window if the argument is true, hide otherwise.CjStarts the timer with the duration and the callback to \xe2\x80\xa6CnThis crate serves as a companion crate of the slint crate. \xe2\x80\xa6AkSlope depth biasing factor.000Cjreturn the path of the source file where this error is \xe2\x80\xa6D`Spawns a <code>Future</code> to execute in the Slint event loop.0ClWhat operations will be performed on the stencil part of \xe2\x80\xa60BcStrings used by debug instructions.000fSafety0CgConverts this color to an RgbaColor struct for easy \xe2\x80\xa60CkConvert this logical position to a physical position by \xe2\x80\xa6DjTurn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.CcConvert this logical size to a physical size by \xe2\x80\xa6DbTurn the <code>WindowSize</code> into a <code>PhysicalSize</code>.3210CaRemoves the colorspace information from the type.0DoReturn the WGSL form of <code>self</code> as a <code>&#39;static</code> string.0DhReturn the <code>TypeLoader</code> used when parsing the code in the \xe2\x80\xa6CeUnconfigure <code>self</code> on <code>device</code>.0ChUpdate mode for the bottom level acceleration structure.00000000000BmInitialize a resolve context from the module.0CfAllow for incremental updates (no change in size), \xe2\x80\xa60BbAttempt to set an output property.AnAddressing space of variables.000AnResult of an atomic operation.000Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000000000000000AbArray of bindings.000BiDifferent ways that you can use a buffer.000BeThe capabilities of the noop backend.BaThe color target of a renderpass.0AhAllowed IR capabilities.0CnParse error. The error are printed in the stderr, and also \xe2\x80\xa6CcError returned by the <code>compile</code> functionDa<code>wgpu-core</code>\xe2\x80\x99s part of <code>InternalCounters</code>.000BoSpecial depth format with 16 bit integer depth.000CfSpecial depth format with 32 bit floating point depth.000CgA callback to signal that wgpu is no longer using a \xe2\x80\xa60BjSelects which DX12 shader compiler to use.00000CjUse a DXGI swapchain made directly from the window\xe2\x80\x99s \xe2\x80\xa60========C`Force all intersections to be treated as opaque.0E`Insertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but \xe2\x80\xa60DmInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but \xe2\x80\xa60CaFeatures that are not guaranteed to be supported.000CjWhether we\xe2\x80\x99re generating an entry point or a regular \xe2\x80\xa60ClFunction passes if new value is greater than or equal to \xe2\x80\xa6CkShader may rewrite depth only with a value greater than \xe2\x80\xa6011001ClAn index that may be statically known, or may need to be \xe2\x80\xa60CkCan be be used for user-defined IO between pipeline stages.0CmThe texture usage must include TEXTURE_BINDING as well as \xe2\x80\xa60BbBuilt-in shader function for math.000BmRepeat the texture, mirroring it every repeat000CnThis trait defines the interface that users of a model can \xe2\x80\xa6BcThe rendering is done using OpenGL.0CkThe sampling result is produced based on a single color \xe2\x80\xa6000CiThe underlying handle cannot be represented using the \xe2\x80\xa60Ab1.0 - S1.component000CjA size represented in the coordinate space of physical \xe2\x80\xa60BhThe position of the pointer has changed.BkIf possible, perform an incremental update.000oPush constants.000ClThe above set of reserved keywords, turned into a cached \xe2\x80\xa60BoPre-prepared reusable bundle of GPU operations.0CbError encountered while trying to resolve a query.0CnOnly redraw the parts that have changed since the previous \xe2\x80\xa6CgProvides a reversed view of another <code>Model</code>.ClRed, green, blue, and alpha channels. 10 bit integer for \xe2\x80\xa6000CjPacked unsigned float with 9 bits mantisa for each RGB \xe2\x80\xa6000BbAllows shaders to use i64 and u64.0C`Support for 64-bit signed and unsigned integers.110BjBinding is backed by an array of samplers.0BcHandle to a compiled shader module.0AjSource of a shader module.0CnDescribes the shader stages that a binding will be visible \xe2\x80\xa600AaValidation flags.10BiA string type used by the Slint run-time.00Cm(Re-export from corelib.) A string type used by the Slint \xe2\x80\xa6ClSharedVector holds a reference-counted read-only copy of \xe2\x80\xa6Cb(Re-export from corelib.) SharedVector holds a \xe2\x80\xa6ClSet of special types that can be optionally generated by \xe2\x80\xa6000CfState of the stencil operation (fixed-pipeline stage).000BcMember of a user-defined structure.000BeResult of an unsuccessful call to \xe2\x80\xa60BeA texture or buffer to be freed soon.0AiSafe instance for a Tlas.0CnVertex data is a list of triangles. Each set of 3 vertices \xe2\x80\xa6000CnFour unsigned 8-bit integers, packed into a 32-bit integer \xe2\x80\xa6000ClSupports specifying which view format values are allowed \xe2\x80\xa60AnPointer to a scalar or vector.000CiVertex Format for a <code>VertexAttribute</code> (input).000CjThis data structure provides settings for initializing \xe2\x80\xa60DeSuper trait for window handles as used in <code>SurfaceTarget</code>.0AgThe handle to a window.CnThis struct represents a persistent handle to a window and \xe2\x80\xa610BnReturns the adapter info for the noop backend.CoReturn a list of the types allowed for argument <code>i</code>.0DfHelper method that generates a <code>NameKey</code> for a function \xe2\x80\xa60CiThe stride, in bytes, between elements of this buffer \xe2\x80\xa6CfThe stride, in bytes, between elements of this buffer.0100CmAdds the requirement that the selected backend must match \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in two flags values.00000000000000000000000000000000000000000000000000000000000000000000000000000CiBorder color to use when <code>address_mode</code> is \xe2\x80\xa6BlBorder color to use when address_mode is \xe2\x80\xa61101ClIf given, the set of capabilities modules are allowed to \xe2\x80\xa60CjCompares every limits within self is within the limits \xe2\x80\xa60AfClears buffer to zero.0CkReturns a clone of this handle that\xe2\x80\x99s a strong reference.00BdCompact a BLAS, it must have had \xe2\x80\xa60CjThe ID of the connector associated with the selected mode.0CdIf set to true, the primitives are rendered with \xe2\x80\xa6ChSpecifies restrictions on how the depth value can be \xe2\x80\xa6011001ClThe drawing context type used on the HTML Canvas element \xe2\x80\xa60AfSource codes for debug0BaRe-implement to intercept the \xe2\x80\xa6CjThe label for the device. This is used to identify the \xe2\x80\xa60mDoc comments.000CnDraws indexed primitives using the active index buffer and \xe2\x80\xa600000AiReturns the EGL instance.DhReturn a fresh <code>CommandBuffer</code> holding the recorded commands.0mEntry points.000CkIf true, the control flow continues to the next case in \xe2\x80\xa6000CkOffset into the vertex buffer as a factor of the vertex \xe2\x80\xa6BfThe Index of the first vertex to draw.0100CiConstruct a color from the alpha, red, green and blue \xe2\x80\xa60CnConvert a given logical position to a physical position by \xe2\x80\xa6CfConvert a given logical size to a physical size by \xe2\x80\xa610ChConstruct a color from the red, green and blue color \xe2\x80\xa60CiReturn the value for a public property of this component.AgForward to get_propertyCbLoad WGSL source code from a file at compile time.0AhIndex buffer (optional).0CkFormat of an index. Only needed if an index buffer is used.000DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.0BkBitwise and - <code>self &amp; other</code>11111111111111111111111111111111111111011111111111111111111111111111111111111CnFor each callback declared at the root of the component, a \xe2\x80\xa6BlReturns if the window is currently maximizedCktrue if the window is in a maximized state, otherwise false1BlReturns if the window is currently minimizedCktrue if the window is in a minimized state, otherwise false1CiReturns true if the state doesn\xe2\x80\x99t mutate the target \xe2\x80\xa6CnReturns true if the state doesn\xe2\x80\x99t mutate either depth or \xe2\x80\xa6CnReturns true if the face state doesn\xe2\x80\x99t mutate the target \xe2\x80\xa6210DcReturns <code>(major, minor)</code> of the SPIR-V language version.Bl(Major, Minor) target version of the SPIR-V.10C`This is an internal module that contains the \xe2\x80\xa6BgHints for memory allocation strategies.00000AhThe type of the message.0CmTrue if the texture has a sample count greater than 1. If \xe2\x80\xa6000CmCreates a new external adapter using the specified loader \xe2\x80\xa6CnControls the way each polygon is rasterized. Can be either \xe2\x80\xa6000CnPresentation mode of the swap chain. Fifo is the only mode \xe2\x80\xa6AnVertical synchronization mode.1101CmCalled once per line, you will have to call the render_fn \xe2\x80\xa6fSafety0ClThe display refresh rate of the selected mode multiplied \xe2\x80\xa60CkIf this expression requires uniform control flow, store \xe2\x80\xa60CiHelper method that resolves a type of a given expression.0CfReturns the sample_count of this <code>Texture</code>.CkSample count of texture. If this is not 1, texture must \xe2\x80\xa6CkSample count this render bundle is capable of rendering \xe2\x80\xa61CkSample count this render bundle is capable of rendering to.2321202ClAll pairs of (texture, sampler) globals that may be used \xe2\x80\xa60BaReturns the scalar width in bytes0CfThis function returns the scale factor that allows \xe2\x80\xa6CjThe window system provided scale factor to map logical \xe2\x80\xa61CiSet a handler for the callback with the given name. A \xe2\x80\xa6AgForward to set_callbackCmChange the duration of timer. If the timer was is running \xe2\x80\xa6BaSets the active compute pipeline.B`Sets the active render pipeline.001000BcSet the Slint platform abstraction.CnSets the position of the window on the screen, in physical \xe2\x80\xa600CfSet the value for a public property of this component.CfSet a property and remember its value for when the \xe2\x80\xa6BcSets the data for a particular row.ClSets the viewport used during the rasterization stage to \xe2\x80\xa60CmWhich collections of features shaders support. Defined in \xe2\x80\xa600B`The hlsl shader model to be used1AmThe stage of the entry point.00BfReturns a reference to the inner model000ClThis function is called by the renderers when all OpenGL \xe2\x80\xa6CfRemove the mapping established by the last call to \xe2\x80\xa60CmGets the row index of the underlying unsorted model for a \xe2\x80\xa6AcNumber of vertices.AoThe number of vertices to draw.011001BcThe vertex stage for this pipeline.0ClSpecifies what view formats will be allowed when calling \xe2\x80\xa600CkAllows views of this texture to have a different format \xe2\x80\xa6CiAllows views of swapchain texture to have a different \xe2\x80\xa6222221022BgThe width of the copy region in blocks.000BaRe-implement to intercept the \xe2\x80\xa6DkReturns a future that resolves to the <code>winit::window::Window</code>\xe2\x80\xa6AoAdd a <code>SpanContext</code>.0EoCopies the bytes of <code>data</code> into <code>buffer</code> starting at <code>offset</code>.DhAllocate a staging belt slice of <code>size</code> to be copied into \xe2\x80\xa610DaWrite the <code>Scalar</code> <code>scalar</code> as a WGSL type.0C`Configuration flags for the <code>Writer</code>.AmAbstract floating-point type.000Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000AeWebGPU in the browser000CmIntegral type used for <code>Buffer</code> offsets and sizes.000BjDescribes the segment of a buffer to bind.CfA region of a buffer made visible to shaders via a \xe2\x80\xa610BoA write-only view of a mapped buffer\xe2\x80\x99s bytes.0BcEnables clear to zero for textures.000BoSupport for <code>BuiltIn::ClipDistance</code>.0AjA WGSL constructible type.0BoSupport for <code>BuiltIn::CullDistance</code>.0CiClamp the value to the border of the texture Requires \xe2\x80\xa6000CiEnables the <code>clip_distances</code> variable in WGSL.BaThis API\xe2\x80\x99s command buffer type.0BfHandle to a command buffer on the GPU.CgA buffer of commands to be submitted to the GPU for \xe2\x80\xa6CjCommand buffer type, which performs double duty as the \xe2\x80\xa6210CgThe conical gradient variant of a brush describes a \xe2\x80\xa60CgDecrements stencil value by one, wrapping on underflow.000CiThe handle to the display controller of the windowing \xe2\x80\xa60CbIntegral type used for dynamic bind group offsets.000Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000B`Texture format capability flags.0CgDescribes the fragment processing in a render pipeline.CcDescribes fragment processing in a render pipeline.10CfIncrements stencil value by one, wrapping on overflow.000CjError occurring while trying to create an instance, or \xe2\x80\xa60AiInstance debugging flags.00000BjIntegrated GPU with shared CPU/GPU memory.000CiThe interpolation qualifier of a binding or struct field.000CkThe texture format is not supported. The only supported \xe2\x80\xa60AkReference a local variable.BcVariable defined at function level.110100BeMinimum alignment of buffer mappings.000BaMaximum size of a type, in bytes.DkSynchronize invocations within the work group. The <code>Barrier</code> \xe2\x80\xa6000CdSupport for <code>AddressSpace::PushConstant</code>.0CkHandle to a pipeline cache, which is used to accelerate \xe2\x80\xa60BgThe platform encountered a fatal error.00AnThe pointer exited the window.CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa6000CfAllow a buffer to be the destination buffer for a [\xe2\x80\xa6BeA buffer used to store query results.10ClAll gather from the same quad lane at the index given by \xe2\x80\xa6000BmError encountered while trying to use queries0DoMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.0ClRed, green, and blue channels. 11 bit float with no sign \xe2\x80\xa6000CiA temporary buffer, consumed by the command that uses it.0AjFlags describing an image.000AeImage storage format.000BeStatus of the received surface image.000CjThe window/canvas/surface/swap-chain/etc. a surface is \xe2\x80\xa60CjSelects a subset of the data a <code>Texture</code> holds.000CjFormat in which a texture\xe2\x80\x99s texels are stored in GPU \xe2\x80\xa6000BjDifferent ways that you can use a texture.000CcError encountered while attempting a data transfer.0CfVertex data is a triangle strip. Each set of three \xe2\x80\xa6000B`The texture is in unknown state.0DkUse <code>BlasTriangleGeometry::transform_buffer</code> when building a \xe2\x80\xa60C`Operation that can be applied on a single value.000CdThe requested Wait was satisfied before the timeout.000CjThis trait represents the adaptation layer between the \xe2\x80\xa6BaRe-implement to intercept the \xe2\x80\xa6CmHow to deal with out of bounds accesses in the u (i.e. x) \xe2\x80\xa60DdMake an <code>TexelCopyTextureInfo</code> representing the whole \xe2\x80\xa60CnHow should the generated code handle binding array indexes \xe2\x80\xa6000DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.00000000000000000000000000000000000000000000000000000000000000000000000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000ClEnforce bounds checks in shaders, even if the underlying \xe2\x80\xa6000fSafety0ClAmount of allocated gpu memory attributed to buffers, in \xe2\x80\xa6000BmThe total number of bytes in the copy region.000B`Bytes per \xe2\x80\x9crow\xe2\x80\x9d in an image.000CdDetermine which policy applies to <code>base</code>.0CnWhether the sampling operation should clamp each component \xe2\x80\xa6000AgClears texture to zero.0AjHow to combine the results000CiThe formats of the color attachments that this render \xe2\x80\xa6000CnThe effect of draw calls on the color aspect of the output \xe2\x80\xa600AbCompare two types.0DiLimit <code>self</code> to overloads whose arguments are all concrete \xe2\x80\xa60AnCreates a <code>Buffer</code>.AeCreates a new buffer.10CkComparison function used to compare depth values in the \xe2\x80\xa6000CiOperation that is performed when depth test fails but \xe2\x80\xa6000CkInformation about the depth attachment that this render \xe2\x80\xa6CmThe effect of draw calls on the depth and stencil aspects \xe2\x80\xa6100001001000fSafety0CnDraws primitives from the active vertex buffer(s) based on \xe2\x80\xa600000CiConstruct a color from the alpha, red, green and blue \xe2\x80\xa6022CcConvert to JSON encoded string to <code>Self</code>CnConvert a given physical position to a logical position by \xe2\x80\xa6CfConvert a given physical size to a logical size by \xe2\x80\xa610CmGet a mutable slice to a range of instances. Returns None \xe2\x80\xa60DhReturns the value of the <code>user_name</code> property declared in \xe2\x80\xa6BhThe height of the copy region in blocks.000CgReturns the include paths the component compiler is \xe2\x80\xa60CgCall the given callback or function within a global \xe2\x80\xa6AhForward to invoke_globalCaReturns <code>true</code> for compressed formats.0BmReturns if the window is currently fullscreenCjReturns true if the window should be shown fullscreen; \xe2\x80\xa61CiReturns true if the statement directly terminates the \xe2\x80\xa60ClReturns an iterator over the items stored in this arena, \xe2\x80\xa60CgReturns the library paths the component compiler is \xe2\x80\xa60Ck1-based column in code units (in bytes) of the start of \xe2\x80\xa6000BoMaximum level of detail (i.e. mip level) to use00000BoMinimum level of detail (i.e. mip level) to use00000CnReturn the largest number of arguments in any type rule in \xe2\x80\xa60CnNumber of instances that can be stored in the acceleration \xe2\x80\xa600000ClReturn the smallest number of arguments in any type rule \xe2\x80\xa60BdHow to filter between mip map levels00000CgThe implementation should return a reference to its \xe2\x80\xa6DiCreates a new SortModel based on the given <code>wrapped_model</code> \xe2\x80\xa6CoConstruct a <code>BufferBinding</code> with the given contents.DbReturn a type rule for each of the overloads in <code>self</code>.0CkCalculates the physical size backing a texture of the given0CnList of supported presentation modes to use with the given \xe2\x80\xa6AoList of supported V-sync modes.1101CjGet the raw Vulkan swapchain associated with this surface.0D`Add an expression\xe2\x80\x99s type to an <code>Arena&lt;Type&gt;</code>.0CnAdds the requirement that the selected renderer must match \xe2\x80\xa60CnAdds the requirement to the selector that the backend must \xe2\x80\xa60BbMaximize or unmaximize the window.0BaMinimize or unminimze the window.0CkAssigns a new value to the <code>user_name</code> property.BcDictionary of special type handles.000EfThis is equivalent to <code>core::assert</code> if the <code>strict_asserts</code> \xe2\x80\xa60CmTakes a snapshot of the window contents and returns it as \xe2\x80\xa60DdMaps this <code>StandardFilterableTriggeringRule</code> into the \xe2\x80\xa60mType MappingsCkReturns true if the state relies on the constant color, \xe2\x80\xa60CbWrite the <code>Value</code> out into a JSON valueDkIndex in <code>push_constant_data</code> of the start of the data to be \xe2\x80\xa600nVertex buffer.0BhFormat of a vertex position, must be \xe2\x80\xa6000CmWhether this acceleration structure can be used to create \xe2\x80\xa6000BgVertex stride, must be greater than \xe2\x80\xa60DiReturns true if the result is either <code>Self::WaitSucceeded</code> \xe2\x80\xa60CjCould the error have been avoided? That is, is there a \xe2\x80\xa60CjReturns a struct that implements the raw window handle \xe2\x80\xa6AkGet a handle to the window.01CmCreate a new empty array with a pre-allocated capacity in \xe2\x80\xa60CjCopies the bytes of <code>data</code> into into a texture.0BbWidth of abstract types, in bytes.0CeBlend mode that does standard alpha blending with \xe2\x80\xa60DfA wrapper around a <code>glow::Context</code> and the required EGL \xe2\x80\xa6ClThe scene of items was rendered, but the back buffer was \xe2\x80\xa60CmPaths specified in .slint files are made absolute and the \xe2\x80\xa6AlFunction on an atomic value.000Di<code>Backend::BrowserWebGpu</code>. Supported when targeting the web \xe2\x80\xa60AmBuffer address space support.BkOptions that are passed to a given backend.00000CkBlue, green, red, and alpha channels. 8 bit integer per \xe2\x80\xa6000BlOperation that can be applied on two values.000DeAn element of a <code>BindGroupDescriptor</code>, consisting of a \xe2\x80\xa6CaBindable resource and the slot to bind it to. \xe2\x80\xa6ocbindgen:ignore210CjError occurred when trying to asynchronously prepare a \xe2\x80\xa60CfBuilds the given sets of geometry into the given Blas.0CbContains the sets of geometry that go into a Blas.0CiDescribes a blend component of a <code>BlendState</code>.000AfAlpha blend operation.000CgAll gather from the active lane with the smallest index000D`Allows the use of <code>@builtin(clip_distances)</code> in WGSL.000AiCull non-opaque geometry.0BgThe user requested to close the window.BcEncodes a series of GPU operations.ClEncoder and allocation pool for <code>CommandBuffer</code>s.10DkSynchronize invocations within the work group. The <code>Barrier</code> \xe2\x80\xa6000CgDecrements stencil value by one, clamping on underflow.000CcDescribes the biasing setting for the depth target.000BfAxis on which to compute a derivative.000ChBinary flags listing features that may or may not be \xe2\x80\xa6000CmCPU accessible buffer used to download data back from the \xe2\x80\xa60AaDXC shader model.00000CmUse a DXGI swapchain made from a DirectComposition visual \xe2\x80\xa60BlExplicitly allows early depth/stencil tests.000Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000DeError returned from the <code>invoke_from_event_loop()</code> and \xe2\x80\xa60BaTrait that is returned by the \xe2\x80\xa6CjExclude elements that are not visible because they are \xe2\x80\xa6DiError type returned from <code>RenderBundleEncoder::new</code> if the \xe2\x80\xa60CnAn adapter with all the information needed to reason about \xe2\x80\xa6CcInformation about an expression in a function body.0CaFeatures that are not guaranteed to be supported.000AbA function result.000AlReference a global variable.BaVariable defined at module level.110100BjCan be used for host-shareable structures.0nInstance indexBfThe number of dimensions an image has.000CjFlags corresponding to the boolean(-ish) parameters to \xe2\x80\xa60AdInclude all elementsCfIncrements stencil value by one, clamping on overflow.000CdEmit <code>OpName</code> for input/output locations.0ChThe linear gradient variant of a brush describes the \xe2\x80\xa60ChError generated if an image cannot be loaded for any \xe2\x80\xa60DiAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.BaFormat can be multisampled by x2.10DiAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.BaFormat can be multisampled by x4.10DiAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.BaFormat can be multisampled by x8.10CdThere is no callback or function with the given nameBhThere is no callback with the given nameBhThere is no property with the given nameBiThere is no property with the given name.CjCannot read environment variable CARGO_MANIFEST_DIR or \xe2\x80\xa6BhAllows the use of pipeline cache objects000CiAllows the use of push constants: small, fast bits of \xe2\x80\xa6000CcA command that can be recorded in a pass or bundle.0DgVariant of <code>EncoderStateError</code> that includes the pass scope.0CkRepresents a rectangular region on the screen, used for \xe2\x80\xa6AlHandle to a pipeline layout.0AfA pointer was pressed.CgThe alpha channel, if it exists, of the textures is \xe2\x80\xa6000CaThe winit event shouldn\xe2\x80\x99t be processed further.0DeEnables the <code>@builtin(primitive_index)</code> attribute in WGSL.CaDescribes the state of primitive assembly and \xe2\x80\xa6000CmThe radial gradient variant of a brush describes a circle \xe2\x80\xa60BfReflection info for entry point names.CbReflection info for texture mappings and uniforms.BjHandle to a rendering (graphics) pipeline.0C`The window has been created and the graphics \xe2\x80\xa60ClThis enum describes the different rendering states, that \xe2\x80\xa60CkRed, green, blue, and alpha channels. 8 bit integer per \xe2\x80\xa6000BlFormat can be sampled with a linear sampler.0CgFormat can be sampled with a min/max reduction sampler.0BhSupport for 16-bit floating-point types.0AiSkip triangular geometry.0ClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6ClAllows a texture to be used with image atomics. Requires \xe2\x80\xa6BmImage atomic enabled storage. cbindgen:ignoreBkFormat can be used as storage with atomics.3210BaHost-shareable structure layouts.0CdIntegral type used for binding locations in shaders.000BcSPIR-V operand kind: SourceLanguage0ClA human-readable representation for a span, tailored for \xe2\x80\xa6000AbA storage texture.000ChCalculate a bitmask using a boolean from each active \xe2\x80\xa6000CiGather a value from another active thread in the subgroup000ChSurface texture that can be rendered to. Result of a \xe2\x80\xa60ChRedraw the part that have changed since the last two \xe2\x80\xa6CnEnables image atomic fetch add, and, xor, or, min, and max \xe2\x80\xa60BhSupport for atomic operations on images.110AdTexture levels queryBbTexture Blitting (Copying) UtilityChMapping between a texture and its sampler, if it exists.CnA trait for converting a value to a <code>SharedString</code>.BoThe result of computing an expression\xe2\x80\x99s type.0BkSupports storage buffers in vertex shaders.0CfWhether a vertex buffer is indexed by vertex or by \xe2\x80\xa6000ClThe position of the window in either physical or logical \xe2\x80\xa60fSafety0ClA hook for when a wgpu-core buffer is created from a raw \xe2\x80\xa60CmHow to deal with out of bounds accesses in the u (i.e. x) \xe2\x80\xa6000CmHow to deal with out of bounds accesses in the v (i.e. y) \xe2\x80\xa6000CmHow to deal with out of bounds accesses in the w (i.e. z) \xe2\x80\xa6000DeValid bits for <code>TextureDescriptor::Usage</code> provided for \xe2\x80\xa6000CnReturns the ref count, upon reaching which this expression \xe2\x80\xa60oBase mip level.0000000BdBegin encoding a new command buffer.0EbReturn the canonical form of <code>self</code>, or <code>None</code> if it\xe2\x80\x99s \xe2\x80\xa60BdFeature flags and backend selection.ChReturns the current interval to internal measure the \xe2\x80\xa6CmReturns a copy of text stored in the system clipboard, if \xe2\x80\xa6BcCreates a new <code>Sampler</code>.0BkCreates a new surface targeting a given \xe2\x80\xa6ClCreates a new surface targeting the given display/window \xe2\x80\xa610BcCreates a new <code>Texture</code>.AfCreates a new texture.10BhCurrent extent of the surface, if known.0CgFree <code>buffer</code> and any GPU resources it owns.0BeDispatch a window event to the scene.0CkGet a handle to the display controller of the windowing \xe2\x80\xa60CkIf the window needs to be redrawn, the callback will be \xe2\x80\xa6BiEmits a summary of the error to a string.000CmEnsures that the OpenGL context is current when returning \xe2\x80\xa6BjBehavior of OpenGL fences. Affects how \xe2\x80\xa600000D`return the first and last handles included in <code>self</code>.0BnThe instance ID of the first instance to draw.0000000BeThe fragment stage for this pipeline.00CjThis module exists only to explain the API of the code \xe2\x80\xa6CjGet a single mutable reference to an instance. Returns \xe2\x80\xa60B`The number of instances to draw.0000000CfThe flags to fine-tune behaviour of the WGPU instance.0CnReturns true if the fence behavior is <code>AutoFinish</code>.0ClReturns true if the result is <code>Self::QueueEmpty</code>.0CkReturns true if this brush contains a fully transparent \xe2\x80\xa60ChLoad an Image from a path to a file containing an image.0CiTransform to apply to <code>ImageLoad</code> coordinates.000BlReturns the pixels interpreted as raw bytes.0CiReturn a mutable slice to the array. If the array was \xe2\x80\xa6CdReturn a mutable slice to the pixel data. If the \xe2\x80\xa610ClVersion of <code>make_spirv</code> intended for use with \xe2\x80\xa60BaRe-implement to intercept the \xe2\x80\xa6DaCalculates the extent at a given mip level. Does <em>not</em> \xe2\x80\xa6BkCalculates the extent at a given mip level.10BdReturn the most preferred candidate.0CkReturns true if the expression is considered emitted at \xe2\x80\xa60CbNumber of workgroups in each dimension x, y and z.00000CmNumber of workgroups in each dimension x, y and z. Unused \xe2\x80\xa600CiRender the window, line by line, into the line buffer \xe2\x80\xa6CjRequests a connection to a physical device, creating a \xe2\x80\xa60CmThis function issues a request to the windowing system to \xe2\x80\xa6CmIssues a request to the windowing system to re-render the \xe2\x80\xa61CnAdds the requirement to the selector that the backend must \xe2\x80\xa6000CeThe view that will receive the resolved output if \xe2\x80\xa600000Bm\xe2\x80\x9cRows\xe2\x80\x9d that make up a single \xe2\x80\x9cimage\xe2\x80\x9d.000CmEnters the main event loop. This is necessary in order to \xe2\x80\xa6CdSpins an event loop and renders the visible windows.1fSafetyBfRuntime checks that should be enabled.010ClSets the active bind group for a given bind group index. \xe2\x80\xa6000D`Sets the bind group at <code>index</code> to <code>group</code>.11110BnSet or unset the window to display fullscreen.0CnSets the application id for use on Wayland or X11 with xdg \xe2\x80\xa605555CmAmount of allocated gpu memory attributed to textures, in \xe2\x80\xa6000B`Convert to a JSON-encoded stringChReturns a new version of this color with the opacity \xe2\x80\xa6ChReturns a new version of this brush with the opacity \xe2\x80\xa610CmGets the row index of the underlying unfiltered model for \xe2\x80\xa6CiThe format of any vertex buffers used with this pipeline.0CjDimension of the texture view that is going to be sampled.0000000CnConfigures the compiler to use Signed Distance Field (SDF) \xe2\x80\xa6BaWorkgroup size for compute stages000DaWrite the WGSL form of <code>override</code> to <code>out</code>.0DfWrite this handle\xe2\x80\x99s index to <code>formatter</code>, preceded by \xe2\x80\xa60CmA report that can be generated for informational purposes \xe2\x80\xa6000CiUse the BackendSelector to configure one of Slint\xe2\x80\x99s \xe2\x80\xa60BkThe scene of items is about to be rendered.0BaHandle to a binding group layout.AbBind group layout.10DcResource to be bound by a <code>BindGroup</code> for use with a \xe2\x80\xa60ChThe device supports compiling and using compute shaders.0CjComparison function used for depth and stencil operations.000BlCompilation information for a shader module.0ClThis trait describes the common public API of a strongly \xe2\x80\xa60AmHandle to a compute pipeline.0CjSupports ARB_shader_draw_parameters on the host, which \xe2\x80\xa6ClA buffer that has been marked as destroyed and is staged \xe2\x80\xa60CkA wrapper for displaying Naga IR terms in debugging output.0CmThis enum describes the level or severity of a diagnostic \xe2\x80\xa6CkRepresents the sets of additional limits on an adapter, \xe2\x80\xa6000CjRaw window handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa60CkAn enable-extension not guaranteed to be present in all \xe2\x80\xa6Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000AlAn external texture binding.0BiBinding is backed by an external texture.11BiHandle to an external texture on the GPU.CdForce all intersections to be treated as non-opaque.0CgRaw window handle for the Linux Generic Buffer Manager.0BiDictate the behavior of fences in OpenGL.00000AeA handle to a window.0CmAdapter that has the highest performance. This is often a \xe2\x80\xa6000ClThe rectangle of an element, which may be rotated around \xe2\x80\xa6BlThe number of elements in an indexable type.000BjAn internal counter for debugging purposes0CmThe close request is rejected and the window will be kept \xe2\x80\xa60CmA position represented in the coordinate space of logical \xe2\x80\xa60DjAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.BbFormat can be multisampled by x16.10EeThe specified <code>Version</code> doesn\xe2\x80\x99t have all required <code>Features</code>.DhD3D12: Add support for <code>num_workgroups</code> builtins via push \xe2\x80\xa60CfThis trait describes the interface GPU accelerated \xe2\x80\xa6CkAllows for bind group binding arrays to be shorter than \xe2\x80\xa60CaSupport for <code>BuiltIn::PrimitiveIndex</code>.0ChA subset of options that are meant to be changed per \xe2\x80\xa6CeA subset of options meant to be changed per pipeline.AgA pointer was released.CgThe wheel button of a mouse was rotated to initiate \xe2\x80\xa6CbPower Preference when choosing a physical adapter.000CeReturn types predeclared for the frexp, modf, and \xe2\x80\xa6000CbA window handle for a particular windowing system.0C`Error encountered when performing a render pass.0CbPipeline binding information for global resources.000iDst - Src000DjAllows a texture to be a <code>BindingType::StorageTexture</code> in a \xe2\x80\xa60CgAllows vertex shaders to use the subgroup operation \xe2\x80\xa6000CfThis an example of the API that is generated for a \xe2\x80\xa6CeSet a range of push constants to values stored in \xe2\x80\xa600B`The index of a queue submission.0DjIdentifier for a particular call to <code>Queue::submit</code>. Can be \xe2\x80\xa60mImage atomicsDhAllows a texture to be a <code>BindingType::Texture</code> in a bind \xe2\x80\xa60AeTexture samples queryClEnables use of Timestamp Queries. These queries tell the \xe2\x80\xa6000ChSpecifies a particular set of subresources in a texture.0CiThree unsigned 10-bit integers and one 2-bit integer, \xe2\x80\xa6000CnBinding is visible from the vertex and fragment shaders of \xe2\x80\xa60AaValidation flags.0BfVertex inputs (attributes) to shaders.000AnRaw window handle for the Web.0AjRaw window handle for Xcb.0BkA pointer to an <code>ANativeWindow</code>.0DiReturn the next texture to be presented by <code>self</code>, for the \xe2\x80\xa60CmA hook for when a wgpu-core texture is created from a raw \xe2\x80\xa60DhAdds an <code>Srgb</code> suffix to the given texture format, if the \xe2\x80\xa60CeMask of all features that are only available when \xe2\x80\xa60CnMask of all features which are part of the upstream WebGPU \xe2\x80\xa60CmReturns <code>(alpha, red, green, blue)</code> encoded as u320CfA pointer to a BDirectWindow object that might be null0ChThe different options that are given to the selected \xe2\x80\xa6CeOptions the control the behavior of various backends.001CfOptions the control the behavior of specific backends.00CjThe number of bytes one texel block occupies during an \xe2\x80\xa60C`Compile a .slint file into a ComponentDefinitionAeCompile a .slint fileCgReturns the names of the components that were compiled.CjIf the depth aspect of the depth stencil attachment is \xe2\x80\xa6000CjThe physical device features to enable. You may enable \xe2\x80\xa60fSafety0CeRelinquish an acquired texture without presenting it.0BbDraws using a mesh shader pipelineDgDynamic offsets consumed by [<code>SetBindGroup</code>] commands in \xe2\x80\xa6000CiSelects how the resources such as images and font are \xe2\x80\xa6AlEnd the current render pass.0CkExecute a render bundle, which is a set of pre-recorded \xe2\x80\xa606CmAdds a value with a check for uniqueness, where the check \xe2\x80\xa60CeReturn an iterator over the individual components \xe2\x80\xa60CmThreshold at which devices will become lost due to memory \xe2\x80\xa600000DhReturn a <code>ConstantEvaluator</code> that will add expressions to \xe2\x80\xa6000BiForces the the expression to not be const0CiDrops the lifetime relationship to the parent command \xe2\x80\xa6000CnGenerates a set of backends from a comma separated list of \xe2\x80\xa60ClConvert from a sentinel word in WGSL into its associated \xe2\x80\xa6000AhGenerates memory report.0CnInclude the code generated with the slint-build crate from \xe2\x80\xa6fSafety0CaLocal variables defined and used in the function.000ClAmount of bind groups that can be attached to a pipeline \xe2\x80\xa6000ClA limit above which buffer allocations are guaranteed to \xe2\x80\xa6000CiReturns the mip_level_count of this <code>Texture</code>.CkMip count of texture. For a texture with no extra mips, \xe2\x80\xa6EeMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> \xe2\x80\xa60101021001010CnReturns true if the stencil state uses the reference value \xe2\x80\xa6CkReturns true if the face state uses the reference value \xe2\x80\xa6CkReturns true if the comparison depends on the reference \xe2\x80\xa6210EbReturn a range enclosing handles <code>first</code> through <code>last</code>, \xe2\x80\xa60ClReturns all the types which we need out-of-bounds locals \xe2\x80\xa60C`Stops command recording and creates debug group.00000AcPop an error scope.0CgSchedules the main event loop for termination. This \xe2\x80\xa6AeExits the event loop.1DhReturn the <code>TypeLoader</code> used when parsing the code in the \xe2\x80\xa6CmRetrieves an <code>Adapter</code> which matches the given \xe2\x80\xa60CnAdds the requirement to the selector that the backend must \xe2\x80\xa6000ChSpecifies the limits that are required by the device \xe2\x80\xa600000CgThe number of bytes in the last row of the copy region.000CgSets the callback that will be invoked when loading \xe2\x80\xa60BbWhich DX12 shader compiler to use.00000CkLocation for this input. Must match the location in the \xe2\x80\xa6000CeMapping between texture names and variables/samplers.CkIf set to true, the polygon depth is not clipped to 0-1 \xe2\x80\xa6000CiModify the current limits to use the buffer alignment \xe2\x80\xa60BmCreate a <code>Value</code> from a JSON ValueClHelper function that returns the string corresponding to \xe2\x80\xa60CmIssue a timestamp command at this point in the queue. The \xe2\x80\xa600000CnAllow the acceleration structure to be compacted in a copy \xe2\x80\xa60ClDescribes an allocation in the <code>AllocatorReport</code>.0Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa600000000000CaError occurred when trying to async map a buffer.0B`Describes a <code>Buffer</code>.000BdA buffer transition for use with \xe2\x80\xa6000CmClamp <code>BuiltIn::FragDepth</code> output between 0 and 1.0CaFormat can be used as color and input attachment.0AjCull back facing geometry.0BoDescribes the color state of a render pipeline.000ClError encountered when performing a compute pass, stored \xe2\x80\xa60AlSupports depth bias clamping0CjThis is the default clipboard used for text action for \xe2\x80\xa6CmA texture that has been marked as destroyed and is staged \xe2\x80\xa60B`Describes a <code>Device</code>.000CbCorresponds to a <code>GPUDeviceLostReason</code>.000CnA filtering rule that modifies how diagnostics are emitted \xe2\x80\xa60CoArgument buffer layout for <code>draw_indirect</code> commands.000CkRaw display handle for the Linux Kernel Mode Set/Direct \xe2\x80\xa60BjSupport for <code>early_depth_test</code>.0DkAllows for the creation and usage of <code>ExternalTexture</code>s, and \xe2\x80\xa6000CkConvenience alias for the event loop builder used by Slint.DjEmit <code>PointSize</code> output builtin to vertex shaders, which is \xe2\x80\xa600BmSupports storage buffers in fragment shaders.0BmReference a function parameter, by its index.AdA function argument.110100CkA local variable used by ReadZeroSkipWrite bounds-check \xe2\x80\xa60ChRaw display handle for the Linux Generic Buffer Manager.0CnError returned by <code>ComponentInstance::get_property</code>BnConfiguration for the OpenGL/OpenGLES backend.00000CiA display that acts as a wrapper around a display handle.0BaImage load and early depth tests.CfAll internal counters, exposed for debugging purposes.000AnA key press was auto-repeated.CeThe language was not found. The list of available \xe2\x80\xa6BnErrors generated by the <code>Layouter</code>.ChDescribes the multi-sampling state of a render pipeline.000n1.0 - Constant000m1.0 - D.alpha000m1.0 - S.alpha000CnA position represented in the coordinate space of physical \xe2\x80\xa60CiAll information to bind a single uniform value to the \xe2\x80\xa6CjA display server handle for a particular windowing system.0EhAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>\xe2\x80\xa6000jSample ID.A`shuffle up, down0BjAllows shaders to use the subgroup barrier0AnSupport for subgroup barriers.CcAllows compute shaders to use the subgroup barrier.0CaSupport for subgroup barriers in compute shaders.CnError returned by <code>ComponentInstance::set_callback</code>CdThere is already a platform set from another thread.0CnThis enum describes the different error scenarios that may \xe2\x80\xa61CnError returned by <code>ComponentInstance::set_property</code>BlA Renderer that do the rendering in softwareBmDescribes stencil state in a render pipeline.000BjOperation to perform on the stencil value.000BiComponent selection for a vector swizzle.000BoSupport for [<code>ImageClass::External</code>]CbOrder in which texture data is laid out in memory.000AlDimensionality of a texture.000CnAdds extra conversion functions to <code>TextureFormat</code>.0BjBinding is backed by an array of textures.0l[0, 0, 0, 0]000CnVertex buffer offsets and strides have to be a multiple of \xe2\x80\xa60AoRaw display handle for the Web.0CgThis struct contains getters that provide access to \xe2\x80\xa6AkRaw display handle for Xcb.0AkRaw window handle for Xlib.0BhRe-export of the android-activity crate.CjMust be at least 1. If this is not 1, all filter modes \xe2\x80\xa600000CjSet of shader stages where calling this function is valid.0AaBase array layer.0000000BkReturns the dimension of a block of texels.0CbThe size of a single texture texel block in bytes.000Cd<code>op.callback</code> is guaranteed to be called.0CnWrapper to unsafely define a wrapper type that can be used \xe2\x80\xa60CmCreates a new SharedPixelBuffer by cloning and converting \xe2\x80\xa60BdCreates a new <code>QuerySet</code>.0CcCreate a validator with the given validation flags.CaCreate a validator for Naga <code>Module</code>s.BlDiscard the command list under construction.0BeEarly depth test for fragment stages.000AmEnd the current compute pass.0DkThis module contains the <code>femtovg_renderer::FemtoVGRenderer</code> \xe2\x80\xa6BbConvert from a bits value exactly.0DiTakes in <code>FeatureBits</code> and returns Self with all bits that \xe2\x80\xa611111111111111111111111111111111111111011111111111111111111111111111111111111DmConstruct a <code>Range</code> that covers the indices in <code>inner</code>.0fSafety0CnReturns the capabilities of the surface when used with the \xe2\x80\xa60DcGain read-only access to the bytes of a mapped <code>Buffer</code>.000CkReturns the address of the OpenGL function specified by \xe2\x80\xa6ClUse this function pointer to obtain access to the OpenGL \xe2\x80\xa60CnList of publicly declared callbacks in the exported global \xe2\x80\xa6CnList of publicly declared functions in the exported global \xe2\x80\xa6CfArena for the global variables defined in this module.000CjReturns <code>true</code> if the format has a color aspect0CjReturns <code>true</code> if the format has a depth aspect0DhReturns true if a <code>winit::window::Window</code> exists for this \xe2\x80\xa6CfThe number of rows in a densely packed list of images.000BjReturn the length of a subscriptable type.0BmReturns true if the depth testing is enabled.0BoReturn true if this expression is a dynamic \xe2\x80\xa60CjReturns if the given range represents a full resource, \xe2\x80\xa60DeMap <code>view_formats</code> of the texture descriptor into another.0BlMaximum shader model the given dll supports.00000DjThe minimum size for a <code>BufferBinding</code> matching this entry, \xe2\x80\xa6000BaPoll all devices on all backends.0CnThe power preference is used to influence the WGPU adapter \xe2\x80\xa6BaPower preference for the adapter.00010000CkStart record commands and group it into debug marker group.00000AdPush an error scope.0BfType for <code>RayIntersection</code>.000BcConvenience function that calls \xe2\x80\xa6CjThe stride in bytes between the start of one row in an \xe2\x80\xa6000CkTransform to apply to <code>ImageSample</code> coordinates.000DgWrapper around <code>i_slint_core::tests::slint_send_mouse_click</code>AmSets the active index buffer.00000ClSets the scissor rectangle used during the rasterization \xe2\x80\xa60EhThis is equivalent to <code>core::assert_eq</code> if the <code>strict_asserts</code>\xe2\x80\xa60EhThis is equivalent to <code>core::assert_ne</code> if the <code>strict_asserts</code>\xe2\x80\xa60AmSubmission index to wait for.0fSafety00CkDefines which timestamp values will be written for this \xe2\x80\xa60CkDefines where and when timestamp values will be written \xe2\x80\xa601100ChConverts the given value to a <code>SharedString</code>.ChTransform buffer containing 3x4 (rows x columns, row \xe2\x80\xa60CmModify the current limits to use the resolution limits of \xe2\x80\xa60CjThe vertex processing state(vertex shader + buffers or \xe2\x80\xa6ClRe-implement this to support exposing raw window handles \xe2\x80\xa6EgWrite the <code>TypeInner</code> <code>inner</code> as it would appear in a value\xe2\x80\x99\xe2\x80\xa60DgEquivalent to <code>ComputeCommand</code> but the Ids resolved into \xe2\x80\xa6ChThe total size of the copy overflows a <code>u64</code>.0CcHow should code generated by Naga do bounds checks?000BbSpecific type of a buffer binding.000CnThe set of types with a fixed size at shader-creation time \xe2\x80\xa60AkCull front facing geometry.0AkThe result of a compilationDbComponentCompiler is deprecated, use <code>Compiler</code> insteadCbThis represents an instance of a dynamic componentCbEnables adjusting depth without disabling early Z.000BnA context for evaluating constant expressions.0CgDescribes the depth/stencil state in a render pipeline.000C`Hint at which precision to compute a derivative.000ChA wrapper for displaying Naga IR terms in diagnostic \xe2\x80\xa60ChThe type of draw command(indexed or not, or mesh shader)BoSelects which kind of swapchain to use on DX12.0CiErrors related to the state of a command or pass encoder.0Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000CcSelects which OpenGL ES 3 minor version to request.00000AlRaw window handle for Haiku.0CiSupports different blend operations per color attachment.0CnA timestamp that is invalid due to the platform not having \xe2\x80\xa60CdA language extension recognized by Naga, but not \xe2\x80\xa60CkThis struct describes layout constraints of a resizable \xe2\x80\xa6CmDescribes a memory block in the <code>AllocatorReport</code>.0BmBindTarget for dynamic storage buffer offsetsBcRaw display handle for OpenHarmony.0n1.0 - S1.alpha000ClAllows the user to set <code>PolygonMode::Line</code> in \xe2\x80\xa6000ClOptimize for fast build time, recommended if geometry is \xe2\x80\xa60CmOptimize for fast ray tracing performance, recommended if \xe2\x80\xa60CmSpecifies the values of pipeline-overridable constants in \xe2\x80\xa60BmPrimitive type the input mesh is composed of.000BhDescribes a programmable pipeline stage.0CjA range of push constant memory to pass to a shader stage.000CkAllows a texture to be an output attachment of a render \xe2\x80\xa60CfAllow access to the hal resource as guarded by the \xe2\x80\xa60CkOut-of-bounds reads return zero, and writes have no effect.000CkError encountered when finishing recording a render bundle.0CnThis enum describes the rotation that should be applied to \xe2\x80\xa6CjThe window will be destroyed and/or graphics resources \xe2\x80\xa60CkThis enum describes which parts of the buffer passed to \xe2\x80\xa6EeAllows shaders to use <code>quantizeToF16</code>, <code>pack2x16float</code>, and \xe2\x80\xa6ClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6CdA read-only storage buffer used in a bind group. \xe2\x80\xa6ClRead-only storage texture usage. Corresponds to a UAV in \xe2\x80\xa6CdFormat can be used as storage with read-only access.3210BaDescribes a <code>Sampler</code>.B`Describes a <code>Sampler</code>1101CnSharedPixelBuffer is a container for storing image data as \xe2\x80\xa60Akmin(S.alpha, 1.0 - D.alpha)000BaDescribes a <code>Texture</code>.000BoSpecific type of a sample in a texture binding.000BeA texture transition for use with \xe2\x80\xa6000AlA Vulkan timeline semaphore.0AlRaw window handle for UIKit.0CaA scalar with an unsupported width was requested.ClThis enum describes the different ways to configure WGPU \xe2\x80\xa60AlRaw window handle for Win32.0AlRaw window handle for WinRT.0AlRaw display handle for Xlib.0CmReturn the WGSL address space and access mode strings for \xe2\x80\xa60EhLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must \xe2\x80\xa60BcReturns the number of array layers.1111011BmReturn the binding view of the entire buffer.0BbBegins recording of a render pass.CfBegin a new render pass, clearing all active bindings.10CdReturns the size of the bounding box of this region.CmThe alignment of the row pitch of the texture data stored \xe2\x80\xa60CcCompile some .slint code into a ComponentDefinitionAhCompile some .slint codeCjThe DOM element id of the HTML Canvas element used for \xe2\x80\xa60BiThe color attachments of the render pass.000BeCreates a new <code>BindGroup</code>.0Cl<code>DiagnosticFilter</code>s and supporting functionality.0CmRe-implement this to support exposing raw display handles \xe2\x80\xa6BnFind the position of the <code>element</code>.CkReturn the positions of all instances of a specific elementBaMapping of the entry point names.CbAppends all the elements in the slice to the modelDhReturn a <code>ConstantEvaluator</code> that will add expressions to \xe2\x80\xa6000DdConstruct a color from an integer encoded as <code>0xAARRGGBB</code>0BjInfer decent defaults from the build type.0fSafety0ChList of publicly declared properties in the exported \xe2\x80\xa6CgThe number of bytes in a densely packed list of images.000CmThe stride in rows between the start of one image and the \xe2\x80\xa6000CjMacro to load raw SPIR-V data statically, for use with \xe2\x80\xa60DdInitialize translations when using the <code>gettext</code> feature.ClMaximal number of invocations in a subgroup. Lower is \xe2\x80\x9c\xe2\x80\xa6000CmMinimal number of invocations in a subgroup. Higher is \xe2\x80\x9c\xe2\x80\xa6000CfMap of expressions that have associated variable names00000CmIf <code>self</code> is a pointer type, return its base type.0ChTypes for predeclared wgsl types instantiated on demand.000AoPrint the diagnostics to stderr0CnThis function is for use the application\xe2\x80\x99s build script, \xe2\x80\xa6DeCompact <code>module</code> and replace all overrides with constants.0CjRaw display handle, underlying window must outlive the \xe2\x80\xa60BfType for <code>RayVertexReturn</code>.000CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CnReturns the required features (if any) in order to use the \xe2\x80\xa6CjSpecifies the features that are required by the device \xe2\x80\xa6001000CfResolves a query set, writing the results into the \xe2\x80\xa60CgThis is a hint that we need to restrict indexing of \xe2\x80\xa6ChShould we restrict indexing of vectors, matrices and \xe2\x80\xa6DjSets the include paths used for looking up <code>.slint</code> imports \xe2\x80\xa60DdSets the library paths used for looking up <code>@library</code> \xe2\x80\xa60BaAssign a vertex buffer to a slot.00000AiSlint interpreter libraryDfThis module contains the <code>SoftwareRenderer</code> and related \xe2\x80\xa6ClIf the stencil aspect of the depth stencil attachment is \xe2\x80\xa6000DcFinds the <code>StorageFormat</code> corresponding to the given \xe2\x80\xa60ClMacro to produce an array of [<code>VertexAttribute</code>].0CmWait indefinitely until for the most recent submission to \xe2\x80\xa6CjDetermine the classification of this error as a WebGPU \xe2\x80\xa60EbSets the scale factor to be applied to all <code>px</code> to <code>phx</code> \xe2\x80\xa6CjInvokes the specified callback with a reference to the \xe2\x80\xa6CkPrepares to write data to a buffer via a mapped staging \xe2\x80\xa60DjA guard containing a lock to an <code>AdapterContext</code>, while the \xe2\x80\xa6AmRaw window handle for AppKit.0DcAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on \xe2\x80\xa6000CeA single message from the shader compilation process.0CmSpecifies how the alpha channel of the textures should be \xe2\x80\xa6000De<code>Instance::create_surface()</code> or a related function failed.0CeBy default, polygon depth is clipped to 0-1 range \xe2\x80\xa6000AnRead-only depth stencil usage.0B`Don\xe2\x80\x99t pass labels to wgpu-hal.0AmArrays with a dynamic length.CeEnables the <code>blend_src</code> attribute in WGSL.BcConfiguration for the DX12 backend.00000CdHow should the slint compiler embed images and fontsBdThe entry point couldn\xe2\x80\x99t be found.CeEntry point version of <code>FunctionOobLocal</code>.0Cg4x4 block compressed texture. 16 bytes per block (8 \xe2\x80\xa6000ClAllows textures with formats \xe2\x80\x9cr32float\xe2\x80\x9d, \xe2\x80\x9crg32float\xe2\x80\xa6000AcMore image formats.CkA fragment entry point to be considered when generating \xe2\x80\xa6AmRaw display handle for Haiku.0BmWindow that wraps around a raw window handle.0BjSupports indirect drawing and dispatching.0CfThe last-layer byte size overflows a <code>u64</code>.0BaOptions for creating an instance.00000DbThe <code>bytes_per_row</code> is too small for the texture width.0CiThis trait defines a bi-directional interface between \xe2\x80\xa6BcConfiguration for the noop backend.00000CmAllows the user to set <code>PolygonMode::Point</code> in \xe2\x80\xa6000CkQuery returns up to 5 64-bit numbers based on the given \xe2\x80\xa6000ClThis enum describes the different types of buttons for a \xe2\x80\xa6BbDescribes a <code>QuerySet</code>.C`Describes how to create a <code>QuerySet</code>.10CiBuilt-in shader function for testing relation between \xe2\x80\xa6000CmError encountered when encoding a render command. This is \xe2\x80\xa60ChRequesting a device from an <code>Adapter</code> failed.BoError when requesting a device from the adapter10ClWhen used as a STORAGE texture, then a texture with this \xe2\x80\xa6CiA read-write buffer used in a bind group. cbindgen:ignoreCaRead-write storage texture usage. cbindgen:ignoreCjFormat can be used as storage with both read and write \xe2\x80\xa632103CaWrite-only storage texture usage. cbindgen:ignoreCeFormat can be used as storage with write-only access.510BcSpecific type of a sampler binding.000CjColor variation to use when sampler addressing mode is \xe2\x80\xa6000ClThe window\xe2\x80\x99s scale factor has changed. This can happen \xe2\x80\xa6ClThis is the clipboard that is used when text is selected \xe2\x80\xa6EgTemporary convenience trait to let us call <code>.get()</code> on <code>u64</code>s \xe2\x80\xa6CdSample specific LODs of cube / array shadow texturesCiSupports GL_EXT_texture_shadow_lod on the host, which \xe2\x80\xa6CjThis enum describes the possible errors that can occur \xe2\x80\xa60AjTriangle geometry variant.AdTriangle geometries.10AmRaw display handle for UIKit.0ChSpecifies an interpretation of the bytes of a vertex \xe2\x80\xa6BoDescribes how the vertex buffer is interpreted.0100CmA raw window handle for a Web offscreen canvas registered \xe2\x80\xa60DeDetermine whether <code>index</code> is statically known to be in \xe2\x80\xa60CbEnable advanced debugging and validation flags \xe2\x80\xa60BcBegins recording of a compute pass.CgBegin a new compute pass, clearing all active bindings.10CmBind groups that this pipeline uses. The first entry will \xe2\x80\xa600000CnIf the binding is an unsized binding array, this overrides \xe2\x80\xa600ChThe number of texel in a texel block in the x direction.000CjThe alignment of the start of the buffer used as a GPU \xe2\x80\xa60CgSurface that is required to be presentable with the \xe2\x80\xa60000000BlCreates a Buffer with data to initialize it.0ClReturns the current rate at which the text cursor should \xe2\x80\xa6CjReturn the instance extension names wgpu would like to \xe2\x80\xa60ChArena for all diagnostic filter rules parsed in this \xe2\x80\xa6000Cg<code>Display</code> this rule\xe2\x80\x99s identifiers in WGSL.0CmThese default limits are guaranteed to be compatible with \xe2\x80\xa60DfRetrieves all available <code>Adapter</code>s that match the given \xe2\x80\xa6Dh<code>surface_hint</code> is only used by the GLES backend targeting \xe2\x80\xa610CnAdds a value with a custom check for uniqueness: returns a \xe2\x80\xa60CfConvert from a bits value, unsetting any unknown bits.0DkTakes in <code>FeatureBits</code> and returns Self with only valid bits \xe2\x80\xa611111111111111111111111111111111111111011111111111111111111111111111111111111DeReturn a default <code>SurfaceConfiguration</code> from width and \xe2\x80\xa60ChWhich OpenGL ES 3 minor version to request, if using \xe2\x80\xa600000CnConstant expressions and override expressions used by this \xe2\x80\xa6000ChReturns true for buffer bindings with dynamic offset \xe2\x80\xa6C`Indicates that the binding has a dynamic offset.0100ClReturns <code>true</code> if the format has a stencil aspect0AmThe horizontal column stretchCnThe stride in bytes between the start of one image and the \xe2\x80\xa6000Dg<code>Instance::init</code> but with a callback. If you want to add \xe2\x80\xa60ChReturns true if the state doesn\xe2\x80\x99t mutate the depth \xe2\x80\xa60BlReturns the layout constraints of the windowChCreates a new Image from the specified buffer, which \xe2\x80\xa60CkAllows a buffer to be mapped immediately after they are \xe2\x80\xa600000DgMaximum length of <code>VertexState::buffers</code> when creating a \xe2\x80\xa6000BaNumber of gpu memory allocations.000BkA child expression with non-uniform result.0ChThis function allows registering a callback that\xe2\x80\x99s \xe2\x80\xa60gSafety:0CdReturn the global variable being accessed by the \xe2\x80\xa60CfControls whether the parser should parse doc comments.0DeA recommended key for storing <code>PipelineCache</code>s for the \xe2\x80\xa60CgData used by <code>SetPushConstant</code> instructions.000CiThe queue create infos for the device. You may add or \xe2\x80\xa60CmReturns the queue family index of the device\xe2\x80\x99s internal \xe2\x80\xa60CkRaw display handle, underlying display must outlive the \xe2\x80\xa60DbStrips the <code>Srgb</code> suffix from the given texture format.0BdReturn the current rotation. See \xe2\x80\xa6AbWrapper around \xe2\x80\xa6CkSets the blend color as used by some of the blending modes.0BoSends the given text into the system clipboard.CeSet push constant data for subsequent dispatch calls.AgSet push constant data.CaSet push constant data for subsequent draw calls.De<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the \xe2\x80\xa6BcSets a range in push constant data.43210CkWhen drawing strip topologies with indices, this is the \xe2\x80\xa6000ChReturns the WGPU 26.x texture that this image wraps; \xe2\x80\xa60ChReturns the WGPU 27.x texture that this image wraps; \xe2\x80\xa60BeDispatch a window event to the scene.0DiA pointer to an <code>UIViewController</code> object, if the view has \xe2\x80\xa60CmCreate a new configuration that includes sets the include \xe2\x80\xa6CjCreate a new configuration that sets the library paths \xe2\x80\xa6AnRaw display handle for AppKit.0CiDescribes a group of bindings and the resources to be \xe2\x80\xa60AeBindGroup descriptor.110CdPolicies for injecting bounds checks during code \xe2\x80\xa6000ClAmount of times the clipper is invoked. This is also the \xe2\x80\xa60AmSupports comparison samplers.0BgSupports textures that are cube arrays.BbSupport for arrayed cube textures.10CiComponentDefinition is a representation of a compiled \xe2\x80\xa6CiConfirm a triangle intersection to be included in the \xe2\x80\xa6000AnRead-write depth stencil usage0CmSpecial depth/stencil format with at least 24 bit integer \xe2\x80\xa6000Cf4x4 block compressed texture. 8 bytes per block (4 \xe2\x80\xa6000CjThe event could not be sent because the event loop was \xe2\x80\xa60BoDisplay that wraps around a raw display handle.0BnThe image stride overflows a <code>u64</code>.0DdThe <code>rows_per_image</code> is too small for the texture height.0ClAllows a texture of this format to back a view passed as \xe2\x80\xa6CcFormat can be used for render pass resolve targets.10DhAllows the user to call <code>RenderPass::multi_draw_indirect</code> \xe2\x80\xa60AmExpressions that need baking.0CbThe Slint Platform does not provide an event loop.CjThe event could not be sent because the Slint platform \xe2\x80\xa6110AoRaw window handle for Ohos NDK.0CaRaw window handle for the Redox operating system.0ClDescribes the writing of timestamp values in a render or \xe2\x80\xa60AoPipeline layout creation flags.0BmThe intersection test to use for ray queries.0CiEncodes a series of GPU operations into a reusable \xe2\x80\x9c\xe2\x80\xa60CjError when <code>Instance::request_adapter()</code> fails.000ocbindgen:ignore0AcSubgroup operationsCfDescribes how shader bound checks should be performed.000ChDefines the capabilities of a given surface and adapter.00CoDescribes information about what a <code>Surface</code>\xe2\x80\x99s \xe2\x80\xa610CjThe window/canvas/surface/swap-chain/etc. a surface is \xe2\x80\xa60BmAllows for creation of textures of format \xe2\x80\xa600000ChView of a buffer which can be used to copy to/from a \xe2\x80\xa60007BkA call was made to an unsupported external.CeThe specified <code>Version</code> isn\xe2\x80\x99t supported.AnRaw window handle for Wayland.0BiThe Window was activated or de-activated.CiThis helper trait can be used to obtain access to the \xe2\x80\xa6ChThe number of texel in a texel block in the y direction.000CfReturns the origin of the bounding box of this region.CjNumber of user-defined clip planes. Only applicable to \xe2\x80\xa6CcAdvanced options for when this pipeline is compiled0000000DcSame as <code>compile</code>, but allow to specify a configuration.CmFind all positions of the components which are pointed by \xe2\x80\xa6DeAssign <code>id_in</code> an error with the given <code>label</code>.0DgHelper function to construct a <code>DynamicDxc</code> variant with \xe2\x80\xa60BjIf disabled, depth will not be written to.000fSafety0B`The memory hints for the device.0BcDispatches compute work operations.0CjEnd the occlusion query on this render pass. It can be \xe2\x80\xa60CnIndicate that CPU writes to mapped buffer memory should be \xe2\x80\xa60ClIf false, the caller MUST ensure that all passed shaders \xe2\x80\xa6ClIf set, loops will have code injected into them, forcing \xe2\x80\xa611001CeChoose instance options entirely from environment \xe2\x80\xa6CcDerive defaults from environment variables. See \xe2\x80\xa6DgChoose backend options by calling <code>from_env</code> on every field.DkChoose OpenGL backend options by calling <code>from_env</code> on every \xe2\x80\xa6DiChoose DX12 backend options by calling <code>from_env</code> on every \xe2\x80\xa6CgChoose whether the noop backend is enabled from the \xe2\x80\xa6543210CjCombines the features from the internal flags into the \xe2\x80\xa60DcFinds the <code>TextureFormat</code> corresponding to the given \xe2\x80\xa60CmReturns the next texture to be presented by the swapchain \xe2\x80\xa60CmReturn the value for a property within an exported global \xe2\x80\xa6Anforward to get_global_propertyAeInserts debug marker.00000ChFor each public function declared at the root of the \xe2\x80\xa6CkReturns true if the underlying platform offers complete \xe2\x80\xa60CiDispatches multiple draw calls from the active vertex \xe2\x80\xa60ClDefines where the occlusion query results will be stored \xe2\x80\xa6000CkSet a callback for errors that are not handled in error \xe2\x80\xa6CkSet a callback which will be called for all errors that \xe2\x80\xa6BeThe premultiplication of this texture000000AkPresentation system to use.00BjList of push constant items in the shader.CfReturns the kind of buffer that must be passed to  \xe2\x80\xa6CeHLSL binding information for the sampler heap and \xe2\x80\xa6CiSet a handler for the callback in the exported global \xe2\x80\xa6AnForward to set_global_callbackCjSet the value for a property within an exported global \xe2\x80\xa6Anforward to set_global_propertyfSafety0CbTry to evaluate <code>expr</code> at compile time.0BnCreate a <code>Value</code> from a JSON stringAoRaw display handle for Android.0CgAllows the user to create arrays of buffers in shaders:000BoDescribes a single binding inside a bind group.000AoPipeline layout creation flags.0CiDefinition for a triangle geometry for a Bottom Level \xe2\x80\xa60BcDescribes a Buffer when allocating.0CiThis enum describes whether a Window is allowed to be \xe2\x80\xa60CbThe mutable state of a <code>CommandBuffer</code>.0CjDescriptor to create bottom level acceleration structures.CgDescriptor for creating a bottom level acceleration \xe2\x80\xa610CiCallback to allow changing the vulkan device creation \xe2\x80\xa60CgDescriptor to create top level acceleration structures.CkDescriptor for creating a top level acceleration structure.10CmAllows two outputs from a shader to be used for blending. \xe2\x80\xa60ChSupport for generating two sources for blending from \xe2\x80\xa611AdDual source blending1CkSpecial depth/stencil format with 32 bit floating point \xe2\x80\xa6000ChRepresents a single parent-linking node in a tree of \xe2\x80\xa60DcArgument buffer layout for <code>dispatch_indirect</code> commands.000CkToken of the user agreeing to access experimental features.0DgEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. \xe2\x80\xa60ClAdd a candidate generated intersection to be included in \xe2\x80\xa6000CmInclude unused global variables, constants and functions. \xe2\x80\xa6DkMaximum binding size for the shaders that only support <code>i32</code> \xe2\x80\xa60AmSupports sample-rate shading.E`Support for <code>BuiltIn::SampleIndex</code> and <code>Sampling::Sample</code>.10CbRaw display handle for the Redox operating system.0BbColor spaces supported on the web.000BhA write-only view into a staging buffer.0CeType of a ray query intersection. Matching vulkan \xe2\x80\xa6000BkDescribes the attachments of a render pass.000C`Error encountered when performing a render pass.0CkSupports specifying which view formats are allowed when \xe2\x80\xa60CbRepresents an item in a StandardListView and a \xe2\x80\xa6BoSpecific type of a sample in a texture binding.000CbResult of a <code>SubgroupBallot</code> statement.000AmSupported subgroup operations0BaDescribes a <code>Surface</code>.CcConfigures a <code>Surface</code> for presentation.10BiEnables R64Uint image atomic min and max.0BoSupport for atomic operations on 64-bit images.110CiView of a texture which can be used to copy to/from a \xe2\x80\xa6000ocbindgen:ignoreBhDimensions of a particular texture view.000AoRaw display handle for Wayland.0AiWGSL language extensions.0AoRaw display handle for Windows.0CjLoad uniformly from a uniform pointer in the workgroup \xe2\x80\xa6000CfThe requested Wait was given a wrong submission index.0EhAdd the members of <code>self</code> into <code>info.enabled_features</code> and its \xe2\x80\xa60ClHelper function that returns the string corresponding to \xe2\x80\xa60CgAssert that <code>range</code> is valid for this arena.0DeReturn true if the fragment <code>format</code> is covered by the \xe2\x80\xa60AgAlpha composition mode.0ChCreates a mesh shader based <code>RenderPipeline</code>.AhCreates a shader module.0DeAssign <code>id_in</code> an error with the given <code>label</code>.0CjIndicates that the function is using dual source blending.0CnReturns the current time as a monotonic duration since the \xe2\x80\xa6ClEnsure that the given block has return statements at the \xe2\x80\xa60CkBuild a set of expressions used as indices, to cache in \xe2\x80\xa60BoGet the compilation info for the shader module.0CoGain write access to the bytes of a mapped <code>Buffer</code>.000CkGets the amount of nanoseconds each tick of a timestamp \xe2\x80\xa60DaGet\xe2\x80\x99s the <code>glow::Context</code> without waiting for a lockCgReturns true if the state doesn\xe2\x80\x99t mutate the stencil.0CjReturns whether this adapter may present to the passed \xe2\x80\xa60ChOn submission, maps the buffer to host (CPU) memory, \xe2\x80\xa6000DkReturn an <code>EventLoopProxy</code> that can be used to send event to \xe2\x80\xa6ChSet of push constant ranges this pipeline uses. Each \xe2\x80\xa600000CiChecks whether this BLAS is ready for compaction. The \xe2\x80\xa60DiResolve the size of a binding for buffer with <code>offset</code> and \xe2\x80\xa6BgSets the nine-slice edges of the image.0ChReturns the capabilities of working with a specified \xe2\x80\xa60DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60BgBitwise xor - <code>self ^ other</code>11111111111111111111111111111111111111011111111111111111111111111111111111111CmSum of the memory reserved by all memory blocks including \xe2\x80\xa6000CiTransition resources to an underlying hal resource state.0CcWrite the <code>Value</code> out into a JSON stringDeWrite a <code>TypeInner</code> that has no representation as WGSL \xe2\x80\xa60DjWrite a <code>TypeInner::Struct</code> for which we are unable to find \xe2\x80\xa60CnSupports samplers with anisotropic filtering. Note this isn\xe2\x80\xa60CgBinding is backed by a top level acceleration structureBmA ray-tracing acceleration structure binding.CkOpaque object representing an acceleration structure of \xe2\x80\xa60121001ChInformation about a copy between a buffer and a texture.000CmBuffer to buffer copy as well as buffer clear offsets and \xe2\x80\xa6000ClThe structure for configuring aspects of the compilation \xe2\x80\xa6BlDescribes the attachments of a compute pass.0CaError encountered when performing a compute pass.0BcContext version see BlasBuildEntry.0BbContext version of BlasGeometries.0CfAllows for explicit creation of textures of format \xe2\x80\xa6000CgLists various ways the underlying platform does not \xe2\x80\xa6000DiArgument to filter the elements in the <code>element_positions</code> \xe2\x80\xa6DkFormat of an <code>ExternalTexture</code>. This indicates the number of \xe2\x80\xa60CnParameters provided to shaders via a uniform buffer of the \xe2\x80\xa6EdD3D12: Add support for <code>first_vertex</code> and <code>first_instance</code> \xe2\x80\xa60CjA image was used with multiple samplers, which isn\xe2\x80\x99t \xe2\x80\xa6BaSubresource range within an image000CnThis is a minimal adapter for a Window that doesn\xe2\x80\x99t have \xe2\x80\xa6Dj<code>AddressSpace::PushConstant</code> was used more than once in the \xe2\x80\xa6BmThere are no bundled translations. Either \xe2\x80\xa6CeNanosecond timestamp used by the presentation engine.000nQuad supported0CeMaximum queries in a <code>QuerySetDescriptor</code>.000DaResult of a <code>Proceed</code> <code>RayQuery</code> statement.000AoOptions for requesting adapter.0CkAdditional information required when requesting an adapter.0ocbindgen:ignore0CcOnly generate SPIR-V for one entry point at a time.0CkAllows shaders to use f32 atomic load, store, add, sub, \xe2\x80\xa60EgSupport for <code>AtomicFunction::Add</code>, <code>AtomicFunction::Sub</code>, and \xe2\x80\xa6110CdSupport for subgroup operations in the vertex stage.ClSupport for subgroup operations (not including barriers) \xe2\x80\xa6C`List of supported <code>es</code> GLSL versions.CkAllows the user to create uniform arrays of textures in \xe2\x80\xa6000BkLayout of a texture in a buffer\xe2\x80\x99s memory.000DjA builder for the <code>TextureBlitter</code> utility. If you want the \xe2\x80\xa6BlFeatures supported by a given texture format000BeDescribes a <code>TextureView</code>.0AgTextureView descriptor.11101CeRaw window handle for a Web canvas registered via \xe2\x80\xa60BlMask of all features which are experimental.CjStart a occlusion query on this render pass. It can be \xe2\x80\xa60CmHow should generate code handle array, vector, matrix, or \xe2\x80\xa60ChAssert that <code>handle</code> is valid for this arena.000BjList of supported alpha composition modes.0BkComputes the render extent of this texture.0BeCopy data from one buffer to another.0CeCreate a <code>PipelineCache</code> with initial datafSafety10BkCreates a new surface targeting a given \xe2\x80\xa60BeInstantiate a window for a component.CnReturns the depth or layer count of this <code>Texture</code>.BgThe depth of the copy region in pixels.CeThe depth of the extent or the number of array layers1021010CnDraws indexed primitives using the active index buffer and \xe2\x80\xa600000CkTransfer function for the destination color space. This \xe2\x80\xa6000DgSpecifies whether <code>self.required_features</code> is allowed to \xe2\x80\xa600CkDon\xe2\x80\x99t panic on missing bindings, instead generate any \xe2\x80\xa6CnDon\xe2\x80\x99t panic on missing bindings. Instead use fake values \xe2\x80\xa6CeThreshold at which texture, buffer, query set and \xe2\x80\xa600000CiGet an object representing the bind group layout at a \xe2\x80\xa6000CjReturn the set of capabilities the last module written \xe2\x80\xa60CgQuery internal counters from the native backend for \xe2\x80\xa60CmReturns true if there is an animation currently active on \xe2\x80\xa60C`The maximum allowed number of color attachments.000DiMaximum length of <code>VertexBufferLayout::attributes</code>, summed \xe2\x80\xa6000BfRange for the number of queued frames.BoMaximum number of queued frames. Must be in \xe2\x80\xa610DcCompare value type <code>self</code> and <code>rhs</code> as types.0CkRegisters a window event filter callback for this Slint \xe2\x80\xa6DiFor each limit in <code>other</code> that is better than the value in \xe2\x80\xa6DiHLSL binding information for the <code>PushConstant</code> global, if \xe2\x80\xa6CmSet the present timing information which will be used for \xe2\x80\xa60AkSets the stencil reference.0DfTransfer function for the source color space. The <em>inverse</em> \xe2\x80\xa6000CdSum of the memory used by all allocations, in bytes.000DkConvenience function that combines <code>invoke_from_event_loop()</code>\xe2\x80\xa60DjWrite a <code>Scalar</code> that has no representation as WGSL source, \xe2\x80\xa60DmWrite the <code>TypeResolution</code> <code>resolution</code> as a WGSL type.0Ci4x4 column-major matrix with which to convert sampled \xe2\x80\xa6000BbRaw window handle for Android NDK.0ClAmount of primitives that are not culled by the clipper. \xe2\x80\xa60CiFormat can be used as color (with blending) and input \xe2\x80\xa60BbThe type of a compilation message.0CkCallback to allow changing the vulkan instance creation \xe2\x80\xa60Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa6000BjA component of a lowered external texture.ClSupports full 32-bit range indices (2^32-1 as opposed to \xe2\x80\xa60CfNumber of implicit bind groups derived at pipeline \xe2\x80\xa60CnThis struct is used to compile and instantiate a component \xe2\x80\xa6CkEnables creating shader modules from Metal MSL computer \xe2\x80\xa60CmMemory budget thresholds used by backends to try to avoid \xe2\x80\xa600000BlDescribes a mesh shader (graphics) pipeline.BaDescribes a mesh shader pipeline.DcFeatures supported by a <code>vk::PhysicalDevice</code> and its \xe2\x80\xa60c\xe2\x80\xa60CiA color whose component have been pre-multiplied by alphaBfDescribes a <code>RenderBundle</code>.000ocbindgen:ignore0DbEnables <code>builtin(primitive_index)</code> in fragment shaders.000DbDescriptor for use with <code>Device::create_shader_module</code>.0BcStop traversal after the first hit.0CfEnables BCn family of compressed textures. All BCn \xe2\x80\xa6000CaType for the callback of uncaptured error handlerCkThe callback of <code>Device::on_uncaptured_error()</code>.CgKinds of expressions that require uniform control flow.0CaEnables using 64-bit types for vertex attributes.000CfOn wgpu-core based backends, block until the given \xe2\x80\xa60BlDeprecated alias to <code>EventResult</code>CmThe acceleration structure within which this query should \xe2\x80\xa6000CiReturns the aspect-specific format of the original format0CkReturns the number of components this format has taking \xe2\x80\xa60BeCopy data from a buffer to a texture.CjCopy from buffer to texture. Works with a single array \xe2\x80\xa610BeCopy data from a texture to a buffer.CjCopy from texture to buffer. Works with a single array \xe2\x80\xa610CeCreates a <code>Buffer</code> from a wgpu-hal Buffer.fSafety10BmCreates an empty <code>CommandEncoder</code>.BkCreate a fresh <code>CommandEncoder</code>.10F`Create a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal <code>OpenDevice</code>3DlCreate a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal \xe2\x80\xa64BfCreates a <code>PipelineLayout</code>.0BfCreates a <code>RenderPipeline</code>.0BcThe required limits for the device.0CkThe leaf of all diagnostic filter rules tree (stored in \xe2\x80\xa6ClThe leaf of all diagnostic filter rules tree parsed from \xe2\x80\xa6101010CkIndicates that only a fallback adapter can be returned. \xe2\x80\xa60000000DbPopulate this module\xe2\x80\x99s <code>SpecialTypes::ray_desc</code> type.0CnAdds the specified function to an internal queue, notifies \xe2\x80\xa6BhInvoke the function from the event loop.1ChReturns true if the function is an entry point for a \xe2\x80\xa60D`Returns <code>true</code> if the format is a multi-planar format0CjThe maximum number of layers that can be output from a \xe2\x80\xa60ClAmount of storage available for push constants in bytes. \xe2\x80\xa6000CjGenerates the base configuration for a borrowed OpenGL \xe2\x80\xa6CiRegisters a callback when the previous call to submit \xe2\x80\xa6C`<code>closure</code> is guaranteed to be called.CjRegisters a callback that is invoked when this command \xe2\x80\xa600CjRegisters a callback that is invoked when the previous \xe2\x80\xa612BaThe size of the raw TLAS instance0CaSample count supported by a given texture format.0DcReturn the leaf scalar type of <code>self</code>, as needed for \xe2\x80\xa60ChThis function allows registering a callback that\xe2\x80\x99s \xe2\x80\xa60CdSet how the window need to be rotated in the buffer.B`The domain used for translations0CeThe number of bytes occupied per pixel in a color \xe2\x80\xa60CjReturns the pixel buffer for the Image if available in \xe2\x80\xa60CiRegister a row as a dependency to the current binding \xe2\x80\xa6CmIf the type is a Vector or a Scalar return a tuple of the \xe2\x80\xa60ClReturns the set of WGSL language extensions supported by \xe2\x80\xa6CkFlip Y coordinate of <code>BuiltIn::Position</code> output.CbFlip output Y and extend Z from (0, 1) to (-1, 1).1DcLike <code>BlasTriangleGeometry</code>, but with <code>Arc</code>s.BjDescribes an attachment location in words.0CjUniformity of control flow for operations that require it.0BgDescribes a <code>CommandBuffer</code>.000DiError type returned from <code>RenderBundleEncoder::new</code> if the \xe2\x80\xa60DgArgument buffer layout for <code>draw_indexed_indirect</code> commands.000ClD3D12: Add support for the builtins that the other flags \xe2\x80\xa60DgAllows non-zero value for the <code>first_instance</code> member in \xe2\x80\xa6000BgInterpolation and auxiliary qualifiers.CnRanges of writes to push constant storage must be at least \xe2\x80\xa6000CdDescribes a pipeline cache, which allows reusing \xe2\x80\xa60CiFlags for which pipeline data should be recorded in a \xe2\x80\xa6000CaSupport for ray queries returning vertex position0CmSupports reading from a depth/stencil texture while using \xe2\x80\xa60CcReturn an intersection found by <code>query</code>.000DbGet the Positions of the triangle hit by the <code>RayQuery</code>000DbAllows shaders to use the <code>early_depth_test</code> attribute.000BgDon\xe2\x80\x99t execute the closest hit shader.0CbList of supported <code>core</code> GLSL versions.EgResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> \xe2\x80\xa6000ChView of a buffer which can be used to copy to/from a \xe2\x80\xa60CkVertex buffer strides have to be a multiple of this number.000CmEnables bindings of writable storage buffers and textures \xe2\x80\xa6000BfCopy data from one texture to another.CiCopy from one texture to another. Works with a single \xe2\x80\xa610DoConverts a wgpu-hal <code>ExposedAdapter</code> to a wgpu <code>Adapter</code>.fSafetyEdConverts a wgpu-hal <code>hal::ExposedAdapter</code> to a wgpu <code>Adapter</code>.1BgCreates a <code>ComputePipeline</code>.0BkCreates a new <code>ExternalTexture</code>.CgCreates a new surface from the given drm configuration.000CgCreates a <code>Texture</code> from a wgpu-hal Texture.505CkThe index of the query set at which an end timestamp of \xe2\x80\xa600000CmStruct containing parameters required by some backends to \xe2\x80\xa60Cm3x3 column-major matrix to transform linear RGB values in \xe2\x80\xa6000ClCreates a new surface targeting the given display/window \xe2\x80\xa60DhReturns <code>true</code> if the format is a depth and/or stencil format0CdReturns true if the given expression points to a \xe2\x80\xa60CjWhether to wait for the latency waitable object before \xe2\x80\xa600ChThe maximum number of geometry descriptors a BLAS is \xe2\x80\xa6000CnThe maximum number of instances a TLAS is allowed to have. \xe2\x80\xa6000DgReturns <code>true</code> if the blend factor references the second \xe2\x80\xa60CeChange the what kind of buffer is being passed to \xe2\x80\xa6BnA <code>Vec</code> of supported sample counts.0D`Return the WGSL form of <code>self</code> as appropriate for \xe2\x80\xa60CmRegister the model as a dependency to the current binding \xe2\x80\xa6CkTransform buffer offset in bytes (optional, required if \xe2\x80\xa60Ci<code>BlasTriangleGeometry</code>, without the resources.BhDescribes a <code>CommandEncoder</code>.000CcArguments to the <code>CreateDeviceCallback</code>.0BnUse this trait to intercept events from winit.CiFormat can be used as depth-stencil and input attachment.0ChEnables mesh shaders and task shaders in mesh shader \xe2\x80\xa6000CnFile names specified in .slint files will be loaded by the \xe2\x80\xa6D`A filterable triggering rule in a <code>DiagnosticFilter</code>.0CnWebgpu only allows the MAP_READ and MAP_WRITE buffer usage \xe2\x80\xa6000BhDescribes a <code>PipelineLayout</code>.AlDescribes a pipeline layout.10BjAllows for usage of textures of format \xe2\x80\xa6000CjDescribes the depth/stencil attachment for render bundles.000BgDescribes a render (graphics) pipeline.00000CkEnables creating shader modules from SPIR-V binary data \xe2\x80\xa60CmEnables ASTC family of compressed textures. ASTC textures \xe2\x80\xa6000CfEnables ETC family of compressed textures. All ETC \xe2\x80\xa6000CiView of a texture which can be used to copy to/from a \xe2\x80\xa60CnValidate indirect buffer content prior to issuing indirect \xe2\x80\xa60BmReturn the binding view of the entire buffer.0DeSimilar to <code>compile_with_config</code>, but meant to be used \xe2\x80\xa6BgCreates a <code>BindGroupLayout</code>.AlCreates a bind group layout.10CjUpload an entire texture and its mipmaps from a source \xe2\x80\xa60CkThe depth and stencil attachment of the render pass, if \xe2\x80\xa6000BeThe required features for the device.0CmDraws using a mesh shader pipeline, based on the contents \xe2\x80\xa6BiEmits a summary of the error to a string.000CnReturns which backends can be picked for the current build \xe2\x80\xa60CgCreates a new Image from the specified shared pixel \xe2\x80\xa60DiReturn the length of <code>self</code>, assuming overrides are yet to \xe2\x80\xa60ClSimilar to <code>init()</code>, which allow to listen to \xe2\x80\xa6CnIndicate that GPU writes to mapped buffer memory should be \xe2\x80\xa60ClThe maximum number of primitive (ex: triangles, aabbs) a \xe2\x80\xa6000CjThe maximum number of views that can be used by a mesh \xe2\x80\xa60BlMaximum number of live non-sampler bindings.000DiMaximum allowed value for the <code>size.depth_or_array_layers</code> \xe2\x80\xa6000DfMaximum allowed value for the <code>size.width</code> of a texture \xe2\x80\xa6000EfMaximum allowed value for the <code>size.width</code> and <code>size.height</code> \xe2\x80\xa6000EhMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and \xe2\x80\xa6000BoMemory budget thresholds used by some backends.00000DfCreate a <code>PhysicalDeviceFeatures</code> for opening a logical \xe2\x80\xa60CiAsynchronously prepares this BLAS for compaction. The \xe2\x80\xa60BhSet a DeviceLostCallback on this device.0ClRe-implement this function to update the properties such \xe2\x80\xa6CiConfigures this builder to use the specified libinput \xe2\x80\xa60CbOverride expressions for workgroup size in the \xe2\x80\xa6000CeWhat a copy between acceleration structures should do0CbWhat type the data of an acceleration structure is0BiDescribes a <code>BindGroupLayout</code>.0AkBindGroupLayout descriptor.110CjA case-insensitive, ASCII-only set of strings, for use \xe2\x80\xa6AmDescribes a compute pipeline.00000CmView of a texture which can be used to copy to a texture, \xe2\x80\xa6000ocbindgen:ignoreDdRender to a <code>glow::NativeFramebuffer</code> Useful when the \xe2\x80\xa6DjHLSL binding information for a Naga <code>External</code> image global \xe2\x80\xa6BjDescribes an <code>ExternalTexture</code>.0CmSupports binding storage buffers and textures to fragment \xe2\x80\xa60Cc<code>crate::Sampling::First</code> is unsupported.CfAlignment requirement for instance buffers used in \xe2\x80\xa60AkAllows the user to call \xe2\x80\xa6000ClInstantiate a static ModelAdaptorVTable for a given type \xe2\x80\xa6DkIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>\xe2\x80\xa60CmEnables use of Pipeline Statistics Queries. These queries \xe2\x80\xa6000CjDescribes a color attachment to a <code>RenderPass</code>.BnDescribes a color attachment to a render pass.10C`Describes the timestamp writes of a render pass.0AoOptions for requesting adapter.0DkSupport for <code>quantizeToF16</code>, <code>pack2x16float</code>, and \xe2\x80\xa6CnThis enum describes the different error scenarios that may \xe2\x80\xa60CiDescriptor for a shader module given by Metal MSL source.0CgEnables normalized <code>16-bit</code> texture formats.000B`Texture format capability flags.0BcFeature flags for a texture format.000ClLike <code>BlasTriangleGeometry</code>, but with owned data.DeSupports buffers to combine <code>BufferUsages::INDEX</code> with \xe2\x80\xa60CnAmount of times the vertex shader is ran. Accounts for the \xe2\x80\xa60CnWhen enabled, produces another sample mask per pixel based \xe2\x80\xa6000EfReturn <code>true</code> if automatic conversions will covert <code>self</code> to \xe2\x80\xa6E`Determine whether <code>self</code> automatically converts to <code>goal</code>.10CjCompares every limits within self is within the limits \xe2\x80\xa60CmThese default limits are guaranteed to be compatible with \xe2\x80\xa60CnGenerate an GPU memory allocation report if the underlying \xe2\x80\xa60DiPopulate this module\xe2\x80\x99s <code>SpecialTypes::predeclared_types</code> \xe2\x80\xa60DhReturn the length of <code>self</code>, assuming overrides have been \xe2\x80\xa60CiDispatches multiple draw calls from the active vertex \xe2\x80\xa60DjSimilar to <code>run_event_loop()</code>, but this function enters the \xe2\x80\xa6CmReturns the size multiple requirement for a texture using \xe2\x80\xa60ClAdd special constants to <code>SV_VertexIndex</code> and \xe2\x80\xa6CgConfigures the compiler to bundle translations when \xe2\x80\xa6DkAllows the use of <code>AddressMode::ClampToBorder</code> with a border \xe2\x80\xa6000Be<code>offset</code> - offset in bytes0BdFlags for an acceleration structure.BaFlags for acceleration structures10BjErrors that can occur while populating \xe2\x80\xa60CmAmount of times a compute shader is invoked. This will be \xe2\x80\xa60AlAllows the user to set a \xe2\x80\xa6000CaDescribes the timestamp writes of a compute pass.0CeArguments to the <code>CreateInstanceCallback</code>.0CgA variant of <code>EnableExtension::Implemented</code>.BnThe largest number that can be returned by \xe2\x80\xa60c\xe2\x80\xa60CdAdvanced options for use when a pipeline is compiled0ChDescriptor for a shader module given by DirectX DXIL \xe2\x80\xa60ChDescriptor for a shader module given by DirectX HLSL \xe2\x80\xa60CgAlignment requirement for transform buffers used in \xe2\x80\xa60ChResult of a <code>WorkGroupUniformLoad</code> statement.000fSafety0DeAssign <code>id_in</code> an error with the given <code>label</code>.BbGet info about the adapter itself.0CeGenerates a timestamp using the clock used by the \xe2\x80\xa6DgCreates a <code>PresentationTimestamp</code> using the adapter\xe2\x80\x99s WSI.10CjReturns the format features guaranteed by the WebGPU spec.0EeReturns <code>true</code> if <code>self</code> is a depth or stencil component of \xe2\x80\xa60CmMaps the label and view formats of the texture descriptor \xe2\x80\xa60ClMapping of each bind group\xe2\x80\x99s sampler index buffer to a \xe2\x80\xa6CnSelect the current translation language when using bundled \xe2\x80\xa6gSee \xe2\x80\xa60ClAllow retrieval of the vertices of the triangle hit by a \xe2\x80\xa60CmDescriptor for the size defining attributes, for a bottom \xe2\x80\xa6CfDescriptor for all size defining attributes of all \xe2\x80\xa610CjThis enum describes the origin to use when rendering a \xe2\x80\xa6BhContext version of BlasTriangleGeometry.0AgUser data needed by \xe2\x80\xa60ClAmount of times the fragment shader is ran. Accounts for \xe2\x80\xa60BhDescribes a programmable pipeline stage.0ocbindgen:ignore0ChAllows shaders to use all i64 and u64 atomic operations.0CeSupport for all atomic operations on 64-bit integers.110CeAllows shaders to use i64 and u64 atomic min and max.0EhSupport for <code>AtomicFunction::Min</code> and <code>AtomicFunction::Max</code> on \xe2\x80\xa6110CfDescriptor for a shader module given by SPIR-V binary.0ClCompute a collective operation across all active threads \xe2\x80\xa6000EbApply the usual default interpolation for <code>ty</code> to <code>binding</code>.0CjCreate a shader module with the given <code>source</code>.0CnMake sure the types for the vertex return are in the module\xe2\x80\xa60CmReturns the features supported for a given texture format \xe2\x80\xa60DeInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> \xe2\x80\xa60DjDetermines whether the [<code>Backends::BROWSER_WEBGPU</code>] backend \xe2\x80\xa60DkMaximum binding index allowed in <code>create_bind_group_layout</code>. \xe2\x80\xa6000ChDispatches multiple draw calls from the active index \xe2\x80\xa60CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CjReturn the set of supported capabilities for a texture \xe2\x80\xa60EhWhether to use the <code>StorageInputOutput16</code> capability for <code>f16</code> \xe2\x80\xa6CnCheck the given module to be valid, requiring overrides to \xe2\x80\xa60CcA buffer used to store the compacted size of an \xe2\x80\xa60DkAllows the use of <code>AddressMode::ClampToBorder</code> with a border \xe2\x80\xa6000AoEntries for a single descriptor0DgFactory to create <code>slint::Image</code> from an existing OpenGL \xe2\x80\xa6DiBuffer-to-texture copies must have <code>bytes_per_row</code> aligned \xe2\x80\xa60DiBuffer-texture copies must have <code>bytes_per_row</code> aligned to \xe2\x80\xa60CmEnables creating shader modules from DirectX HLSL or DXIL \xe2\x80\xa60CiA variant of <code>LanguageExtension::Implemented</code>.0CeBlend mode that does standard alpha blending with \xe2\x80\xa60BmSupport for non-uniform indexing of samplers.0BoEnables ASTC HDR family of compressed textures.000CiA variant of <code>EnableExtension::Unimplemented</code>.ChAllows using the VK_KHR_external_memory_win32 Vulkan \xe2\x80\xa6000CkAllows using the VK_GOOGLE_display_timing Vulkan extension.000EcFind the common type of <code>self</code> and <code>other</code> under WGSL\xe2\x80\x99s \xe2\x80\xa60CkGet the texture dimension required of this texture view \xe2\x80\xa60CbCreates an empty <code>RenderBundleEncoder</code>.0CiCreates a shader module with flags to dictate runtime \xe2\x80\xa60fSafety0BiThe experimental features for the device.CmDispatches compute work operations, based on the contents \xe2\x80\xa60DcHLSL binding information for <code>External</code> image global \xe2\x80\xa6DjThe maximum value of the <code>workgroup_size</code> X dimension for a \xe2\x80\xa6000DjThe maximum value of the <code>workgroup_size</code> Y dimension for a \xe2\x80\xa6000DjThe maximum value of the <code>workgroup_size</code> Z dimension for a \xe2\x80\xa6000AnCreate a new SoftwareRenderer.CnReturns the theoretical memory footprint of a texture with \xe2\x80\xa60CmCall this function to update and potentially activate any \xe2\x80\xa6CfA global variable holding a component of a lowered \xe2\x80\xa6CkAllows the user to create bind groups containing arrays \xe2\x80\xa6000BmDescribes a <code>RenderBundleEncoder</code>.000DhError type returned from the <code>select_bundled_translation</code> \xe2\x80\xa6CjAllows for timestamp queries directly on command encoders.000CeAllows uniform buffers to be bound as binding arrays.000c\xe2\x80\xa60CkSupports all the texture usages described in WebGPU. If \xe2\x80\xa60CmAmount of allocated gpu memory attributed to acceleration \xe2\x80\xa6000ClThe index of the query set at which a start timestamp of \xe2\x80\xa600000CcBuild bottom and top level acceleration structures.ClTo get the required sizes for the buffer allocations use \xe2\x80\xa610DeAssign <code>id_in</code> an error with the given <code>label</code>.CjDesired maximum number of frames that the presentation \xe2\x80\xa6000CnEnd the pipeline statistics query on this compute pass. It \xe2\x80\xa6CmEnd the pipeline statistics query on this render pass. It \xe2\x80\xa610DgHelper method that generates a <code>NameKey</code> for an external \xe2\x80\xa6ChAmount of samplers visible in a single shader stage. \xe2\x80\xa6000AbWrapper around \xe2\x80\xa6fSafetyClConfigures this builder to use the specified winit event \xe2\x80\xa60C`Buffer used for acceleration structure building.0Be<code>offset</code> - offset in bytes0Di<code>first_vertex</code> - offset in the vertex buffer (as number of \xe2\x80\xa60CmQualcomm OOMs when there are zero color attachments but a \xe2\x80\xa60CmAn offset into the query resolve buffer has to be aligned \xe2\x80\xa6000CgAllows the user to create uniform arrays of storage \xe2\x80\xa6000CkA variant of <code>LanguageExtension::Unimplemented</code>.0CkRaw window handle for a Web offscreen canvas registered via0DbDeprecated: Use <code>create_shader_module_trusted</code> instead.0Cg<code>device_lost_closure</code> might never be called.0DhPopulate this module\xe2\x80\x99s <code>SpecialTypes::ray_intersection</code> \xe2\x80\xa60EdThe maximum total value of x<em>y</em>z for a given <code>draw_mesh_tasks</code> \xe2\x80\xa60DhMaximum value for <code>VertexBufferLayout::array_stride</code> when \xe2\x80\xa6000DdReturns a tuple of <code>crate::Literal</code>s representing the \xe2\x80\xa60CkDispatches multiple draw calls based on the contents of \xe2\x80\xa6CnAdds the requirement to the selector that the backend must \xe2\x80\xa60CfStops the current capture in the attached graphics \xe2\x80\xa6BaStop a graphics debugger capture.10ClThe finest alignment of bound range checking for uniform \xe2\x80\xa60BaFlags for acceleration structures0ChInformation of the required size for a corresponding \xe2\x80\xa60BnUpdate mode for acceleration structure builds.000ChError encountered while attempting to do a copy on a \xe2\x80\xa60CcSupports copies between depth textures and buffers.0ChA function argument holding a component of a lowered \xe2\x80\xa6ClParameters describing a gamma encoding transfer function \xe2\x80\xa60ClNO_DUPLICATE_ANY_HIT_INVOCATION, not useful unless using \xe2\x80\xa60CjAllows for timestamp queries directly on command encoders.000CgVertex formats allowed for creating and building BLASes0CnStart a pipeline statistics query on this compute pass. It \xe2\x80\xa6CmStart a pipeline statistics query on this render pass. It \xe2\x80\xa610DcGenerate <code>SpecialTypes::external_texture_params</code> and \xe2\x80\xa6CkMaximum size in bytes of a binding to a storage buffer. \xe2\x80\xa6000CkMaximum size in bytes of a binding to a uniform buffer. \xe2\x80\xa6000CcStarts a capture in the attached graphics debugger.BbStart a graphics debugger capture.10CmEnables creating shaders from passthrough with reflection \xe2\x80\xa60DbDescribes a depth/stencil attachment to a <code>RenderPass</code>.CfDescribes a depth/stencil attachment to a render pass.10ocbindgen:ignore00D`A filterable triggering rule in a <code>DiagnosticFilter</code>.0CkAllows the 3d dimension for textures with BC compressed \xe2\x80\xa6000CmCreates a shader module which will bypass wgpu\xe2\x80\x99s shader \xe2\x80\xa60CmReturns the duration before the next timer is expected to \xe2\x80\xa6ClCreates a new Image from an existing OpenGL texture. The \xe2\x80\xa60CgCreates a new surface from the given drm configuration.0DgReturns <code>true</code> if the format is a combined depth-stencil \xe2\x80\xa60ClWhether workgroup scoped memory will be initialized with \xe2\x80\xa6CgDictates the way workgroup variables should be zero \xe2\x80\xa61111CfShould workgroup variables be zero initialized (by \xe2\x80\xa601222CmEnable automatic timestamp normalization. This means that \xe2\x80\xa60CjWhether and how to use a waitable handle obtained from \xe2\x80\xa60<<ClDescriptor for a shader module that will bypass wgpu\xe2\x80\x99s \xe2\x80\xa6CjDescriptor for a shader module given by any of several \xe2\x80\xa6AfCreates a render pass.0BoMemory budget thresholds used by some backends.0CnMaximum allowed number of components (scalars) of input or \xe2\x80\xa6000BmThe maximum value for each dimension of a \xe2\x80\xa60ChDispatches multiple draw calls from the active index \xe2\x80\xa60fSafety0CkConfigures this builder to use the specified winit hook \xe2\x80\xa60CkFlags for a geometry inside a bottom level acceleration \xe2\x80\xa6BkFlags for acceleration structure geometries1000CmDescriptor for the size defining attributes of a triangle \xe2\x80\xa6CkDescriptor for all size defining attributes of a single \xe2\x80\xa610BjEnables multiview in mesh shader pipelines000Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa6000CfSupport for 16-bit normalized storage texture formats.0CmAllows the 3d dimension for textures with ASTC compressed \xe2\x80\xa6000AgCreates a compute pass.0CiStruct describing a gamma encoding transfer function. \xe2\x80\xa60EfMark acceleration structures as being built. <em><strong>Should only</strong></em> \xe2\x80\xa60CjMaximum number of bytes used for workgroup memory in a \xe2\x80\xa6000CbCreate an new instance of wgpu, but disabling [\xe2\x80\xa60CfDescribes a depth/stencil attachment to a render pass.0CgSupports buffer bindings with sizes that aren\xe2\x80\x99t a \xe2\x80\xa60ClSupports textures with mipmaps which have a non power of \xe2\x80\xa60c\xe2\x80\xa60ocbindgen:ignore0DbRequired <code>BufferBindingType::Storage</code> alignment for \xe2\x80\xa6000DbRequired <code>BufferBindingType::Uniform</code> alignment for \xe2\x80\xa6000CeModify the current limits to use the acceleration \xe2\x80\xa60fSafety0Be<code>offset</code> - offset in bytes0CnUpdates use source_acceleration_structure if present, else \xe2\x80\xa60CjWith this feature not present, there are the following \xe2\x80\xa60BfThis is the index in the buffer at \xe2\x80\xa6DdFind the <code>element</code> that was defined at the text position.BmThe maximum value for each dimension of a \xe2\x80\xa6000ChAmount of storage buffers visible in a single shader \xe2\x80\xa6000ChAmount of uniform buffers visible in a single shader \xe2\x80\xa6000CkDispatches multiple draw calls based on the contents of \xe2\x80\xa6ChWhat the scratch buffer for building an acceleration \xe2\x80\xa60CjWhether wgpu should expose adapters that run on top of \xe2\x80\xa60;;ClThe maximum number of bytes necessary to hold one sample \xe2\x80\xa6000DcMaximum value of the product of the <code>workgroup_size</code> \xe2\x80\xa6000CiAmount of sampled textures visible in a single shader \xe2\x80\xa6000CiAmount of storage textures visible in a single shader \xe2\x80\xa6000CmGet an ID of one of the bind group layouts. The ID adds a \xe2\x80\xa60CgDefines the range of allowed memory block sizes for \xe2\x80\xa6000fSafety0CjConfigures this builder to invoke the functions on the \xe2\x80\xa60Be<code>offset</code> - offset in bytes0CjBuffer used for top level acceleration structure building.05533BnBind target for dynamic storage buffer offsetsDeInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> \xe2\x80\xa6055BhDescriptor for creating a shader module.CjDescriptor for a shader module given by any of several \xe2\x80\xa6BfReturns the alignment required for \xe2\x80\xa6088C`Enables device specific texture format features.000ClReturns the size read by an acceleration structure build \xe2\x80\xa60CdReturn the leaf scalar type of <code>pointer</code>.0CgBuffer used for bottom level acceleration structure \xe2\x80\xa60CjSupport for non-uniform indexing of uniform buffer arrays.0CkAllows shaders to index storage texture resource arrays \xe2\x80\xa60CkSupport for non-uniform indexing of storage texture arrays.110CmAmount of individual resources within binding arrays that \xe2\x80\xa6000CmAll buffers, buffer addresses and offsets will be ignored.\xe2\x80\xa60ClThe maximum number of acceleration structures allowed to \xe2\x80\xa6000CjThe recommended minimum limits for mesh shaders if you \xe2\x80\xa6C`Allows usage of additional vertex formats in \xe2\x80\xa6000Ee<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have \xe2\x80\xa60CnAmount of storage buffer bindings that can be dynamic in a \xe2\x80\xa6000CnAmount of uniform buffer bindings that can be dynamic in a \xe2\x80\xa6000ClAmount of individual samplers within binding arrays that \xe2\x80\xa6000CmThe minimum guaranteed limits for acceleration structures \xe2\x80\xa60CmIf the following code returns false, then nvidia will end \xe2\x80\xa60CnAllows shaders to index sampled texture and storage buffer \xe2\x80\xa60ClSupport for non-uniform indexing of sampled textures and \xe2\x80\xa6110")