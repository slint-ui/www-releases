searchState.loadedDescShard("slint", 0, "Slint\nThe scene of items was rendered, but the back buffer was …\nThere is already a rendering notifier set, multiple …\nUse the BackendSelector to configure one of Slint’s …\nThe scene of items is about to be rendered.\nFactory to create <code>slint::Image</code> from an existing OpenGL …\nThis enum describes the origin to use when rendering a …\nThe bottom-left of the texture is the top-left of the …\nA brush is a data structure that is used to describe how a …\nThis enum describes whether a Window is allowed to be …\nColor represents a color in the Slint run-time, …\nThis trait describes the common public API of a strongly …\nThe model data: A model is a set of rows and each row has …\nError returned from the <code>invoke_from_event_loop()</code> and …\nThe event could not be sent because the event loop was …\nProvides a filtered subset of rows by another <code>Model</code>.\nThis trait is used to obtain references to global …\nThis enum describes a low-level access to specific …\nThe Window will be hidden (default action)\nAn image type that can be displayed by the Image element. …\nThe return value of the <code>spawn_local()</code> function\nThe close request is rejected and the window will be kept …\nThe language was not found. The list of available …\nThe linear gradient variant of a brush describes the …\nError generated if an image cannot be loaded for any …\nThe position in logical pixels.\nThe size in logical screen pixels.\nA position represented in the coordinate space of logical …\nA size represented in the coordinate space of logical …\nProvides rows that are generated by a map function based …\nA Model is providing Data for the repeated elements with …\nExtension trait with extra methods implemented on types …\nDispatch notifications from a <code>Model</code> to one or several …\nRepresent a handle to a view that listens to changes to a …\nModelRc is a type wrapper for a reference counted …\nThis trait defines the interface that users of a model can …\nThe rendering is done using OpenGL.\nThe Slint Platform does not provide an event loop.\nThe event could not be sent because the Slint platform …\nNo default platform was selected, or no platform could be …\nThere are no bundled translations. Either …\nAnother platform-specific error occurred\nAnother platform-specific error occurred.\nThe position in physical pixels.\nThe size in physical pixels.\nA position represented in the coordinate space of physical …\nA size represented in the coordinate space of physical …\nThe platform encountered a fatal error.\nThe radial gradient variant of a brush describes a circle …\nThe window has been created and the graphics …\nThis enum describes the different rendering states, that …\nThe window will be destroyed and/or graphics resources …\nA Repeated timer is fired repeatedly until it is stopped …\nProvides a reversed view of another <code>Model</code>.\nConvenience alias for a pixel with three color channels …\nConvenience alias for a pixel with four color channels …\nRgbaColor stores the red, green, blue and alpha components …\nError type returned from the <code>select_bundled_translation</code> …\nThere is already a platform set from another thread.\nThis enum describes the different error scenarios that may …\nSharedPixelBuffer is a container for storing image data as …\nA string type used by the Slint run-time.\nA string type used by the Slint run-time.\nSharedVector holds a reference-counted read-only copy of …\nA SingleShot timer is fired only once.\nThe color variant of brush is a plain color that is to be …\nProvides a sorted view of rows by another <code>Model</code>.\nRepresents an item in a StandardListView and a …\nThis is used to define the column and the column header of …\nTimer is a handle to the timer system that triggers a …\nThe TimerMode specifies what should happen after the timer …\nA trait for converting a value to a <code>SharedString</code>.\nThe top-left of the texture is the top-left of the texture …\nThe rendering backend does not support rendering notifiers.\nA <code>Model</code> backed by a <code>Vec&lt;T&gt;</code>, using interior mutability.\nThe rendering is based on WGPU 24.x. Use the provided …\nStruct that’s used to hold weak references of a Slint …\nThe rendering is done on a HTML Canvas element using WebGL.\nThis type represents a window towards the windowing …\nThis struct represents a persistent handle to a window and …\nThe position of the window in either physical or logical …\nThe size of a window represented in either physical or …\nAlpha Component\nIf the future hasn’t completed yet, this will make the …\nReturns the alpha channel of the color as u8 in the range …\nThe alpha component.\nAndroid backend.\nReturn something that can be downcast’ed (typically …\nReturns <code>(alpha, red, green, blue)</code> encoded as u32\nReturns the pixels interpreted as raw bytes.\nReturn a slice to the array\nReturn a slice to the pixel data.\nReturn a slice to the string\nReturns a new weak pointer.\nAttach one peer. The peer will be notified when the model …\nAttach one peer. The peer will be notified when the model …\nBlue Component\nBlue Component\nAdds the requirement that the selected backend must match …\nReturns the blue channel of the color as u8 in the range …\nThe blue channel.\nReturns a new version of this color that has the …\nReturns a new version of this brush that has the …\nCompletes the process of building a slint::Image that …\nClears the model, removing all values\nClears the vector and removes all elements.\nCreates a new SharedPixelBuffer by cloning and converting …\nReturns a clone of this handle that’s a strong reference.\nIf the brush is SolidColor, the contained color is …\nReturns a new version of this color that has the …\nReturns a new version of this brush that has the …\nConstruct an empty model\nDispatch a window event to the scene.\nThis is a pseudo module which only exist for documentation …\nExtend the model with the content of the iterator\nAppends all the elements in the slice to the model\nReturns a new Model where the elements are filtered by the …\nThis macro is the same as <code>std::format!</code>, but it returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a color from an integer encoded as <code>0xAARRGGBB</code>\nConstruct a color from the alpha, red, green and blue …\nConstruct a color from the alpha, red, green and blue …\nCreates a new Image from an existing OpenGL texture. The …\nConstruct a color from the hue, saturation, and value HSV …\nConvert a given logical position to a physical position by …\nConvert a given logical size to a physical size by …\nConvert a given physical position to a logical position by …\nConvert a given physical size to a logical size by …\nCreates a new Image from the specified shared pixel …\nConstruct a color from the red, green and blue color …\nConstruct a color from the red, green and blue color …\nCreates a new Image from the specified shared pixel …\nCreates a new Image from the specified shared pixel …\nAllocate a new model from a slice\nCreate a SharedVector from a slice\nGreen Component\nGreen Component\nReturns a reference that’s tied to the life time of the …\nThis function provides access to instances of global …\nReturns the green channel of the color as u8 in the range …\nThe green channel.\nReturns true if there is an animation currently active on …\nReturns the height of the image in pixels.\nThe height in logical.\nThe height in physical pixels;\nConvenience function for <code>crate::Window::hide()</code>. Hides the …\nHides the window, so that it is not visible anymore. The …\nThe horizontal column stretch\nInclude the code generated with the slint-build crate from …\nInitialize translations when using the <code>gettext</code> feature.\nInserts a row at position index. All rows after that are …\nReturns the interval of the timer. If the timer was never …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the specified function to an internal queue, notifies …\nReturn true if the SharedVector is empty\nReturn true if the String is empty\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns if the window is currently fullscreen\nReturns if the window is currently maximized\nReturns if the window is currently minimized\nReturns true if this brush is fully opaque\nReturns true if this brush contains a fully transparent …\nReturns the visibility state of the window. This function …\nReturns an iterator visiting all elements of the model.\nNumber of elements in the array\nSize of the string, in bytes. This excludes the …\nLoad an Image from a path to a file containing an image.\nCreates a new Image from the specified buffer, which …\nReturns the pixels interpreted as raw bytes.\nReturn a mutable slice to the array. If the array was …\nReturn a mutable slice to the pixel data. If the …\nReturns a new Model where all elements are mapped by the …\nThe minimum column width (logical length)\nReturns a new color that is a mix of this color and <code>other</code>. …\nThe implementation should return a reference to its …\nCreates a new BackendSelector.\nCreate a new window from a window adapter\nCreates a new MapModel based on the given <code>wrapped_model</code> …\nCreates a new FilterModel based on the given <code>wrapped_model</code> …\nCreates a new SortModel based on the given <code>wrapped_model</code> …\nCreates a new ReverseModel based on the given <code>wrapped_model</code>…\nConstruct a new logical position from the given x and y …\nConstruct a new physical position from the given x and y …\nConstruct a new logical size from the given width and …\nConstruct a new physical size from the width and height …\nCreates a new SharedPixelBuffer with the given width and …\nCreates a new empty string\nCreates a new SortModel based on the given <code>wrapped_model</code> …\nGenerates the base configuration for a borrowed OpenGL …\nThis function allows registering a callback that’s …\nConfigures the texture to be rendered vertically mirrored.\nReturns the path of the image on disk, if it was …\nThis module contains items that you need to use or …\nRemoves last element from the array and returns it. If the …\nReturns the position of the window on the screen, in …\nAdd a row at the end of the model\nAdd an element to the array. If the array was shared, this …\nAppend a string to this string\nSchedules the main event loop for termination. This …\nRed Component\nRed Component\nReturns the red channel of the color as u8 in the range …\nThe red channel.\nRemove the row at the given index from the model\nAdds the requirement that the selected renderer must match …\nThis function issues a request to the windowing system to …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nManually reapply the filter. You need to run this e.g. if …\nManually reapply the sorting. You need to run this e.g. if …\nNotify the peer that the model has been changed in some …\nResize the array to the given size. If the array was …\nRestarts the timer. If the timer was previously started by …\nReturns a new Model where the elements are reversed. This …\nNotify the peers that rows were added\nNotify the peers that a specific row was changed\nThe number of rows in the model\nReturns the data for a particular row.\nConvenience function that calls …\nNotify the peers that rows were removed\nThis is a convenience function that first calls <code>Self::show</code>…\nEnters the main event loop. This is necessary in order to …\nSimilar to <code>run_event_loop()</code>, but this function enters the …\nReturns true if the timer is running; false otherwise.\nThis function returns the scale factor that allows …\nCompletes the backend selection process and tries to …\nSelect the current translation language when using bundled …\nSet or unset the window to display fullscreen.\nChange the duration of timer. If the timer was is running …\nMaximize or unmaximize the window.\nMinimize or unminimze the window.\nSets the nine-slice edges of the image.\nSets the position of the window on the screen, in physical …\nThis function allows registering a callback that’s …\nSets the data for a particular row.\nResizes the window to the specified size on the screen, in …\nReplace inner Vec with new data\nSets the application id for use on Wayland or X11 with xdg …\nConvenience function for <code>crate::Window::show()</code>. This shows …\nShows the window on the screen. An additional strong …\nStarts the timer with the duration and the callback to …\nReturns the size of the window on the screen, in physical …\nReturns the size of the image in pixels.\nReturns the size of the Image in pixels.\nThis macro allows you to use the Slint design markup …\nReturns a new Model where the elements are sorted …\nReturns a new Model where the elements are sorted by the …\nSorts the column\nReturns a reference to the inner model\nReturns a reference to the inner model\nReturns a reference to the inner model\nReturns a reference to the inner model\nSpawns a <code>Future</code> to execute in the Slint event loop.\nStarts the timer with the given mode and interval, in …\nStops the previously started timer. Does nothing if the …\nSwaps two elements in the model.\nTakes a snapshot of the window contents and returns it as …\nThe text content of the item\nThe title of the column header\nConverts this color to an RgbaColor struct for easy …\nConverts this color to an RgbaColor struct for easy …\nConverts this color to the HSV color space.\nConvert this physical position to a logical position by …\nConvert this physical size to a logical size by dividing …\nTurn the <code>WindowSize</code> into a <code>LogicalSize</code>.\nConvert this logical position to a physical position by …\nTurn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.\nConvert this logical size to a physical size by …\nTurn the <code>WindowSize</code> into a <code>PhysicalSize</code>.\nReturns the pixel buffer for the Image if available in RGB …\nReturns the pixel buffer for the Image if available in …\nReturns the pixel buffer for the Image if available in …\nConverts the given value to a <code>SharedString</code>.\nReturns the WGPU 24.x texture that this image wraps; …\nRegister the model as a dependency to the current binding …\nRegister a row as a dependency to the current binding …\nReturns a new version of this color with the opacity …\nReturns a new version of this brush with the opacity …\nDispatch a window event to the scene.\nGets the row index of the underlying unfiltered model for …\nGets the row index of the underlying unsorted model for a …\nConvenience function that returns a new strongly …\nReturns a new strongly referenced component if some other …\nConvenience function that combines <code>invoke_from_event_loop()</code>…\nWGPU 24.x specific types and re-exports.\nReturns the width of the image in pixels.\nThe width in logical pixels.\nThe width in physical pixels.\nthe actual width of the column (logical length)\nReturns the Window associated with this component. The …\nReturns a struct that implements the raw window handle …\nWinit 0.30.x specific types and re-exports.\nReturns a new version of this color with the opacity set …\nReturns a new version of this brush with the related color…\nCreate a new empty array with a pre-allocated capacity in …\nConfigures this builder to use the specified winit event …\nConfigures this builder to use the specified winit hook …\nThe x coordinate.\nThe x coordinate.\nThe y coordinate.\nThe y coordinate.\nThe DOM element id of the HTML Canvas element used for …\nThe drawing context type used on the HTML Canvas element …\nThe WGPU device used for rendering.\nUse this function pointer to obtain access to the OpenGL …\nThe WGPU instance used for rendering.\nThe WGPU queue for used for command submission.\nRe-export of the android-activity crate.\nInitializes the Android backend.\nSimilar to <code>init()</code>, which allow to listen to …\nFeature flags and backend selection.\nThis module exists only to explain the API of the code …\nSlint on Microcontrollers\nType Mappings\nThis an example of the API that is generated for a …\nReturns a new weak pointer.\nReturns a clone of this handle that’s a strong reference.\nReturns the argument unchanged.\nA getter is generated for each property declared at the …\nReturns the value of the <code>user_name</code> property declared in …\nThis function provides access to instances of global …\nConvenience function for <code>crate::Window::hide()</code>. Hides the …\nCalls <code>U::from(self)</code>.\nFor each public function declared at the root of the …\nFor each callback declared at the root of the component, a …\nCreates a new instance that is reference counted and …\nFor each callback declared at the root of the component, a …\nThis is a convenience function that first calls <code>Self::show</code>…\nA setter is generated for each property declared at the …\nAssigns a new value to the <code>user_name</code> property.\nConvenience function for <code>crate::Window::show()</code>. This shows …\nReturns the Window associated with this component. The …\nThe platform has already been initialized in an earlier …\nThe back button.\nThe clip board, used in <code>Platform::clipboard_text</code> and …\nThe user requested to close the window.\nThis is the default clipboard used for text action for …\nTrait that is returned by the …\nThe forward button.\nThe <code>Key</code> enum is used to map a specific key by name e.g. …\nA key press was auto-repeated.\nA key was pressed.\nA key was released.\nThis struct describes layout constraints of a resizable …\nThe left button.\nThe center button.\nThe Slint Platform does not provide an event loop.\nNo default platform was selected, or no platform could be …\nAnother platform-specific error occurred\nA button that is none of left, right, middle, back or …\nAnother platform-specific error occurred.\nThis trait defines the interface between Slint and …\nThe platform encountered a fatal error.\nThis enum describes the different types of buttons for a …\nThe pointer exited the window.\nThe position of the pointer has changed.\nA pointer was pressed.\nA pointer was released.\nThe wheel button of a mouse was rotated to initiate …\nThis trait represents a Renderer that can render a slint …\nThe window was resized.\nThe right button.\nThe window’s scale factor has changed. This can happen …\nThis is the clipboard that is used when text is selected …\nThis enum describes the different error scenarios that may …\nThere is already a platform set from another thread.\nThe Window was activated or de-activated.\nThis trait represents the adaptation layer between the …\nA event that describes user input or windowing system …\nThis struct contains getters that provide access to …\nThe background color or brush of the Window\nReturns the current interval to internal measure the …\nReturns a copy of text stored in the system clipboard, if …\nInstantiate a window for a component.\nThis function is called when debug() is used in .slint …\nRe-implement this to support exposing raw display handles …\nReturns the current time as a monotonic duration since the …\nReturns the duration before the next timer is expected to …\nThis module contains the <code>femtovg_renderer::FemtoVGRenderer</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the window should be shown fullscreen; …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke the function from the event loop.\nReturns true if the window should be shown fullscreen; …\ntrue if the window is in a maximized state, otherwise false\ntrue if the window is in a minimized state, otherwise false\nReturns the layout constraints of the window\nThe maximum size.\nThe minimum size.\nReturn an <code>EventLoopProxy</code> that can be used to send event to …\nReturns the position of the window on the screen, in …\nThe position of the cursor for this event, if any\nThe preferred size.\nExits the event loop.\nReturn the renderer.\nIssues a request to the windowing system to re-render the …\nSpins an event loop and renders the visible windows.\nSends the given text into the system clipboard.\nSet the Slint platform abstraction.\nSets the position of the window on the screen, in physical …\nRequest a new size for the window to the specified size on …\nShow the window if the argument is true, hide otherwise.\nReturn the size of the Window on the screen\nThis module contains the <code>SoftwareRenderer</code> and related …\nReturns the Window’s title\nCall this function to update and potentially activate any …\nRe-implement this function to update the properties such …\nReturns the window API.\nRe-implement this to support exposing raw window handles …\nThe button that was pressed.\nThe button that was released.\nThe amount of logical pixels to scroll in the horizontal …\nThe amount of logical pixels to scroll in the vertical …\nThe window system provided scale factor to map logical …\nThe new logical size of the window\nThe unicode representation of the key pressed.\nThe unicode representation of the key pressed.\nThe unicode representation of the key released.\nThis trait describes the interface GPU accelerated …\nEnsures that the OpenGL context is current when returning …\nReturns the address of the OpenGL function specified by …\nThis function is called by the renderers when the surface …\nThis function is called by the renderers when all OpenGL …\nThis trait defines a bi-directional interface between …\nThis is a minimal adapter for a Window that doesn’t have …\nThe full window is always redrawn. No attempt at partial …\nNo rotation\nRepresents a rectangular region on the screen, used for …\nA color whose component have been pre-multiplied by alpha\nThis enum describes the rotation that should be applied to …\nThis enum describes which parts of the buffer passed to …\nOnly redraw the parts that have changed since the previous …\nA 16bit pixel that has 5 red bits, 6 green bits and  5 …\n180° rotation (upside-down)\nRotate 90° to the left\nRotate 90° to the right\nA Renderer that do the rendering in software\nRedraw the part that have changed since the last two …\nTrait for the pixels in the buffer\nThe pixel type of the buffer\nAngle of the rotation in degrees\nPixel which will be filled as the background in case the …\nBlend a single pixel with a color\nBlend a color to all the pixel in the slice.\nReturns the origin of the bounding box of this region.\nReturns the size of the bounding box of this region.\nIf the window needs to be redrawn, the callback will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a pixel from the red, gree, blue component in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the rectangles in this region. …\nInstantiate a new MinimalWindowAdaptor\nCreate a new Renderer\nCreate a new SoftwareRenderer.\nCalled once per line, you will have to call the render_fn …\nRender the window to the given frame buffer.\nRender the window, line by line, into the line buffer …\nReturn the current rotation. See …\nReturns the kind of buffer that must be passed to  …\nSet how the window need to be rotated in the buffer.\nChange the what kind of buffer is being passed to …\nUse <code>Automatic</code> if you want to let Slint select the WGPU …\nThe texture format is not supported. The only supported …\nThe texture usage must include TEXTURE_BINDING as well as …\nUse <code>Manual</code> if you’ve initialized WGPU and want to supply …\nThis enum describes the possible errors that can occur …\nThis enum describes the different ways to configure WGPU …\nThis data structure provides settings for initializing …\nThe different options that are given to the selected …\nThe backends to use for the WGPU instance.\nThe label for the device. This is used to identify the …\nThe memory hints for the device.\nThe required features for the device.\nThe required limits for the device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe flags to fine-tune behaviour of the WGPU instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe power preference is used to influence the WGPU adapter …\nThe WGPU adapter to use.\nThe WGPU device to use.\nThe WGPU instance to use.\nThe WGPU queue to use.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nEnable writes to all channels.\nWhether wgpu should expose adapters that run on top of …\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nBinding is backed by a top level acceleration structure\nA ray-tracing acceleration structure binding.\nFlags for an acceleration structure.\nFlags for a geometry inside a bottom level acceleration …\nUpdate mode for acceleration structure builds.\nHandle to a physical graphics and/or compute device.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nThe texture can be both read and written in the shader via …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nChooses Immediate -&gt; Mailbox -&gt; Fifo (on web) based on …\nChooses FifoRelaxed -&gt; Fifo based on availability.\nNo explicit minor version is requested, the driver …\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nAllows a buffer to be used as input for a bottom level …\nIf not present, the texture can’t be blended into the …\nEnable blue channel writes\nSupported when targeting the web through webassembly with …\nSupports buffer bindings with sizes that aren’t a …\nAllows the user to create arrays of buffers in shaders:\nBack face\nBackends supported by wgpu.\nOptions that are passed to a given backend.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nHandle to a binding group.\nDescribes a group of bindings and the resources to be …\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nHandle to a binding group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nBottom Level Acceleration Structure (BLAS).\nBuilds the given sets of geometry into the given Blas.\nContains the sets of geometry that go into a Blas.\nDescriptor for the size defining attributes, for a bottom …\nDefinition for a triangle geometry for a Bottom Level …\nDescriptor for the size defining attributes of a triangle …\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nHandle to a GPU-accessible buffer.\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for buffer slice sizes.\nA slice of a <code>Buffer</code>, to be mapped, used for vertex or …\nDifferent ways that you can use a buffer.\nA read-only view of a mapped buffer’s bytes.\nA write-only view of a mapped buffer’s bytes.\nAlways perform a full build.\nEnables clear to zero for textures.\nAmount of times the clipper is invoked. This is also the …\nAmount of primitives that are not culled by the clipper. …\nEnable red, green, and blue channel writes\nSupports comparison samplers.\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nAmount of times a compute shader is invoked. This will be …\nAllows the user to set a …\nBuffer to buffer copy as well as buffer clear offsets and …\nBuffer-Texture copies must have <code>bytes_per_row</code> aligned to …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nSupports textures that are cube arrays.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nRGBA double precision color.\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nHandle to a command buffer on the GPU.\nDescribes a <code>CommandBuffer</code>.\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nCompilation information for a shader module.\nA single message from the shader compilation process.\nThe type of a compilation message.\nSpecifies how the alpha channel of the textures should be …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nDescribes the timestamp writes of a compute pass.\nHandle to a compute pipeline.\nDescribes a compute pipeline.\nConstant\nContext version see BlasBuildEntry.\nContext version of BlasGeometries.\nContext version of BlasTriangleGeometry.\nView of a texture which can be used to copy to a texture, …\n<code>wgpu-core</code>’s internal counters.\nCpu / Software Rendering.\nDescriptor to create bottom level acceleration structures.\n<code>Instance::create_surface()</code> or a related function failed.\nDescriptor to create top level acceleration structures.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nSupports depth bias clamping\nBy default, polygon depth is clipped to 0-1 range …\nSupports copies between depth textures and buffers.\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10 and later\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nAfter Device::destroy\nOpen connection to a graphics and/or compute device.\nDescribes a <code>Device</code>.\nReason for “lose the device”.\nSupported physical device types.\nDiscards the resulting value of the render pass for this …\nDiscrete GPU with separate CPU/GPU memory.\nDisplay-P3 color space\nLists various ways the underlying platform does not …\nBinary flags listing features that may or may not be …\nD.component\nD.alpha\nDirect3D-12 (Windows)\nConfiguration for the DX12 backend.\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nIntegral type used for dynamic bind group offsets.\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nDummy backend, used for testing.\nFunction passes if new value is equal to existing value. …\nError type\nAn error message.\nFilter for error scopes.\nLower level source of the error.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nIf not present, the texture can’t be sampled with a …\nAllows textures with formats “r32float”, “rg32float…\nBinding is visible from the fragment shader of a render …\nAmount of times the fragment shader is ran. Accounts for …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nOne half-precision float (no Rust equiv). <code>f32</code> in shaders.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment processing in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nEnable green channel writes\nOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, …\nConfiguration for the OpenGL/OpenGLES backend.\nSelects which OpenGL ES 3 minor version to request.\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\n<code>wgpu-hal</code>’s internal counters.\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nIgnore the stencil state for the face.\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nSupports indirect drawing and dispatching.\nAllows non-zero value for the <code>first_instance</code> member in …\nA timestamp that is invalid due to the platform not having …\nOld name for a <code>TexelCopyBufferInfo</code>.\nOld name for a <code>TexelCopyTextureInfo</code>.\nOld name for a <code>CopyExternalImageDestInfo</code>.\nOld name for a <code>TexelCopyBufferLayout</code>.\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nAn informational message.\nThe alpha channel, if it exists, of the textures is …\nContext for all other wgpu objects. Instance of wgpu.\nVertex data is advanced every instance.\nOptions for creating an instance.\nInstance debugging flags.\nIntegrated GPU with shared CPU/GPU memory.\nCatch only internal errors.\nInternal error. Used for signalling any failures not …\nAll internal counters, exposed for debugging purposes.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nObject debugging label.\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe swap chain has been lost and needs to be recreated.\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSize to align mappings.\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nThe largest number that can be returned by …\nSupported on macOS/iOS\nSupports sample-rate shading.\nAllows a texture of this format to back a view passed as …\nAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nPresentation frames are kept in a single-frame queue. …\nPassed to <code>Device::poll</code> to control how and if it should …\nPassed to <code>Device::poll</code> to control how and if it should …\nResult of a maintain operation.\nApplications that have control over the content that is …\nType of buffer mapping.\nmax(Src, Dst)\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nMetal API (Apple platforms)\nmin(Src, Dst)\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nNo value.\nPower usage is not considered when choosing an adapter.\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nQuery returns a single 64-bit number, serving as an …\nMore information coming soon …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nAcquiring a texture failed with a generic error. Check …\nCatch only out-of-memory errors.\nOut of memory error\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the swap …\nThe surface under the swap chain has changed.\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nBlend mode that does standard alpha blending with …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nAlignment all push constants need\n…\nFavor performance over memory usage (the default value).\nHandle to a pipeline cache, which is used to accelerate …\nDescribes a pipeline cache, which allows reusing …\nAdvanced options for use when a pipeline is compiled\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\n…\nCheck the device for a single time without blocking.\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nIf possible, perform an incremental update.\nBehavior of the presentation engine based on frame rate.\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a query set\nSize of a single piece of query data.\nHandle to a query set.\nDescribes a <code>QuerySet</code>.\nType of query contained in a QuerySet.\nHandle to a command queue on a device.\nA write-only view into a staging buffer.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 64 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nAllows for usage of textures of format …\nRaw window &amp; display handle.\nMap only for reading\nThe texture can only be read in the shader and it must be …\n…\nThe texture can be both read and written in the shader and …\nPre-prepared reusable bundle of GPU operations.\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nEncodes a series of GPU operations into a reusable “…\nDescribes a <code>RenderBundleEncoder</code>.\nIn-progress recording of a render pass: a list of render …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nDescribes the timestamp writes of a render pass.\nHandle to a rendering (graphics) pipeline.\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nAdditional information required when requesting an adapter.\nOptions for requesting adapter.\nRequesting a device from an <code>Adapter</code> failed.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use f32 atomic load, store, add, sub, …\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nEnables creating shader modules from SPIR-V binary data …\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nWhen used as a STORAGE texture, then a texture with this …\nAllows a texture to be used with image atomics. Requires …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nWhen used as a STORAGE texture, then a texture with this …\nWhen used as a STORAGE texture, then a texture with this …\nAllows the user to create uniform arrays of storage …\nWhen used as a STORAGE texture, then a texture with this …\nAllows compute and fragment shaders to use the subgroup …\nAllows shaders to use the subgroup barrier\nAllows vertex shaders to use the subgroup operation …\nSupports specifying which view formats are allowed when …\nHandle to a sampler.\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nDescriptor for a shader module given by SPIR-V binary, for …\nDescribes how shader bound checks should be performed.\nSource of a shader module.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nOne signed short (u16). <code>i32</code> in shaders.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed byte (i8). <code>i32</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nOne signed short (i16). [-32767, 32767] converted to float …\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nOne signed byte (i8). [-127, 127] converted to float [-1, 1…\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nSome value of type <code>T</code>.\nA human-readable representation for a span, tailored for …\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nThe statically-linked variant of Dxc.\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nIdentifier for a particular call to <code>Queue::submit</code>. Can be …\nThere are no active submissions in flight as of the …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nHandle to a presentable surface.\nDefines the capabilities of a given surface and adapter.\nDescribes a <code>Surface</code>.\nResult of an unsuccessful call to …\nStatus of the received surface image.\nThe window/canvas/surface/swap-chain/etc. a surface is …\nThe window/canvas/surface/swap-chain/etc. a surface is …\nSurface texture that can be rendered to. Result of a …\nEnables device specific texture format features.\nEnables image atomic fetch add, and, xor, or, min, and max …\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables R64Uint image atomic min and max.\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows a buffer to be used as input for a top level …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nHandle to a texture on the GPU.\nA texture binding.\nKind of data the texture holds.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nHandle to a texture view.\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nA timeout was encountered while trying to acquire the next …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\nTop Level Acceleration Structure (TLAS).\nEntry for a top level acceleration structure build. Used …\nSafe instance for a Tlas.\nThe safe version of TlasEntry, containing TlasInstances …\n[0, 0, 0, 0]\nTriangle geometry variant.\nTriangle geometries.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nTriangle geometry version.\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nAllows shaders to index uniform buffer and storage texture …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nOne unsigned short (u16). <code>u32</code> in shaders.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned byte (u8). <code>u32</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nType for the callback of uncaptured error handler\nA buffer for uniform values.\nThe surface status is not known since <code>get_current_texture</code> …\nTriggered by driver\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nOne unsigned short (u16). [0, 65535] converted to float […\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nOne unsigned byte (u8). [0, 255] converted to float [0, 1] …\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\nFour unsigned 8-bit integers, packed into a 32-bit integer …\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\n…\nEnable validation, if possible.\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nIf this is true, use of <code>@builtin(vertex_index)</code> and …\nEnables using 64-bit types for vertex attributes.\nBinding is visible from the vertex and fragment shaders of …\nAmount of times the vertex shader is ran. Accounts for the …\nSupports storage buffers in vertex shaders.\nVertex buffer strides have to be aligned to this number.\nEnables bindings of writable storage buffers and textures …\nSupports specifying which view format values are allowed …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nAllows using the VK_KHR_external_memory_win32 Vulkan …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nCatch only validation errors.\nValidation error, signifying a bug in code or data\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nDescribes the vertex processing in a render pipeline.\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API (Windows, Linux, Android, MacOS via …\nSupports all the texture usages described in WebGPU. If …\nSame as WaitForSubmissionIndex but waits for the most …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nOn wgpu-core based backends, block until the given …\nA warning message.\nWGSL module as a string slice.\nWGSL language extensions.\nWindow handle producer.\nSuper trait for window handles as used in <code>SurfaceTarget</code>.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\nZero origin.\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nAlpha component of the color\nAmount of allocated gpu memory attributed to acceleration …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nCreates a new configuration where all checks are enabled …\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nVertex formats allowed for creating and building BLASes\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nGet the binding resource for the underling acceleration …\nReturn the binding view of the entire buffer.\nReturn the binding view of the entire buffer.\nReturns the inner hal Surface using a callback. The hal …\nApply a callback to this <code>Adapter</code>’s underlying backend …\nReturns the inner hal Buffer using a callback. The hal …\nApply a callback to this <code>Device</code>’s underlying backend …\nReturn a reference to a specific backend instance, if …\nReturns the inner hal Texture using a callback. The hal …\nReturns the inner hal TextureView using a callback. The …\nReturns the inner hal CommandEncoder using a callback. The …\nMake an <code>TexelCopyTextureInfo</code> representing the whole …\nThe copy aspect.\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be […\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nThe list of attributes which comprise a single vertex.\nBlue component of the color\nBack face mode.\nBackend used for device\nOptions the control the behavior of various backends.\nWhich <code>Backends</code> to enable.\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nBegins recording of a compute pass.\nStart a occlusion query on this render pass. It can be …\nStart a pipeline statistics query on this compute pass. It …\nStart a pipeline statistics query on this render pass. It …\nBegins recording of a render pass.\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nDepth bias state.\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReference to the acceleration structure.\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is […\nEnforce bounds checks in shaders, even if the underlying …\nThe buffer to be copied to/from.\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nAmount of allocated gpu memory attributed to buffers, in …\nThe format of any vertex buffers used with this pipeline.\nBuild bottom and top level acceleration structures.\nBuild bottom and top level acceleration structures. See …\nReturns the size in bytes of the index format\nBytes per “row” in an image.\nBytes per “row” in an image.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nCreates a new configuration where the shader is fully …\nDepth bias clamp value (absolute).\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nThe color space of this texture.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nSurface that is required to be presentable with the …\nSurface that is required to be presentable with the …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nInitializes <code>Surface</code> for presentation.\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\n<code>wgpu-core</code> counters.\nTotal count of queries the set contains. Must not be zero. …\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nConverts a wgpu-hal <code>ExposedAdapter</code> to a wgpu <code>Adapter</code>.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreate a bottom level acceleration structure, used inside …\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> from a wgpu-hal Buffer.\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreate a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal <code>OpenDevice</code>\nCreate a <code>PipelineCache</code> with initial data\nCreates a <code>PipelineLayout</code>.\nCreates a new <code>QuerySet</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a shader module.\nCreates a shader module from SPIR-V binary directly.\nCreates a shader module with flags to dictate runtime …\nDeprecated: Use <code>create_shader_module_trusted</code> instead.\nCreates a new surface targeting a given …\nCreates a new surface targeting a given …\nCreates a new <code>Texture</code>.\nCreates a <code>Texture</code> from a wgpu-hal Texture.\nCreate a top level acceleration structure, used for ray …\nCreates a view of this texture.\nThe face culling mode.\nCustom index for the instance used inside the shader.\nThe data used to initialise the cache initialise\nEnable recommended debugging and validation flags.\nCreates a new instance of wgpu with default options.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nReturns the depth or layer count of this <code>Texture</code>.\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nInformation about the depth attachment that this render …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\nDestroy the associated native resources as soon as …\nDestroy this device.\nDestroy the associated native resources as soon as …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the dimension of this <code>Texture</code>.\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDraws primitives from the active vertex buffer(s).\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nDraws primitives from the active vertex buffer(s) based on …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nOptions for the DX12 backend.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns which backends can be picked for the current build …\nEnd the occlusion query on this render pass. It can be …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nEnd the pipeline statistics query on this compute pass. It …\nEnd the pipeline statistics query on this render pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nRetrieves all available <code>Adapter</code>s that match the given …\nReturns true if variants are same (ignoring clear value)\nExecute a render bundle, which is a set of pre-recorded …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nWhether to create a cache without data when the provided …\nThe features which can be used to create devices on this …\nThe features which can be used on this device.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nFinishes recording and returns a <code>RenderBundle</code> that can be …\nNumber of indexes to skip in the index buffer (optional, …\nOffset into the vertex buffer as a factor of the vertex …\nFlags for the geometry.\nFlags for the bottom level acceleration structure.\nFlags to tune the behavior of the instance.\nFlags for the bottom level acceleration structure.\nCombined boolean flags.\nAdditional property flags for the format.\nIndicates that only a fallback adapter can be returned. …\nIndicates that only a fallback adapter can be returned. …\nIf false, the caller MUST ensure that all passed shaders …\nDrops the lifetime relationship to the parent command …\nDrops the lifetime relationship to the parent command …\nReturns the format of this <code>Texture</code>.\nThe texture format of the swap chain. The only formats …\nFormat of the texture.\nFormat of the texture view. Either must be the same as the …\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer decent defaults from the build type.\nGenerates a set of backends from a comma separated list of …\nCreate an new instance of wgpu from a wgpu-core instance.\nChoose which DX12 shader compiler to use from the …\nChoose which minor OpenGL ES version to use from the …\nGet a power preference from the environment variable …\nGets a set of backends from the environment variable …\nChoose instance options entirely from environment …\nDerive defaults from environment variables. See …\nChoose backend options by calling <code>from_env</code> on every field.\nChoose OpenGL backend options by calling <code>from_env</code> on every …\nChoose DX12 backend options by calling <code>from_env</code> on every …\nCreate an new instance of wgpu from a wgpu-hal instance.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\nGenerate an GPU memory allocation report if the underlying …\nGenerates memory report.\nGeometries.\nGet a reference to all instances.\nGet an object representing the bind group layout at a …\nGet an object representing the bind group layout at a …\nReturns the capabilities of the surface when used with the …\nGet the compilation info for the shader module.\nReturns the next texture to be presented by the swapchain …\nGet the data associated with this pipeline cache. The data …\nReturn a default <code>SurfaceConfiguration</code> from width and …\nGet info about the adapter itself.\nGet info about the adapter itself.\nQuery internal counters from the native backend for …\nGain read-only access to the bytes of a mapped <code>Buffer</code>.\nGain write access to the bytes of a mapped <code>Buffer</code>.\nGet a single mutable reference to an instance. Returns …\nGet a mutable slice to a range of instances. Returns None …\nGenerates a timestamp using the clock used by the …\nReturns the features supported for a given texture format …\nGets the amount of nanoseconds each tick of a timestamp …\nOptions for the OpenGL/OpenGLES backend.\nWhich OpenGL ES 3 minor version to request, if using …\nReturns the format features guaranteed by the WebGPU spec.\n<code>wgpu-hal</code> counters.\nRaw handle to the acceleration structure, used inside raw …\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nReturns the height of this <code>Texture</code>.\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nMacro to load raw SPIR-V data statically, for use with …\nLoad WGSL source code from a file at compile time.\nIndex buffer (optional).\nNumber of indices. Only needed if an index buffer is used. …\nFormat of an index. Only needed if an index buffer is used.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nInserts debug marker.\nReference to the raw instance buffer, each instance is …\nNumber of instances in the instance buffer.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns true if this timestamp is the invalid timestamp.\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the result is <code>Self::SubmissionQueueEmpty</code>`.\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nReturns whether this adapter may present to the passed …\nThis maintain represents a wait of some kind.\nReturns true if the underlying platform offers complete …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLabel for the bottom level acceleration structure.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label for the device.\nDebug label for the query set.\nDebug label of the render bundle encoder. This will show …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the texture. This will show up in graphics …\nDebug label of the texture view. This will show up in …\nLabel for the top level acceleration structure.\nDebug label of the bind group. This will show up in …\nDebug label of the bind group layout. This will show up in …\nDebug label of the pipeline cache. This might show up in …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the render bundle encoder. This will show …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the shader module. This will show up in …\nDebug label of this command buffer.\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nLength in code units (in bytes) of the span.\nThe best limits which can be used to create devices on …\nThe limits which can be used on this device.\nAdditional limits\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nHow data should be read through this attachment.\nWhere in the source code the message points at.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nMap the buffer. Buffer is ready to map once the callback …\nMap on the wait index type.\nTakes a closure and maps the label of the command buffer …\nAllows a buffer to be mapped immediately after they are …\nMask for the instance used inside the shader to filter …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nNumber of instances that can be stored in the acceleration …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nNumber of gpu memory allocations.\nHints for memory allocation strategies.\nThe text of the message.\nThe type of the message.\nThe messages from the shader compilation process.\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nReturns the mip_level_count of this <code>Texture</code>.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nThe multi-sampling properties of the pipeline.\nIf this render bundle will rendering to multiple array …\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nConstruct TlasPackage consuming the Tlas (prevents …\nConstruct TlasInstance.\nCreate an new instance of wgpu.\nConstruct TlasPackage consuming the Tlas (prevents …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nOffset into the buffer that is the start of the texture. …\nBase offset of the buffer, in bytes.\n0-based Offset in code units (in bytes) of the start of …\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nRegisters a callback when the previous call to submit …\nSet a callback for errors that are not handled in error …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nPanics if the MaintainResult is not Ok.\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nCheck for resource cleanups and mapping callbacks. Will …\nPolls all devices.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nPop an error scope.\nPower preference for the adapter.\nPower preference for the adapter.\nThe premultiplication of this texture\nThe premultiplication of this texture\nSchedule this texture to be presented on the owning …\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nThe properties of the pipeline at the primitive assembly …\nSet of push constant ranges this pipeline uses. Each …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nPush an error scope.\nThe query set to write to.\nThe query set to write to.\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nRetrieves an <code>Adapter</code> which matches the given …\nRequests a connection to a physical device, creating a …\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\n“Rows” that make up a single “image”.\nReturns the sample_count of this <code>Texture</code>.\nSample count of texture. If this is not 1, texture must …\nSample count this render bundle is capable of rendering …\nSample count supported by a given texture format.\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSet the bottom level acceleration structure.\nSets the blend color as used by some of the blending modes.\nSet a DeviceLostCallback on this device.\nSets the active index buffer.\nSets the active index buffer.\nSets the active compute pipeline.\nSets the active render pipeline.\nSets the active render pipeline.\nSet push constant data for subsequent dispatch calls.\nSet push constant data.\nSet push constant data for subsequent draw calls.\nSets the scissor rectangle used during the rasterization …\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nAssign a vertex buffer to a slot.\nSets the viewport used during the rasterization stage to …\nWhich DX12 shader compiler to use.\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the length of the buffer allocation in bytes.\nReturns the size of this <code>Texture</code>.\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nSub descriptor for the size defining attributes of a …\nReturns the size multiple requirement for a texture using …\nReturn a slice of a <code>Buffer</code>’s bytes.\nSlope depth biasing factor.\nSource code for the shader.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStarts frame capture.\nStencil state.\nWhat operations will be performed on the stencil part of …\nIf the stencil aspect of the depth stencil attachment is …\nHow often this vertex buffer is “stepped” forward.\nStops frame capture.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmits a series of finished command buffers for execution.\n<code>true</code> if the acquired buffer can still be used for …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAccessible view of the frame.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nGet a reference to the underling Tlas.\nReference to the acceleration structure.\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nAffine transform matrix 3x4 (rows x columns, row major …\nTransform buffer containing 3x4 (rows x columns, row …\nTransform buffer offset in bytes (optional, required if …\nKind of query that this query set should contain.\nThe type of the binding\nCreates a new configuration where none of the checks are …\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlushes any pending write operations and unmaps the buffer …\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nReturns the allowed usages for this <code>Buffer</code>.\nReturns the allowed usages of this <code>Texture</code>.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only usage guaranteed to …\nAllowed usages of the texture. If used in other ways, the …\nThe allowed usage(s) for the texture view. Must be a …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\nUtility structures and functions that are built on top of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nMacro to produce an array of <code>VertexAttribute</code>.\nVertex buffer.\nNumber of vertices.\nFormat of a vertex position, must be […\nVertex stride.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nConstruct a wait variant\nConstruct a WaitForSubmissionIndex variant\nReturns set of supported WGSL language extensions …\nReturns the width of this <code>Texture</code>.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nTakes the given options, modifies them based on the …\nTakes the given flags, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given options, modifies them based on the …\nSchedule a data write into <code>buffer</code> starting at <code>offset</code>.\nWrite to a buffer via a directly mapped staging buffer.\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nSchedule a write of some data into a texture.\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nWhether workgroup scoped memory will be initialized with …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nDescriptor for each triangle geometry.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to <code>dxcompiler.dll</code>.\nPath to <code>dxil.dll</code>.\nDescription of the validation error.\nDescription of the internal GPU error.\nLower level source of the error.\nLower level source of the error.\nLower level source of the error.\nDefines the range of allowed memory block sizes for …\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nNo value.\nSome value of type <code>T</code>.\nThe index of a queue submission.\nAllocating resource ids, and tracking the resources they …\nPresentation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nBind group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a pipeline layout.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nDescribes a pipeline layout.\nBind groups that this pipeline uses. The first entry will …\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nSlot for which binding provides resource. Corresponds to …\nThe resources to bind to this bind group.\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group.\nDebug label of the bind group.\nDebug label of the bind group layout.\nDebug label of the pipeline layout.\nDebug label of the pipeline layout.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nSet of push constant ranges this pipeline uses. Each …\nSet of push constant ranges this pipeline uses. Each …\nResource to attach to the binding\nResource to attach to the binding\nDescribes a depth/stencil attachment to a render pass.\nDescribes an attachment location in words.\nLoads the specified value for this attachment into the …\nError encountered while attempting a clear.\nA buffer of commands to be submitted to the GPU for …\nThe mutable state of a <code>CommandBuffer</code>.\nError encountered when performing a compute pass.\nError encountered when performing a compute pass.\nError encountered while attempting to do a copy on a …\nError type returned from <code>RenderBundleEncoder::new</code> if the …")