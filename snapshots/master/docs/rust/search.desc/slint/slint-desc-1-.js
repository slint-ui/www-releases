searchState.loadedDescShard("slint", 1, "The intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves specified flag(s) from self\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nRetrieves an <code>Adapter</code> which matches the given …\nRequests a connection to a physical device, creating a …\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\nThe number of bytes in the last row of the copy region.\nThe stride in bytes between the start of one row in an …\n“Rows” that make up a single “image”.\nReturns the sample_count of this <code>Texture</code>.\nSample count of texture. If this is not 1, texture must …\nSample count this render bundle is capable of rendering …\nSample count supported by a given texture format.\nReturns the sample type compatible with this format and …\nAn optional selector to transition only part of the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCalls <code>Self::insert</code> if <code>set</code> is true and otherwise calls …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSet the bottom level acceleration structure.\nSets the blend color as used by some of the blending modes.\nSet a DeviceLostCallback on this device.\nSets the active index buffer.\nSets the active index buffer.\nSets the active compute pipeline.\nSets the active render pipeline.\nSets the active render pipeline.\nSet push constant data for subsequent dispatch calls.\nSet push constant data.\nSet push constant data for subsequent draw calls.\nSets the scissor rectangle used during the rasterization …\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nAssign a vertex buffer to a slot.\nSets the viewport used during the rasterization stage to …\nWhich DX12 shader compiler to use.\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the length of the buffer allocation in bytes.\nReturns the size of this slice.\nReturns the size of this <code>Texture</code>.\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nSub descriptor for the size defining attributes of a …\nReturns the size multiple requirement for a texture using …\nReturns a <code>BufferSlice</code> referring to the portion of <code>self</code>’s …\nReturn another <code>BufferSlice</code> referring to the portion of <code>self</code>…\nSlope depth biasing factor.\nShader MSL source.\nBinary SPIR-V data, in 4-byte words.\nShader HLSL source.\nShader DXIL source.\nSource code for the shader.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStarts a capture in the attached graphics debugger.\nThe new state to transition to.\nThe new state to transition to.\nStencil state.\nWhat operations will be performed on the stencil part of …\nIf the stencil aspect of the depth stencil attachment is …\nHow often this vertex buffer is “stepped” forward.\nStops the current capture in the attached graphics …\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmits a series of finished command buffers for execution.\n<code>true</code> if the acquired buffer can still be used for …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBitwise xor - <code>self ^ other</code>\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nReturns the <code>Texture</code> that this <code>TextureView</code> refers to.\nThe texture to be copied to/from.\nAccessible view of the frame.\nThe texture to transition.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nReturns the theoretical memory footprint of a texture with …\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nToggles specified flag(s) in self\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nSum of the memory used by all allocations, in bytes.\nSum of the memory reserved by all memory blocks including …\nWhether API tracing for debugging is enabled, and where …\nAffine transform matrix 3x4 (rows x columns, row major …\nTransform buffer containing 3x4 (rows x columns, row …\nTransform buffer offset in bytes (optional, required if …\nTransition resources to an underlying hal resource state.\nKind of query that this query set should contain.\nThe type of the binding\nCreates a new configuration where none of the checks are …\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBitwise or - <code>self | other</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmaps the buffer from host memory.\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nReturns the allowed usages for this <code>Buffer</code>.\nReturns the allowed usages of this <code>Texture</code>.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only usage guaranteed to …\nAllowed usages of the texture. If used in other ways, the …\nThe allowed usage(s) for the texture view. Must be a …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the acceleration …\nModify the current limits to use the buffer alignment …\nThe minimum guaranteed limits for acceleration structures …\nModify the current limits to use the resolution limits of …\nUtility structures and functions that are built on top of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nMacro to produce an array of [<code>VertexAttribute</code>].\nVertex buffer.\nNumber of vertices.\nFormat of a vertex position, must be …\nVertex stride, must be greater than …\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nReturns true if the result is either <code>Self::WaitSucceeded</code> …\nReturns set of supported WGSL language extensions …\nReturns the width of this <code>Texture</code>.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nThe width of the copy region in blocks.\nTakes the given options, modifies them based on the …\nTakes the given flags, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given options, modifies them based on the …\nCopies the bytes of <code>data</code> into <code>buffer</code> starting at <code>offset</code>.\nPrepares to write data to a buffer via a mapped staging …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nCopies the bytes of <code>data</code> into into a texture.\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nWhether workgroup scoped memory will be initialized with …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nWhether this acceleration structure can be used to create …\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nDescriptor for each triangle geometry.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to <code>dxcompiler.dll</code>.\nMaximum shader model the given dll supports.\nDescription of the validation error.\nDescription of the internal GPU error.\nLower level source of the error.\nLower level source of the error.\nLower level source of the error.\nDefines the range of allowed memory block sizes for …\nThe ID of the connector associated with the selected mode.\nThe file descriptor of the DRM device.\nThe display height of the selected mode.\nThe plane index on which to create the surface.\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\nThe display refresh rate of the selected mode multiplied …\nThe display width of the selected mode.\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nAllow the acceleration structure to be compacted in a copy …\nAllow retrieval of the vertices of the triangle hit by a …\nAllow for incremental updates (no change in size), …\n<code>offset</code> - offset in bytes\nFlags for acceleration structures\nInformation of the required size for a corresponding …\nEntries for a single descriptor\nFlags for acceleration structure geometries\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>first_vertex</code> - offset in the vertex buffer (as number of …\nBindGroup descriptor.\ncbindgen:ignore\nBindGroupLayout descriptor.\nPipeline layout creation flags.\nA region of a buffer made visible to shaders via a …\nUpdates use source_acceleration_structure if present, else …\nFormat can be used as color and input attachment.\nFormat can be used as color (with blending) and input …\nFormat can be copied to.\nFormat can be copied from.\nThis API’s command buffer type.\nEncoder and allocation pool for <code>CommandBuffer</code>s.\nDescribes a compute pipeline.\nFormat can be used as depth-stencil and input attachment.\nA connection to a GPU and a pool of resources to use with …\nA callback to signal that wgpu is no longer using a …\nBase trait for all resources, allows downcasting via <code>Any</code>.\nD3D12: Add support for <code>first_vertex</code> and <code>first_instance</code> …\nA value you can block on to wait for something to finish.\nTexture format capability flags.\nAll buffers, buffer addresses and offsets will be ignored.…\nD3D12: Add support for the builtins that the other flags …\nError occurring while trying to create an instance, or …\nOptimize for low memory footprint (both while building and …\nFormat can be used for render pass resolve targets.\nFormat can be multisampled by x16.\nFormat can be multisampled by x2.\nFormat can be multisampled by x4.\nFormat can be multisampled by x8.\nNO_DUPLICATE_ANY_HIT_INVOCATION, not useful unless using …\nD3D12: Add support for <code>num_workgroups</code> builtins via push …\nNaga shader module.\nNo value.\nIs OPAQUE (is there no alpha test) recommended as …\nAllows for bind group binding arrays to be shorter than …\nOptimize for fast build time, recommended if geometry is …\nOptimize for fast ray tracing performance, recommended if …\nPipeline layout creation flags.\nDescribes a programmable pipeline stage.\nSize of a single occlusion/timestamp query, when copied …\nDescribes a render (graphics) pipeline.\nFormat can be sampled.\nFormat can be sampled with a linear sampler.\nFormat can be sampled with a min/max reduction sampler.\nFormat can be used as storage with atomics.\nFormat can be used as storage with read-only access.\nFormat can be used as storage with both read and write …\nFormat can be used as storage with write-only access.\nShader input.\nSome value of type <code>T</code>.\nDescribes information about what a <code>Surface</code>’s …\nTexture format capability flags.\nTextureView descriptor.\nUse <code>BlasTriangleGeometry::transform_buffer</code> when building a …\nDescribes how the vertex buffer is interpreted.\nReturn the next texture to be presented by <code>self</code>, for the …\nA hook for when a wgpu-core buffer is created from a raw …\nA hook for when a wgpu-core texture is created from a raw …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nReturns the backend this adapter is using.\nBegin a new compute pass, clearing all active bindings.\nBegin encoding a new command buffer.\nSafety:\nBegin a new render pass, clearing all active bindings.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe buffer being bound.\nThe alignment of the start of the buffer used as a GPU …\nThe alignment of the row pitch of the texture data stored …\nTo get the required sizes for the buffer allocations use …\nThe cache which will be used and filled when compiling …\nThe cache which will be used and filled when compiling …\nThe cache which will be used and filled when compiling …\nThe effect of draw calls on the color aspect of the output …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAlpha composition mode.\nList of supported alpha composition modes.\nConfigure <code>self</code> to use <code>device</code>.\nPipeline constants\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCopy from buffer to texture. Works with a single array …\nCopy from texture to buffer. Works with a single array …\nCopy from one texture to another. Works with a single …\nCreates a bind group layout.\nCreates a new buffer.\nCreate a fresh <code>CommandEncoder</code>.\nCreates a new texture.\nCurrent extent of the surface, if known.\nSource codes for debug\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nFree <code>buffer</code> and any GPU resources it owns.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDiscard the command list under construction.\nRelinquish an acquired texture without presenting it.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe upper bound of the range (exclusive).\nEnd the current compute pass.\nReturn a fresh <code>CommandBuffer</code> holding the recorded commands.\nSafety:\nEnd the current render pass.\nThe name of the entry point in the compiled shader. There …\n<code>surface_hint</code> is only used by the GLES backend targeting …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRequested texture extent. Must be in …\nIndicate that CPU writes to mapped buffer memory should be …\nFormat of the surface textures.\nList of supported texture formats.\nThe fragment stage for this pipeline.\nThe fragment stage for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>PresentationTimestamp</code> using the adapter’s WSI.\nGLES API internals.\nAnalysis information of the module.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate that GPU writes to mapped buffer memory should be …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if only one flag is set\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nReturn a pointer to CPU memory mapping the contents of …\nRange for the number of queued frames.\nMaximum number of queued frames. Must be in …\nShader module IR.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nIf the pipeline will be used with a multiview render pass, …\nA dummy API implementation.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset at which the bound region starts.\nOrigin within a texture. Note: for 1D and 2D textures, Z …\nVertical synchronization mode.\nList of supported V-sync modes.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nThe size of the raw TLAS instance\nWhat the scratch buffer for building an acceleration …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReclaim all resources belonging to this <code>CommandEncoder</code>.\nSafety\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the bind group at <code>index</code> to <code>group</code>.\nSets a range in push constant data.\nThe size of the region bound, in bytes.\nThe compiled compute stage and its entry point.\nThe lower bound of the range (inclusive).\nStart a graphics debugger capture.\nHow often this vertex buffer is “stepped” forward.\nStop a graphics debugger capture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmit <code>command_buffers</code> for execution on GPU.\nThe presentation configuration no longer matches the …\nThe presentation configuration no longer matches the …\nReturns the capabilities of working with a specified …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the set of supported capabilities for a texture …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUnconfigure <code>self</code> on <code>device</code>.\nThe finest alignment of bound range checking for uniform …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove the mapping established by the last call to …\nSupported texture usage flags.\nAllowed usage of surface textures,\nContains either a single mutating usage as a target, or a …\nThe format of any vertex buffers used with this pipeline.\nThe vertex stage for this pipeline.\nAllows views of this texture to have a different format …\nAllows views of swapchain texture to have a different …\nVulkan API internals.\nWait for <code>fence</code> to reach <code>value</code>.\nWhether workgroup scoped memory will be initialized with …\nMaximum binding size for the shaders that only support <code>i32</code> …\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\nA wrapper around a <code>glow::Context</code> and the required EGL …\nA guard containing a lock to an <code>AdapterContext</code>, while the …\nRender to a <code>glow::NativeFramebuffer</code> Useful when the …\nReturns the underlying EGL context.\nReturns the EGL instance.\nReturns the EGL version the adapter context was created …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet’s the <code>glow::Context</code> without waiting for a lock\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain a lock to the EGL context and get handle to the …\nCreates a new external adapter using the specified loader …\nReturns the EGLDisplay corresponding to the adapter …\nSafety\nSafety\nCommand buffer type, which performs double duty as the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCallback to allow changing the vulkan device creation …\nArguments to the <code>CreateDeviceCallback</code>.\nCallback to allow changing the vulkan instance creation …\nArguments to the <code>CreateInstanceCallback</code>.\nUser data needed by …\nQualcomm OOMs when there are zero color attachments but a …\nIf the following code returns false, then nvidia will end …\nThe <code>Api::Fence</code> type for <code>vulkan::Api</code>.\nA collection of Vulkan fences, each associated with a …\nFeatures supported by a <code>vk::PhysicalDevice</code> and its …\nOnly generate SPIR-V for one entry point at a time.\nA Vulkan timeline semaphore.\nWorkaround flags.\nAdd the members of <code>self</code> into <code>info.enabled_features</code> and its …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe create info for the device. You may add or modify …\nThe create info for the instance. You may add or modify …\nCreates a new surface from the given drm configuration.\nReturn the instance extension names wgpu would like to …\nThe physical device features to enable. You may enable …\nSafety\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nVulkan entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe extensions to enable for the device. You must not …\nThe extensions to enable for the instance. You must not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nSafety\nSafety\nSafety\n<code>Instance::init</code> but with a callback. If you want to add …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSafety:\nCreate a <code>PhysicalDeviceFeatures</code> for opening a logical …\nThe queue create infos for the device. You may add or …\nReturns the queue family index of the device’s internal …\nSafety\nSafety\nSafety\nGet the raw Vulkan swapchain associated with this surface.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the present timing information which will be used for …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSafety\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe pending fence values have to be ascending.\nA raw display handle for Android NDK.\nRaw display handle for Android.\nA raw window handle for Android NDK.\nRaw window handle for Android NDK.\nA raw window handle for AppKit.\nA raw display handle for AppKit.\nRaw display handle for AppKit.\nRaw window handle for AppKit.\nThe handle to the display controller of the windowing …\nA raw window handle for the Linux Kernel Mode Set/Direct …\nA raw display handle for the Linux Kernel Mode Set/Direct …\nRaw display handle for the Linux Kernel Mode Set/Direct …\nRaw window handle for the Linux Kernel Mode Set/Direct …\nA raw window handle for the Linux Generic Buffer Manager.\nA raw display handle for the Linux Generic Buffer Manager.\nRaw display handle for the Linux Generic Buffer Manager.\nRaw window handle for the Linux Generic Buffer Manager.\nA raw window handle for Haiku.\nA raw display handle for Haiku.\nRaw display handle for Haiku.\nRaw window handle for Haiku.\nAn error that can occur while fetching a display or window …\nA display that acts as a wrapper around a display handle.\nDisplay that wraps around a raw display handle.\nWindow that wraps around a raw window handle.\nA handle to a window.\nThe underlying handle cannot be represented using the …\nA raw display handle for OpenHarmony OS NDK\nRaw display handle for OpenHarmony.\nA raw window handle for the OpenHarmony OS NDK\nRaw window handle for Ohos NDK.\nA raw window handle for the Redox operating system.\nA raw display handle for the Redox operating system.\nRaw display handle for the Redox operating system.\nRaw window handle for the Redox operating system.\nA display server handle for a particular windowing system.\nA window handle for a particular windowing system.\nA raw window handle for UIKit (Apple’s non-macOS …\nA raw display handle for UIKit (Apple’s non-macOS …\nRaw display handle for UIKit.\nRaw window handle for UIKit.\nThe underlying handle is not available.\nA raw window handle for Wayland.\nA raw display handle for Wayland.\nRaw display handle for Wayland.\nRaw window handle for Wayland.\nA raw window handle for the Web.\nA raw display handle for the Web.\nA raw window handle for a Web canvas registered via …\nRaw window handle for a Web canvas registered via …\nRaw display handle for the Web.\nA raw window handle for a Web offscreen canvas registered …\nRaw window handle for a Web offscreen canvas registered via\nRaw window handle for the Web.\nA raw window handle for Win32.\nRaw window handle for Win32.\nA raw window handle for WinRT.\nRaw window handle for WinRT.\nThe handle to a window.\nA raw display handle for Win32.\nRaw display handle for Windows.\nA raw window handle for Xcb.\nA raw display handle for Xcb.\nRaw display handle for Xcb.\nRaw window handle for Xcb.\nA raw window handle for Xlib.\nA raw display handle for Xlib.\nRaw display handle for Xlib.\nRaw window handle for Xlib.\nA pointer to an <code>ANativeWindow</code>.\nCreate an Android-based display handle.\nCreate an AppKit-based display handle.\nGet the underlying raw display handle.\nGet the underlying raw window handle.\nA pointer to a BDirectWindow object that might be null\nA pointer to a BWindow object\nCreate a <code>DisplayHandle</code> from a <code>RawDisplayHandle</code>.\nBorrow a <code>WindowHandle</code> from a <code>RawWindowHandle</code>.\nA pointer to an X server <code>xcb_connection_t</code>.\nA WinRT <code>CoreWindow</code> handle.\nA pointer to an Xlib <code>Display</code>.\nA pointer to a <code>wl_display</code>.\nGet a handle to the display controller of the windowing …\nThe drm file descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gbm device.\nThe gbm surface.\nCreate an Haiku-based display handle.\nThe <code>GWLP_HINSTANCE</code> associated with this type’s <code>HWND</code>.\nA Win32 <code>HWND</code> handle.\nAn ID value inserted into the data attributes of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty display handle.\nCreate a new handle to an <code>ANativeWindow</code>.\nCreate a new empty display handle.\nCreate a new handle to a view.\nCreate a new empty display handle.\nCreate a new handle to a window.\nCreate a new empty display handle.\nCreate a new handle to an <code>OHNativeWindow</code> on OpenHarmony.\nCreate a new empty display handle.\nCreate a new handle to a window.\nCreate a new empty display handle.\nCreate a new handle to a view.\nCreate a new handle to a display.\nCreate a new handle to a window.\nCreate a new handle to a connection and screen.\nCreate a new handle to a window.\nCreate a new display handle.\nCreate a new handle to a surface.\nCreate a new handle to a file descriptor.\nCreate a new handle to a plane.\nCreate a new handle to a device.\nCreate a new handle to a surface.\nCreate a new empty display handle.\nCreate a new handle to a canvas element.\nCreate a new handle from a pointer to <code>HtmlCanvasElement</code>.\nCreate a new handle from a pointer to an <code>OffscreenCanvas</code>.\nCreate a new empty display handle.\nCreate a new handle to a window.\nCreate a new handle to a window.\nA pointer to an <code>NSView</code> object.\nA pointer to the <code>JsValue</code> of an <code>HtmlCanvasElement</code>.\nA pointer to the <code>JsValue</code> of an <code>OffscreenCanvas</code>.\nCreate an OpenHarmony-based display handle.\nCreate an Orbital-based display handle.\nThe primary drm plane handle.\nAn X11 screen to use with this display handle.\nAn X11 screen to use with this display handle.\nA pointer to a <code>wl_surface</code>.\nA pointer to an <code>UIView</code> object.\nA pointer to an <code>UIViewController</code> object, if the view has …\nCreate a UiKit-based display handle.\nAn Xlib visual ID, or 0 if unknown.\nAn X11 <code>xcb_visualid_t</code>.\nCreate a Web-based display handle.\nA pointer to an orbclient window.\nAn Xlib <code>Window</code>.\nAn X11 <code>xcb_window_t</code>.\nGet a handle to the window.\nCreate a Windows-based display handle.\nDescribes a Buffer when allocating.\nUtility methods not meant to be in the main API.\nArgument buffer layout for <code>dispatch_indirect</code> commands.\nCPU accessible buffer used to download data back from the …\nArgument buffer layout for <code>draw_indexed_indirect</code> commands.\nArgument buffer layout for <code>draw_indirect</code> commands.\nThe texture is laid out densely in memory as:\nThe texture is laid out densely in memory as:\nMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.\nEfficiently performs many buffer writes by sharing and …\nTexture Blitting (Copying) Utility\nA builder for the <code>TextureBlitter</code> utility. If you want the …\nOrder in which texture data is laid out in memory.\nAdds extra conversion functions to <code>TextureFormat</code>.\nAligns a <code>value</code> to an <code>alignment</code>.\nAllocate a staging belt slice with the given <code>size</code> and …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nThe value added to the vertex index before indexing into …\nSets the <code>BlendState</code> that is used.\nReturns a new <code>TextureBlitter</code> with given settings.\nContents of a buffer on creation.\nCopies the data from the source <code>TextureView</code> to the target …\nCreates a Buffer with data to initialize it.\nUpload an entire texture and its mipmaps from a source …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nPrepare currently mapped buffers for use in a submission.\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds the <code>TextureFormat</code> corresponding to the given …\nThe number of indices to draw.\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nThe number of instances to draw.\nThe number of instances to draw.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the [<code>Backends::BROWSER_WEBGPU</code>] backend …\nDebug label of a buffer. This will show up in graphics …\nVersion of <code>make_spirv</code> intended for use with …\nCreate a new staging belt.\nReturns a new <code>TextureBlitterBuilder</code>\nReturns a <code>TextureBlitter</code> with default settings.\nCreate an new instance of wgpu, but disabling […\nA recommended key for storing <code>PipelineCache</code>s for the …\nAsynchronously read the contents of a buffer.\nRecall all of the closed buffers back to be reused.\nSets the <code>Sampler</code> Filtering Mode\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\n<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the …\nAssign a vertex buffer to a slot.\nFinds the <code>StorageFormat</code> corresponding to the given …\nUsages of a buffer. If the buffer is used in any way that …\nThe number of vertices to draw.\nAllocate a staging belt slice of <code>size</code> to be copied into …\nThe number of work groups in X dimension.\nThe number of work groups in Y dimension.\nThe number of work groups in Z dimension.\nNo value.\nSome value of type <code>T</code>.\nThe index of a queue submission.\nAllocating resource ids, and tracking the resources they …\nPresentation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to. …\nBind group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a pipeline layout.\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\nBind groups that this pipeline uses. The first entry will …\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nSlot for which binding provides resource. Corresponds to …\nThe resources to bind to this bind group.\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group.\nDebug label of the pipeline layout.\nDebug label of the bind group.\nDebug label of the bind group layout.\nDebug label of the pipeline layout.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nSet of push constant ranges this pipeline uses. Each …\nSet of push constant ranges this pipeline uses. Each …\nResource to attach to the binding\nResource to attach to the binding\nDescribes a depth/stencil attachment to a render pass.\nDescribes an attachment location in words.\nLoads the specified value for this attachment into the …\nError encountered while attempting a clear.\nA buffer of commands to be submitted to the GPU for …\nThe mutable state of a <code>CommandBuffer</code>.\nA pass’s encoder state and its validity are two distinct …\nError encountered when performing a compute pass, stored …\nError encountered when performing a compute pass.\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDiscards the resulting value of the render pass for this …\nError validating a draw call.\nErrors related to the state of a command or pass encoder.\nReturned immediately when an attempt is made to encode a …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nUsed internally by wgpu functions to indicate the encoder …\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nReturned by a subsequent call to <code>encoder.finish()</code>, if …\nDescribes an individual channel within a render pass, such …\nA command that can be recorded in a pass or bundle.\nVariant of <code>EncoderStateError</code> that includes the pass scope.\nDescribes the writing of timestamp values in a render or …\nError encountered when dealing with queries\nError encountered while trying to use queries\nDescribes a <code>RenderBundleEncoder</code>.\nError encountered when finishing recording a render bundle.\nError encountered when encoding a render command. This is …\nA pass’s encoder state and its validity are two distinct …\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nError encountered when performing a render pass.\nError encountered when performing a render pass.\nError encountered while trying to resolve a query.\nSet a range of push constants to values stored in …\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nThe command buffer has already been submitted.\nError encountered while attempting a data transfer.\nReturned when attempting to end a pass if the parent …\nThe copy aspect.\nThe copy aspect.\nThe index of the query set at which a start timestamp of …\nThe buffer to be copied to/from.\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nThe stream of commands.\nThe stream of commands.\nWhat operations will be performed on the depth part of the …\nWhat operations will be performed on the depth part of the …\nThe depth slice index of a 3D view. It must not be …\nThe depth slice index of a 3D view. It must not be …\nInformation about the depth attachment that this render …\nThe depth and stencil attachment of the render pass, if …\nDynamic offsets consumed by [<code>SetBindGroup</code>] commands in …\nDynamic offsets consumed by [<code>SetBindGroup</code>] commands in …\nThe index of the query set at which an end timestamp of …\nIf the pass is invalid, contains the error that caused the …\nIf the pass is invalid, contains the error that caused the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the render bundle encoder. This will show …\nDebug label of the render bundle encoder.\nThe layout of the texture data in this buffer.\nOperation to perform to the output attachment at the start …\nOperation to perform to the output attachment at the start …\nOperation to perform to the output attachment at the start …\nThe target mip level of the texture.\nThe target mip level of the texture.\nIf this render bundle will rendering to multiple array …\nDefines where the occlusion query results will be stored …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe premultiplication of this texture\nData used by <code>SetPushConstant</code> instructions.\nData used by <code>SetPushConstant</code> instructions.\nThe query set to write the timestamps to.\nIf true, the relevant channel is not changed by a …\nThe view that will receive the resolved output if …\nThe view that will receive the resolved output if …\nSample count this render bundle is capable of rendering to.\nWhat operations will be performed on the stencil part of …\nWhat operations will be performed on the stencil part of …\nOperation to perform to the output attachment at the end …\nOperation to perform to the output attachment at the end …\nOperation to perform to the output attachment at the end …\nStrings used by debug instructions.\nStrings used by debug instructions.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe byte offset within the push constant storage to write …\nThe number of bytes to write. This must be a multiple of …\nIndex in <code>push_constant_data</code> of the start of the data to be …\nSafety\nSafety\nSafety\nSafety\nStructure describing a logical device. Some members are …\nReturns the backend this device is using.\nSafety\nCreate a validator with the given validation flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOnly use this function in contexts where there is no <code>Device</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label for the device.\nChecks that we are operating within the memory budget …\nHints for memory allocation strategies.\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nWhether API tracing for debugging is enabled, and where …\nA texture or buffer to be freed soon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>closure</code> is guaranteed to be called.\nStructure describing a logical device. Some members are …\nDon’t use this error type with thiserror’s #[…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\n<code>op.callback</code> is guaranteed to be called.\nSafety\nCreates a compute pass.\nCreates a render pass.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nSafety\nCreate a shader module with the given <code>source</code>.\nSafety\nSafety\nCheck <code>device_id</code> for freeable resources and completed …\n<code>device_lost_closure</code> might never be called.\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nCreates a new surface targeting the given display/window …\nCreates a new surface from the given drm configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll all devices on all backends.\nSafety\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nSafety\nSafety\nSafety\nAll the resources tracked by a <code>crate::global::Global</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn identifier for a wgpu object.\nMarker trait used to determine which types uniquely …\nThe raw underlying representation of an identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoerce the identifiers into its raw underlying …\nMarker types for each resource.\nUnzip a raw identifier into its components.\nZip together an identifier and return its raw underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError when requesting a device from the adapter\nSafety\nReturns the backend this adapter is using.\nSurface that is required to be presentable with the …\nCreates a new surface targeting the given display/window …\nCreates a new surface from the given drm configuration.\nIndicates that only a fallback adapter can be returned. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPower preference for the adapter.\nWidth of abstract types, in bytes.\nStorage can be used as a target for atomic ops.\nIntersecting with Axis Aligned Bounding Boxes. Matches …\nAbstract floating-point type.\nWGSL abstract integer type.\nOpaque object representing an acceleration structure of …\nArray access with a computed index.\nAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known …\nAddressing space of variables.\nAllows an additional depth/stencil test to be performed …\nAn arena holding some kind of component (e.g., type, …\nHomogeneous list of elements.\nGet the length of an array. The expression must resolve to …\nSize of an array.\nCast a simple type to another kind.\nAtomic scalar.\nAtomic function.\nFunction on an atomic value.\nResult of an atomic operation.\nWidth of a boolean type, in bytes.\nMemory barrier flags.\n2D vector\nApply a binary operator.\nOperation that can be applied on two values.\nDescribes how an input/output variable is to be bound.\nArray of bindings.\nA code block is a vector of statements, with maybe a …\nA block containing more statements, to be executed …\nBoolean type.\nExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.\nAll gather from the same lane at the index given by the …\nAll gather from the active lane with the smallest index\nBuilt-in inputs and outputs.\nBuilt-in shader variable.\nNumber of bytes per scalar.\nCull back facing geometry.\nCull front facing geometry.\nCull non-opaque geometry.\nCull opaque geometry.\nCalls a function.\nResult of calling another function.\nInterpolate the value at the center of the pixel.\nInterpolate the value at a point that lies within all …\nComposite expression.\nConfirm a triangle intersection to be included in the …\nEnables adjusting depth without disabling early Z.\nConstant value.\nThe array size is constant.\nConstant value.\nSkips to the <code>continuing</code> block of the innermost enclosing …\nSynchronize invocations within the work group. The <code>Barrier</code> …\nCube map\n1D image\n2D image\n3D image\nDepth comparison image.\nCompute the derivative on an axis.\nAxis on which to compute a derivative.\nHint at which precision to compute a derivative.\nDoc comments preceding items.\nThe array size can change at runtime.\nExplicitly allows early depth/stencil tests.\nUse the value provided by the first or last vertex of the …\nEmit a range of expressions, visible to all statements …\nThe main function for a pipeline stage.\nAn expression that can be evaluated to obtain a value.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nForce all intersections to be treated as non-opaque.\nForce all intersections to be treated as opaque.\nHash map that is faster but not resilient to DoS attacks. …\nHash set that is faster but not resilient to DoS attacks. …\nInsertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but …\nInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but …\nUse the value provided by the first vertex of the current …\nIndicates that no interpolation will be performed.\nFloating point type.\nRequires depth/stencil tests to be performed before …\nA function defined in the module.\nFunction locals.\nA function argument.\nReference a function parameter, by its index.\nA function result.\nThe specific behavior of a <code>SubgroupGather</code> statement.\nAdd a candidate generated intersection to be included in …\nIntersecting with generated primitives. Matches …\nVariable defined at module level.\nReference a global variable.\nShader may rewrite depth only with a value greater than …\nA strongly typed reference to an arena item.\nOpaque handles, such as samplers and images.\nConditionally executes one of two blocks, based on the …\nPossibly multidimensional array of texels.\nPerforms an atomic operation on a texel value of an image.\nSub-class of the image type.\nThe number of dimensions an image has.\nLoad a texel from an image.\nType of an image query.\nQuery information from an image.\nSample a point from a sampled or a depth image.\nStores a texel value to an image.\nInitialize the <code>RayQuery</code> object.\nThe interpolation qualifier of a binding or struct field.\nAborts the current shader execution.\nStorage can be used as a source for load ops.\nShader may rewrite depth smaller than one that would have …\nIndicates that linear, non-perspective, correct …\nLiteral.\nLoad a value indirectly.\nVariable defined at function level.\nReference a local variable.\nIndexed location.\nExecutes a block repeatedly.\nCall a math function\nBuilt-in shader function for math.\nMatrix of numbers.\nSynchronize invocations within the work group. The <code>Barrier</code> …\nShader module.\nEquivalent of the WGSL’s <code>%</code> operator or SPIR-V’s <code>OpFRem</code>\nNo intersection found. Matches …\nGet the number of array layers, a <code>u32</code>.\nGet the number of mipmap levels, a <code>u32</code>.\nGet the number of samples, a <code>u32</code>.\nPipeline-overridable constant.\nPipeline-overridable constant.\nThe array size is an override-expression.\nThe value will be interpolated in a perspective-correct …\nPointer to another type.\nReturn types predeclared for the frexp, modf, and …\nPrivate data, per invocation, mutable.\nStart or continue the query given by the statement’s …\nPush constants.\n4D vector\nAll gather from the same quad lane at the index given by …\nEach gathers from the opposite quad lane along the given …\nA strongly typed range of handles.\nRay flags used when casting rays. Matching vulkan …\nLocally used handle for ray queries.\nAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>…\nReturn an intersection found by <code>query</code>.\nType of a ray query intersection. Matching vulkan …\nResult of a <code>Proceed</code> <code>RayQuery</code> statement.\nGet the Positions of the triangle hit by the <code>RayQuery</code>\nCall a relational function.\nBuilt-in shader function for testing relation between …\nPipeline binding information for global resources.\nReturns from the function (possibly with a value).\nSkip axis-aligned bounding boxes.\nDon’t execute the closest hit shader.\nSkip triangular geometry.\nBarrier affects all <code>AddressSpace::Storage</code> accesses.\nStorage can be used as a target for store ops.\nBarrier synchronizes execution across all invocations …\nInterpolate the value at each sample location. In …\nSampling modifier to control the level of detail.\nRegular sampled image.\nCan be used to sample values from images.\nThe sampling qualifiers of a binding or struct field.\nCharacteristics of a scalar type.\nNumber of integral or floating-point kind.\nPrimitive type for a scalar.\nSelect between two values based on a condition.\nStage of the programmable pipeline.\nRight shift carries the sign of signed integers only.\nEach gathers from a different lane at the index given by …\nEach gathers from their lane plus the shift given by the …\nEach gathers from their lane minus the shift given by the …\nEach gathers from their lane xored with the given by the …\nSigned integer type.\nGet the size at the specified level.\nA human-readable representation for a span, tailored for …\nA source code span, used for error reporting.\nA source code span together with “context”, a …\nSet of special types that can be optionally generated by …\nSplat scalar into a vector.\nInstructions which make up an executable block.\nStorage buffer data, potentially mutable.\nStorage image.\nFlags describing an image.\nImage storage format.\nStores a value at an address.\nUser-defined structure.\nMember of a user-defined structure.\nCalculate a bitmask using a boolean from each active …\nResult of a <code>SubgroupBallot</code> statement.\nCompute a collective operation across all active threads …\nGather a value from another active thread in the subgroup\nResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> …\nConditionally executes one of multiple blocks, based on …\nA case for a switch statement.\nThe value of the switch case.\nVector swizzle.\nComponent selection for a vector swizzle.\nStop traversal after the first hit.\nBarrier synchronizes texture memory accesses in a …\n3D vector\nIntersecting with triangles. Matches …\nA data type declared in the module.\nEnum with additional information, depending on the kind of …\nUnsigned integer type.\nApply an unary operator.\nOperation that can be applied on a single value.\nShader may not rewrite depth value.\nUniform buffer data.\nAn arena whose elements are guaranteed to be unique.\nPointer to a scalar or vector.\nVector of numbers.\nNumber of components in a vector.\nBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.\nWrapper class for <code>Error</code>, augmenting it with a list of …\nWorkgroup shared data, mutable.\nLoad uniformly from a uniform pointer in the workgroup …\nResult of a <code>WorkGroupUniformLoad</code> statement.\nZero value of a type.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConvert inner error into another type. Joins span …\nAdds a new value to the arena, returning a typed handle.\nApply the usual default interpolation for <code>ty</code> to <code>binding</code>.\nInformation about function argument.\nFind the common type of <code>self</code> and <code>other</code> under WGSL’s …\nReturn <code>true</code> if automatic conversions will covert <code>self</code> to …\nDetermine whether <code>self</code> automatically converts to <code>goal</code>.\nBackend functions that export shader <code>Module</code>s into binary …\nReturns the ref count, upon reaching which this expression …\nFor I/O structs, defines the binding.\nBinding number within the group.\nFor resources, defines the binding point.\nFor entry points, an argument has to have a binding unless …\nFor entry points, the result has to have a binding unless …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBody of the case.\nBlock of instructions comprising the body of the function.\nReturn the canonical form of <code>self</code>, or <code>None</code> if it’s …\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>range</code> is valid for this arena.\nClears the arena, keeping all allocations.\nClears the arena keeping all allocations\nCode common to the front and backends for specific …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArena for the constants defined in this module.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\n<code>DiagnosticFilter</code>s and supporting functionality.\nThe leaf of all diagnostic filter rules tree (stored in …\nThe leaf of all diagnostic filter rules tree parsed from …\nArena for all diagnostic filter rules parsed in this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDoc comments.\nDrains the arena, returning an iterator over the items …\nEarly depth test for fragment stages.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEntry points.\nExpressions used inside this function.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nIf true, the control flow continues to the next case in …\nFetch a handle to an existing type.\nAdds a value with a custom check for uniqueness: returns a …\nAdds a value with a check for uniqueness, where the check …\nreturn the first and last handles included in <code>self</code>.\nConstruct a float <code>Scalar</code> with the given width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConstruct a <code>Range</code> that covers the indices in <code>inner</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nFrontend parsers that consume binary and text shaders and …\nThe entrance function.\nArena for the functions defined in this module.\nPopulate this module’s <code>SpecialTypes::predeclared_types</code> …\nPopulate this module’s <code>SpecialTypes::ray_desc</code> type.\nPopulate this module’s <code>SpecialTypes::ray_intersection</code> …\nMake sure the types for the vertex return are in the module…\nReturn this arena’s handle for <code>value</code>, if present.\nReturn this arena’s value at <code>handle</code>, if that is a valid …\nGet a mutable reference to an element in the arena.\nReturn the span associated with <code>handle</code>.\nConstant expressions and override expressions used by this …\nArena for the global variables defined in this module.\nThe bind group index.\nPipeline Constant ID.\nReturns the index of this handle.\nReturn the index range covered by <code>self</code>.\nReturn the length of a subscriptable type.\nReturn the length of <code>self</code>, assuming overrides are yet to …\nReturn the length of <code>self</code>, assuming overrides have been …\nThe default value of the pipeline-overridable constant.\nThe value of the constant.\nInitial value for this variable.\nInitial value for this variable.\nInner structure that depends on the kind of the type.\nInsert a new value into the arena.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the inner vector.\nReverse of <code>Self::new</code>, discards span information and …\nConvert inner error using <code>From</code>.\nThe Intermediate Representation shared by all frontends …\nReturn true if <code>self</code> is an abstract type.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck whether <code>self</code> was defined or is a default/unknown span\nReturn true if this expression is a dynamic …\nReturn <code>true</code> if the arena contains no elements.\nReturns <code>true</code> if the arena contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if this is a handle to a type rather than the …\nReturns true if the statement directly terminates the …\nReturns an iterator over the items stored in this arena, …\nReturns an iterator over the items stored in this arena, …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns a iterator over the items stored in this arena, …\nReturns an iterator over the items stored in this arena, …\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLists of reserved keywords for each shading language with …\nHow the value’s bits are to be interpreted.\nReturn the current number of items stored in this arena.\nReturns the current number of items stored in this arena.\nLength in code units (in bytes) of the span.\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nLocal variables defined and used in the function.\nReturn a <code>SourceLocation</code> for this span in the provided …\nReturn a <code>SourceLocation</code> for our first span, if we have one.\nThe name of the type, if any.\nName of the variable, if any.\nName of the variable, if any.\nName of the argument, if any.\nName of the function, if any.\nName of this entry point, visible externally.\nMap of expressions that have associated variable names\nReturns true if the expression is considered emitted at …\nCreate a new arena with no initial capacity allocated.\nCreate a new arena with no initial capacity allocated.\nCreates a new <code>Span</code> from a range of byte indices\nCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.\nReturn a range enclosing handles <code>first</code> through <code>last</code>, …\nCompare value type <code>self</code> and <code>rhs</code> as types.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset from the beginning from the struct.\n0-based Offset in code units (in bytes) of the start of …\nReturn the global variable being accessed by the …\nArena for the pipeline-overridable constants defined in …\nReturn the leaf scalar type of <code>pointer</code>.\nIf <code>self</code> is a pointer type, return its base type.\nTypes for predeclared wgsl types instantiated on demand.\n<code>Module</code> processing functionality.\nGet the range of handles from a particular number of …\nType for <code>RayDesc</code>.\nType for <code>RayIntersection</code>.\nType for <code>RayVertexReturn</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReplace an old value with a new value.\nReturn the number of elements that <code>size</code> represents, if …\nThe result of this function, if any.\nReturn the scalar type of <code>self</code>.\nReturn the leaf scalar type of <code>self</code>, as needed for …\nReturns the scalar width in bytes\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet the size of this type.\nHow this variable is to be stored.\nIterator over stored <code>SpanContext</code>s.\nDictionary of special type handles.\nShader stage.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nModifies <code>self</code> to contain the smallest <code>Span</code> possible that …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts <code>self</code> to a range if the span is not unknown\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the smallest <code>Span</code> possible that contains all the …\nType of the field.\nThe type of this variable.\nThe type of this variable.\nType of the argument.\nType of the result.\nArena for the types defined in this module.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a new <code>Span</code> starting at <code>self</code> and ending at <code>other</code>\nShader validator.\nValue, upon which the case is considered true.\nIf the type is a Vector or a Scalar return a tuple of the …\nThis size of the value in bytes.\nAdd a <code>SpanContext</code>.\nAdd a new span with description.\nWorkgroup size for compute stages\nOverride expressions for workgroup size in the …\nWrite this handle’s index to <code>formatter</code>, preceded by …\nOptional <code>blend_src</code> index used for dual source blending. …\nSpecifies restrictions on how the depth value can be …\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nWhether the sampling operation should clamp each component …\nBoolean expression\nIf provided, converts to the specified byte width. …\nThe coordinate of the texel we wish to load. This must be …\nSource expression, which can only be a scalar or a vector.\nIf Some(), this operation is a gather operation on the …\nThe image to load a texel from. This must have type <code>Image</code>. …\nTarget scalar kind.\nA level of detail, for mipmapped images.\nThis must be a const-expression.\nA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.\nThe type of the result\nKind of values to sample.\nMulti-sampled image.\nMulti-sampled depth image.\nIf <code>None</code>, the base level is considered.\nThe acceleration structure within which this query should …\nA struct of detailed parameters for the ray query.\nThe value to broadcast over\nThe value to compute over\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nHow to combine the results\nThe coordinate of the texel we wish to load. This must be …\nFunction to run on the atomic value.\nThe kind of atomic operation to perform on the texel.\nThe specific operation we’re performing on <code>query</code>.\nThe image to perform an atomic operation on. This must …\nSpecifies which thread to gather from\nWhat operation to compute\nPointer to an atomic value.\nThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space\nThe value from this thread to store in the ballot\nThe <code>RayQuery</code> object this statement operates on.\n<code>AtomicResult</code> expression representing this function’s …\nThe <code>WorkGroupUniformLoadResult</code> expression representing …\nThe <code>SubgroupBallotResult</code> expression representing this load…\nThe <code>SubgroupOperationResult</code> expression representing this …\nThe <code>SubgroupOperationResult</code> expression representing this …\nValue to use in the function.\nThe value with which to perform the atomic operation.\nNames of vector components.\nAn <code>EntryPoint</code>, and its index in <code>Module::entry_points</code>.\nA regular function.\nHelper structure that stores data needed when writing the …\nWhether we’re generating an entry point or a regular …\nIndent for backends.\nIndentation level.\nExpressions that need baking.\nSpecifies the values of pipeline-overridable constants in …\nRay flags, for a <code>RayDesc</code>’s <code>flags</code> field.\nThe intersection test to use for ray queries.\nGet a flags value with all known bits set.\nHelper method that generates a <code>NameKey</code> for a function …\nHelper function that returns the string corresponding to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe expression arena of the current function being written\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nBackend for GLSL (OpenGL Shading Language).\nBackend for HLSL (High-Level Shading Language).\nAnalysis about the function\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the function is an entry point for a …\nWhether all bits in this flags value are unset.\nReturns true if the given expression points to a …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nHelper method that generates a <code>NameKey</code> for a local in the …\nMap of expressions that have associated variable names\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nHelper method that resolves a type of a given expression.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nBackend for SPIR-V (Standard Portable Intermediate …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current function being written\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlip output Y and extend Z from (0, 1) to (-1, 1).\nBuffer address space support.\nMapping between resources and bindings.\n8 byte floats.\nSupports ARB_shader_draw_parameters on the host, which …\nDual source blending\nArrays with a dynamic length.\n<code>core</code> GLSL.\n<code>es</code> GLSL.\nThe entry point couldn’t be found.\nA GLSL compilation error.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nMore image formats.\nStructure used to encode additions to GLSL that aren’t …\n<code>crate::Sampling::First</code> is unsupported.\nA error occurred while writing to the output.\nImage load and early depth tests.\nImage size query\nInclude unused global variables, constants and functions. …\nInstance index\nA image was used with multiple samplers, which isn’t …\nThe specified <code>Version</code> doesn’t have all required <code>Features</code>.\n<code>AddressSpace::PushConstant</code> was used more than once in the …\nInterpolation and auxiliary qualifiers.\nConfiguration used in the <code>Writer</code>.\nA subset of options meant to be changed per pipeline.\nAll information to bind a single uniform value to the …\nReflection info for texture mappings and uniforms.\nSample ID.\nSubgroup operations\nList of supported <code>core</code> GLSL versions.\nList of supported <code>es</code> GLSL versions.\nImage atomics\nTexture levels query\nTexture samples query\nSample specific LODs of cube / array shadow textures\nSupports GL_EXT_texture_shadow_lod on the host, which …\nMapping between a texture and its sampler, if it exists.\nA call was made to an unsupported external.\nA scalar with an unsupported width was requested.\nA GLSL version.\nThe specified <code>Version</code> isn’t supported.\nWriter responsible for all code generation.\nConfiguration flags for the <code>Writer</code>.\nGL uniform name for the item. This name is the same as if …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMap of resources association to binding locations.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNumber of user-defined clip planes. Only applicable to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe index which can be used for dual source blending. This …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe location of the global. This corresponds to …\nHow many views to render to, if doing multiview rendering.\nCreates a new <code>Writer</code> instance.\nCreate a new gles version\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset in the push constant memory block this uniform …\nList of push constant items in the shader.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nHandle to the associated sampler global variable, if it …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHandle to the image global variable.\nMapping between texture names and variables/samplers.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nType of the uniform. This will only ever be a scalar, …\nMapping between uniform variables and names.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMapping between names and attribute locations.\nThe GLSL version to be used.\nWrites the <code>Module</code> as glsl to the output\nConfiguration flags for the <code>Writer</code>.\nShould workgroup variables be zero initialized (by …\nA fragment entry point to be considered when generating …\nBindTarget for dynamic storage buffer offsets\nConfiguration used in the <code>Writer</code>.\nA subset of options that are meant to be changed per …\nReflection info for entry point names.\nA HLSL shader model version.\nIf the binding is an unsized binding array, this overrides …\nMap of resources association to binding locations.\nThis is the index in the buffer at …\nBind target for dynamic storage buffer offsets\nThe entry point to write.\nMapping of the entry point names.\nDon’t panic on missing bindings, instead generate any …\nIf set, loops will have code injected into them, forcing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>None</code> if the entry point with the provided name can…\nBind target of the push constant buffer\nFor regular bindings this is the register number.\nThis is a hint that we need to restrict indexing of …\nShould we restrict indexing of vectors, matrices and …\nMapping of each bind group’s sampler index buffer to a …\nBind target of the sampler heap and comparison sampler …\nThe hlsl shader model to be used\nAdd special constants to <code>SV_VertexIndex</code> and …\nShould workgroup variables be zero initialized (by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompact <code>module</code> and replace all overrides with constants.\nFlip Y coordinate of <code>BuiltIn::Position</code> output.\nClamp <code>BuiltIn::FragDepth</code> output between 0 and 1.\nSPIR-V operand kind: Capability\nInclude debug labels for everything.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nFlags corresponding to the boolean(-ish) parameters to …\nEmit <code>OpName</code> for input/output locations.\nVia <code>VK_KHR_zero_initialize_workgroup_memory</code> or Vulkan 1.3\nVia assignments + barrier\nSPIR-V operand kind: SourceLanguage\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf the binding is an unsized binding array, this overrides …\nMap of resources to information about the binding.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHow should generate code handle array, vector, matrix, or …\nIf given, the set of capabilities modules are allowed to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConfiguration flags for the writer.\nIf set, loops will have code injected into them, forcing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturn the set of capabilities the last module written …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")