searchState.loadedDescShard("slint", 2, "Returns the argument unchanged.\nReturns the argument unchanged.\nConvert from a sentinel word in WGSL into its associated …\nConvert from a sentinel word in WGSL into its associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps this <code>StandardFilterableTriggeringRule</code> into the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe source code of the shader.\nStructure responsible for managing variable lookups and …\nA table of types for an <code>Arena&lt;Expression&gt;</code>.\nAdds a new variable to the current scope.\nAdds a new variable to the root scope.\nConstructs a new symbol table with a root scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrow this typifier until it contains a type for <code>expr_handle</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecompute the type resolution for <code>expr_handle</code>.\nPerform a lookup for a variable named <code>name</code>.\nRemoves the current lexical scope and all its variables\nAdds a new lexical scope.\nAdd an expression’s type to an <code>Arena&lt;Type&gt;</code>.\nFrontend for WGSL (WebGPU Shading Language).\nA variant of <code>LanguageExtension::Implemented</code>.\nA language extension recognized by Naga, but not …\nA variant of <code>LanguageExtension::Unimplemented</code>.\nReturns slice of all variants of …\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a sentinel word in WGSL into its associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>SourceLocation</code> for the first label in the error …\nThis function may consume a lot of stack space. …\nMaps this <code>LanguageExtension</code> into the sentinel word …\nMaps this <code>ImplementedLanguageExtension</code> into the sentinel …\nIntersecting with Axis Aligned Bounding Boxes. Matches …\nAbstract floating-point type.\nWGSL abstract integer type.\nOpaque object representing an acceleration structure of …\nArray access with a computed index.\nAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known …\nAddressing space of variables.\nHomogeneous list of elements.\nGet the length of an array. The expression must resolve to …\nSize of an array.\nCast a simple type to another kind.\nAtomic scalar.\nAtomic function.\nFunction on an atomic value.\nResult of an atomic operation.\nMemory barrier flags.\nSynchronize invocations within the work group. The <code>Barrier</code> …\n2D vector\nApply a binary operator.\nOperation that can be applied on two values.\nDescribes how an input/output variable is to be bound.\nArray of bindings.\nA code block is a vector of statements, with maybe a …\nA block containing more statements, to be executed …\nBoolean type.\nExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.\nAll gather from the same lane at the index given by the …\nAll gather from the active lane with the smallest index\nBuilt-in inputs and outputs.\nBuilt-in shader variable.\nNumber of bytes per scalar.\nCalls a function.\nResult of calling another function.\nInterpolate the value at the center of the pixel.\nInterpolate the value at a point that lies within all …\nComposite expression.\nConfirm a triangle intersection to be included in the …\nEnables adjusting depth without disabling early Z.\nConstant value.\nThe array size is constant.\nConstant value.\nSkips to the <code>continuing</code> block of the innermost enclosing …\nCube map\n1D image\n2D image\n3D image\nDepth comparison image.\nCompute the derivative on an axis.\nAxis on which to compute a derivative.\nHint at which precision to compute a derivative.\nThe array size can change at runtime.\nEarly fragment tests.\nUse the value provided by the first or last vertex of the …\nEmit a range of expressions, visible to all statements …\nThe main function for a pipeline stage.\nAn expression that can be evaluated to obtain a value.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nUse the value provided by the first vertex of the current …\nIndicates that no interpolation will be performed.\nFloating point type.\nA function defined in the module.\nFunction locals.\nA function argument.\nReference a function parameter, by its index.\nA function result.\nThe specific behavior of a <code>SubgroupGather</code> statement.\nAdd a candidate generated intersection to be included in …\nIntersecting with generated primitives. Matches …\nVariable defined at module level.\nReference a global variable.\nShader may rewrite depth only with a value greater than …\nOpaque handles, such as samplers and images.\nConditionally executes one of two blocks, based on the …\nPossibly multidimensional array of texels.\nPerforms an atomic operation on a texel value of an image.\nSub-class of the image type.\nThe number of dimensions an image has.\nLoad a texel from an image.\nType of an image query.\nQuery information from an image.\nSample a point from a sampled or a depth image.\nStores a texel value to an image.\nInitialize the <code>RayQuery</code> object.\nThe interpolation qualifier of a binding or struct field.\nAborts the current shader execution.\nShader may rewrite depth smaller than one that would have …\nIndicates that linear, non-perspective, correct …\nLiteral.\nLoad a value indirectly.\nVariable defined at function level.\nReference a local variable.\nIndexed location.\nExecutes a block repeatedly.\nCall a math function\nBuilt-in shader function for math.\nMatrix of numbers.\nShader module.\nEquivalent of the WGSL’s <code>%</code> operator or SPIR-V’s <code>OpFRem</code>\nNo intersection found. Matches …\nGet the number of array layers, a <code>u32</code>.\nGet the number of mipmap levels, a <code>u32</code>.\nGet the number of samples, a <code>u32</code>.\nPipeline-overridable constant.\nPipeline-overridable constant.\nThe array size is an override-expression.\nThe value will be interpolated in a perspective-correct …\nPointer to another type.\nReturn types predeclared for the frexp, modf, and …\nPrivate data, per invocation, mutable.\nStart or continue the query given by the statement’s …\nPush constants.\n4D vector\nRay flags used when casting rays. Matching vulkan …\nLocally used handle for ray queries.\nAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>…\nReturn an intersection found by <code>query</code>.\nType of a ray query intersection. Matching vulkan …\nResult of a <code>Proceed</code> <code>RayQuery</code> statement.\nGet the Positions of the triangle hit by the <code>RayQuery</code>\nCall a relational function.\nBuilt-in shader function for testing relation between …\nPipeline binding information for global resources.\nReturns from the function (possibly with a value).\nInterpolate the value at each sample location. In …\nSampling modifier to control the level of detail.\nRegular sampled image.\nCan be used to sample values from images.\nThe sampling qualifiers of a binding or struct field.\nCharacteristics of a scalar type.\nNumber of integral or floating-point kind.\nPrimitive type for a scalar.\nSelect between two values based on a condition.\nStage of the programmable pipeline.\nRight shift carries the sign of signed integers only.\nEach gathers from a different lane at the index given by …\nEach gathers from their lane plus the shift given by the …\nEach gathers from their lane minus the shift given by the …\nEach gathers from their lane xored with the given by the …\nSigned integer type.\nGet the size at the specified level.\nSet of special types that can be optionally generated by …\nSplat scalar into a vector.\nInstructions which make up an executable block.\nStorage buffer data, potentially mutable.\nStorage image.\nFlags describing an image.\nImage storage format.\nStores a value at an address.\nUser-defined structure.\nMember of a user-defined structure.\nCalculate a bitmask using a boolean from each active …\nResult of a <code>SubgroupBallot</code> statement.\nCompute a collective operation across all active threads …\nGather a value from another active thread in the subgroup\nResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> …\nConditionally executes one of multiple blocks, based on …\nA case for a switch statement.\nThe value of the switch case.\nVector swizzle.\nComponent selection for a vector swizzle.\n3D vector\nIntersecting with triangles. Matches …\nA data type declared in the module.\nEnum with additional information, depending on the kind of …\nUnsigned integer type.\nApply an unary operator.\nOperation that can be applied on a single value.\nShader may not rewrite depth value.\nUniform buffer data.\nPointer to a scalar or vector.\nVector of numbers.\nNumber of components in a vector.\nWorkgroup shared data, mutable.\nLoad uniformly from a uniform pointer in the workgroup …\nResult of a <code>WorkGroupUniformLoad</code> statement.\nZero value of a type.\nInformation about function argument.\nFor I/O structs, defines the binding.\nBinding number within the group.\nFor resources, defines the binding point.\nFor entry points, an argument has to have a binding unless …\nFor entry points, the result has to have a binding unless …\nBody of the case.\nBlock of instructions comprising the body of the function.\nArena for the constants defined in this module.\nThe leaf of all diagnostic filter rules tree (stored in …\nThe leaf of all diagnostic filter rules tree parsed from …\nArena for all diagnostic filter rules parsed in this …\nEarly depth test for fragment stages.\nEntry points.\nExpressions used inside this function.\nIf true, the control flow continues to the next case in …\nThe entrance function.\nArena for the functions defined in this module.\nConstant expressions and override expressions used by this …\nArena for the global variables defined in this module.\nThe bind group index.\nPipeline Constant ID.\nThe default value of the pipeline-overridable constant.\nThe value of the constant.\nInitial value for this variable.\nInitial value for this variable.\nInner structure that depends on the kind of the type.\nHow the value’s bits are to be interpreted.\nLocal variables defined and used in the function.\nThe name of the type, if any.\nName of the variable, if any.\nName of the variable, if any.\nName of the argument, if any.\nName of the function, if any.\nName of this entry point, visible externally.\nMap of expressions that have associated variable names\nOffset from the beginning from the struct.\nArena for the pipeline-overridable constants defined in …\nTypes for predeclared wgsl types instantiated on demand.\nType for <code>RayDesc</code>.\nType for <code>RayIntersection</code>.\nType for <code>RayVertexReturn</code>.\nThe result of this function, if any.\nHow this variable is to be stored.\nDictionary of special type handles.\nShader stage.\nType of the field.\nThe type of this variable.\nThe type of this variable.\nType of the argument.\nType of the result.\nArena for the types defined in this module.\nValue, upon which the case is considered true.\nThis size of the value in bytes.\nWorkgroup size for compute stages\nOverride expressions for workgroup size in the …\nOptional <code>blend_src</code> index used for dual source blending. …\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nBoolean expression\nIf provided, converts to the specified byte width. …\nThe coordinate of the texel we wish to load. This must be …\nSource expression, which can only be a scalar or a vector.\nIf Some(), this operation is a gather operation on the …\nThe image to load a texel from. This must have type <code>Image</code>. …\nTarget scalar kind.\nA level of detail, for mipmapped images.\nThis must be a const-expression.\nA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.\nThe type of the result\nKind of values to sample.\nMulti-sampled image.\nMulti-sampled depth image.\nIf <code>None</code>, the base level is considered.\nThe acceleration structure within which this query should …\nA struct of detailed parameters for the ray query.\nThe value to broadcast over\nThe value to compute over\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nHow to combine the results\nThe coordinate of the texel we wish to load. This must be …\nFunction to run on the atomic value.\nThe kind of atomic operation to perform on the texel.\nThe specific operation we’re performing on <code>query</code>.\nThe image to perform an atomic operation on. This must …\nSpecifies which thread to gather from\nWhat operation to compute\nPointer to an atomic value.\nThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space\nThe value from this thread to store in the ballot\nThe <code>RayQuery</code> object this statement operates on.\n<code>AtomicResult</code> expression representing this function’s …\nThe <code>WorkGroupUniformLoadResult</code> expression representing …\nThe <code>SubgroupBallotResult</code> expression representing this load…\nThe <code>SubgroupOperationResult</code> expression representing this …\nThe <code>SubgroupOperationResult</code> expression representing this …\nValue to use in the function.\nThe value with which to perform the atomic operation.\nKeywords for WGSL (WebGPU Shading Language).\nThe above set of reserved keywords, turned into a cached …\nA newtype struct where its only valid values are powers of …\nPolicies for injecting bounds checks during code …\nHow should code generated by Naga do bounds checks?\nThe result type of a <code>Rule</code>.\nA context for evaluating constant expressions.\nThe number of elements is determined at runtime.\nHelper class to emit expressions\nEntry point version of <code>FunctionOobLocal</code>.\nA local variable used by ReadZeroSkipWrite bounds-check …\nA type stored in the associated arena.\nThe number of elements in an indexable type.\nValues of this type always have the given number of …\nHelper processor that derives the sizes of all types.\nThis processor assigns names to all the things in a module …\nA trait for types representing of a set of Naga IR type …\nA type that should be registered in the module’s …\nOut-of-bounds reads return zero, and writes have no effect.\nReplace out-of-bounds indexes with some arbitrary …\nA single type rule.\nSize and alignment information for a type.\nThe result of computing an expression’s type.\nNaga adds no checks to indexing operations. Generate the …\nA type that can be entirely characterized by a <code>TypeInner</code> …\nA free-floating <code>TypeInner</code>, representing a type that may …\nReturn a list of the types allowed for argument <code>i</code>.\nFind the overloads that could accept a given argument.\nHow should the generated code handle binding array indexes …\nHow should the generated code handle array, vector, or …\nReturn a new identifier based on <code>label_raw</code>.\nConvert the scalar components of <code>expr</code> to <code>target</code>.\nConvert the scalar leaves of  <code>expr</code> to <code>target</code>, handling …\nDetermine which policy applies to <code>base</code>.\nRemove all entries from this <code>Layouter</code>, retaining storage.\nLimit <code>self</code> to overloads whose arguments are all concrete …\nReturn <code>true</code> if any of <code>self</code>’s policies are <code>policy</code>.\nEnsure that the given block has return statements at the …\nReturn an iterator over the individual components …\nReturn an object that can be formatted with …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nForces the the expression to not be const\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nHow should the generated code handle image texel loads …\nDefinitions for index bounds checking.\nHow should the generated code handle array, vector, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not <code>n</code> is a multiple of this alignment.\nReturn true if <code>self</code> is the empty set of overloads.\nReturn the largest number of arguments in any type rule in …\nReturn the smallest number of arguments in any type rule …\nReturns a tuple of <code>crate::Literal</code>s representing the …\nReturn the most preferred candidate.\nReturn a type rule for each of the overloads in <code>self</code>.\nDetermine the type of <code>expr</code>.\nRound <code>n</code> up to the nearest alignment boundary.\nProduce the stride as if this type is a base of an array.\nTry to evaluate <code>expr</code> at compile time.\nExtend this <code>Layouter</code> with layouts for any new entries in …\nInitialize a resolve context from the module.\nPolicies for injecting bounds checks during code …\nHow should code generated by Naga do bounds checks?\nThe number of elements is determined at runtime.\nAn index that may be statically known, or may need to be …\nThe number of elements in an indexable type.\nValues of this type always have the given number of …\nOut-of-bounds reads return zero, and writes have no effect.\nReplace out-of-bounds indexes with some arbitrary …\nNaga adds no checks to indexing operations. Generate the …\nDetermine whether <code>index</code> is statically known to be in …\nHow should the generated code handle binding array indexes …\nHow should the generated code handle array, vector, or …\nBuild a set of expressions used as indices, to cache in …\nReturns the argument unchanged.\nHow should the generated code handle image texel loads …\nHow should the generated code handle array, vector, or …\nCalls <code>U::from(self)</code>.\nReturns all the types which we need out-of-bounds locals …\nThis type can be passed as a function argument.\nreductions, scans\nAtomic operations will be performed on the variable.\nballot, broadcast\nElect, Barrier\nGroup, binding, and location attributes.\nStatements and blocks of them.\nSupport for <code>BuiltIn::ClipDistance</code>.\nConstants.\nA WGSL constructible type.\nUniformity of control flow for operations that require it.\nThe data can be copied around.\nThe set of types with a fixed size at shader-creation time …\nSupport for arrayed cube textures.\nSupport for <code>BuiltIn::CullDistance</code>.\nAllowed IR capabilities.\nCan be used for data variables.\nSupport for generating two sources for blending from …\nSupport for <code>early_depth_test</code>.\nExpressions.\nInformation about an expression in a function body.\nFloat values with width = 8.\nIndicates how a global variable is used.\nCan be used for host-shareable structures.\nCan be be used for user-defined IO between pipeline stages.\nSupport for <code>BuiltIn::SampleIndex</code> and <code>Sampling::Sample</code>.\nSupport for <code>BuiltIn::ViewIndex</code>.\nSupport for <code>BuiltIn::PrimitiveIndex</code>.\nSupport for <code>AddressSpace::PushConstant</code>.\nThe information about the data is queried.\nSupport for ray queries returning vertex position\nSupport for ray queries and acceleration structures.\nData will be read from the variable.\nSupport for non-uniform indexing of sampled textures and …\nSupport for non-uniform indexing of samplers.\nSupport for 16-bit floating-point types.\nSupport for <code>AtomicFunction::Add</code>, <code>AtomicFunction::Sub</code>, and …\nSupport for 64-bit signed and unsigned integers.\nSupport for all atomic operations on 64-bit integers.\nSupport for <code>AtomicFunction::Min</code> and <code>AtomicFunction::Max</code> on …\nshuffle, shuffle xor\nshuffle up, down\nThe data type has a size known by pipeline creation time.\nSupport for 16-bit normalized storage texture formats.\nSupport for non-uniform indexing of storage texture arrays.\nHost-shareable structure layouts.\nSupport for subgroup operations. Implies support for …\nSupport for subgroup barriers.\nSupport for subgroup operations in the vertex stage.\nValidation flags.\nSupported subgroup operations\nSupport for atomic operations on images.\nSupport for atomic operations on 64-bit images.\nFlags associated with <code>Type</code>s by <code>Validator</code>.\nSupport for non-uniform indexing of uniform buffer arrays.\nUniform control flow characteristics.\nKinds of expressions that require uniform control flow.\nAny, All\nValidation flags.\nData will be written to the variable.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet of shader stages where calling this function is valid.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIndicates that the function is using dual source blending.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nFunction may kill the invocation.\nConstruct a new validator instance.\nA child expression with non-uniform result.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of statements and other expressions using this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf this expression requires uniform control flow, store …\nReset the validator internals\nAll pairs of (texture, sampler) globals that may be used …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe type of this expression.\nWhether this expression is uniform, and why.\nUniformity characteristics.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCheck the given module to be valid.\nCheck the given module to be valid, requiring overrides to …\nDescribes a compute pipeline.\nDescribes fragment processing in a render pipeline.\nNumber of implicit bind groups derived at pipeline …\nPassthrough for MSL source code.\nDescribes a programmable pipeline stage.\nDescribes a render (graphics) pipeline.\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\nPassthrough for SPIR-V binaries.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex process in a render pipeline.\nHow a render pipeline will retrieve attributes from a …\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSpecifies the values of pipeline-overridable constants in …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe name of the entry point in the compiled shader. The …\nThe name of the entry point in the compiled shader. The …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe fragment processing state for this pipeline.\nThe fragment processing state for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe byte size required to fit the last vertex in the …\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nWhether the buffer is indexed by vertex number or instance …\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nIf the pipeline will be used with a multiview render pass, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe compiled compute stage and its entry point.\nThe compiled vertex stage and its entry point.\nThe compiled fragment stage and its entry point.\nThe compiled compute stage and its entry point.\nThe compiled vertex stage and its entry point.\nThe compiled fragment stage and its entry point.\nHow often this vertex buffer is “stepped” forward.\nThe byte stride in the buffer between one attribute value …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe effect of draw calls on the color aspect of the output …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe vertex processing state for this pipeline.\nThe vertex processing state for this pipeline.\nCould the error have been avoided? That is, is there a …\nWhether workgroup scoped memory will be initialized with …\nWhether workgroup scoped memory will be initialized with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError encountered while attempting to do a copy on a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA buffer that has been marked as destroyed and is staged …\nA texture that has been marked as destroyed and is staged …\nContains the error value\nContains the success value\nDescribes a <code>Sampler</code>\nA temporary buffer, consumed by the command that uses it.\nDescribes a <code>TextureView</code>.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nMust be at least 1. If this is not 1, all filter modes …\nBorder color to use when address_mode is …\nIf this is enabled, this is a comparison sampler using the …\nTotal count of queries the set contains. Must not be zero. …\nDimensions of the texture.\nThe dimension of the texture view.\nFlags for the bottom level acceleration structure.\nFlags for the bottom level acceleration structure.\nFormat of the texture.\nFormat of the texture view, or <code>None</code> for the same format as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a string identifying this resource for logging and …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the texture. This will show up in graphics …\nDebug label for the query set.\nLabel for the bottom level acceleration structure.\nLabel for the top level acceleration structure.\nDebug label of the texture view.\nDebug label of the sampler.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nNumber of instances that can be stored in the acceleration …\nHow to filter the texture when it needs to be minified …\nMip count of texture. For a texture with no extra mips, …\nHow to filter between mip map levels\nRange within the texture that is accessible via this view.\nSample count of texture. If this is not 1, texture must …\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nKind of query that this query set should contain.\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nThe allowed usage(s) for the texture view. Must be a …\nSpecifies what view formats will be allowed when calling …\nThe binding layout is derived from the pipeline layout.\nThe binding layout is provided by the user in BGLs.\nErrors produced when validating a programmable stage of a …\nReturn true if the fragment <code>format</code> is covered by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe types of the acceleration structure are axis aligned …\nA ray-tracing acceleration structure binding.\nWhat a copy between acceleration structures should do\nFlags for acceleration structures\nFlags for acceleration structure geometries\nWhat type the data of an acceleration structure is\nUpdate mode for acceleration structure builds.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nDescribes an allocation in the <code>AllocatorReport</code>.\nA report that can be generated for informational purposes …\nFunction always passes\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nThe texture can be both read and written in the shader via …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nFences in OpenGL are short-circuited to always return <code>true</code> …\nChooses the first supported mode out of:\nChooses the first supported mode out of:\nNo explicit minor version is requested, the driver …\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nBack face\nBackends supported by wgpu.\nOptions that are passed to a given backend.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nDescribes a single binding inside a bind group.\nType of a binding in a bind group layout.\nDescriptor for all size defining attributes of all …\nDescriptor for all size defining attributes of a single …\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nA buffer binding.\nIntegral type used for <code>Buffer</code> offsets and sizes.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for <code>BufferSlice</code> sizes.\nA buffer transition for use with …\nDifferent ways that you can use a buffer.\nSimilar to <code>BufferUsages</code>, but used only for …\nAlways perform a full build.\nBuffer to buffer copy as well as buffer clear offsets and …\nBuffer-to-texture copies must have <code>bytes_per_row</code> aligned …\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDirectly duplicate an acceleration structure to another\nRGBA double precision color.\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nDescribes a <code>CommandBuffer</code>.\nDescribes a <code>CommandEncoder</code>.\nDuplicate and compact an acceleration structure\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nSpecifies how the alpha channel of the textures should be …\nConstant\nView of a texture which can be used to copy to a texture, …\n<code>wgpu-core</code>’s part of <code>InternalCounters</code>.\nCpu / Software Rendering.\nDescriptor for creating a bottom level acceleration …\nDescriptor for creating a shader module.\nDescriptor for creating a top level acceleration structure.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nAfter <code>Device::destroy</code>\nDescribes a <code>Device</code>.\nReason for “lose the device”.\nSupported physical device types.\nDiscards the resulting value of the render pass for this …\nDiscrete GPU with separate CPU/GPU memory.\nArgument buffer layout for <code>dispatch_indirect</code> commands.\nDisplay-P3 color space\nLists various ways the underlying platform does not …\nBinary flags listing features that may or may not be …\nRepresents the sets of additional limits on an adapter, …\nArgument buffer layout for <code>draw_indexed_indirect</code> commands.\nArgument buffer layout for <code>draw_indirect</code> commands.\nD.component\nD.alpha\nDirect3D-12 (Windows)\nConfiguration for the DX12 backend.\nSelects which DX12 shader compiler to use.\nDXC shader model.\nThe Dxc compiler is new, fast and maintained.\nIntegral type used for dynamic bind group offsets.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nAttempted to obtain adapter specified by environment …\nFunction passes if new value is equal to existing value. …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nFace of a vertex.\nBits from <code>Features</code> in array form\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nOne half-precision float (no Rust equiv). <code>f32</code> in shaders.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nFront face\nVertex winding order which classifies the “front” face …\nThe Fxc compiler (default) is old, slow and unmaintained.\nOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, …\nConfiguration for the OpenGL/OpenGLES backend.\nDictate the behavior of fences in OpenGL.\nSelects which OpenGL ES 3 minor version to request.\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\n<code>wgpu-hal</code>’s part of <code>InternalCounters</code>.\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nAlignment requirement for instance buffers used in …\nOld name for a <code>TexelCopyBufferInfo</code>.\nOld name for a <code>TexelCopyTextureInfo</code>.\nOld name for a <code>CopyExternalImageDestInfo</code>.\nOld name for a <code>TexelCopyBufferLayout</code>.\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nThe alpha channel, if it exists, of the textures is …\nVertex data is advanced every instance.\nOptions for creating an instance.\nInstance debugging flags.\nThe types of the acceleration structure are instances\nIntegrated GPU with shared CPU/GPU memory.\nAn internal counter for debugging purposes\nAll internal counters, exposed for debugging purposes.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nMinimum alignment of buffer mappings.\nPresentation frames are kept in a single-frame queue. …\nApplications that have control over the content that is …\nmax(Src, Dst)\nDescribes a memory block in the <code>AllocatorReport</code>.\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nMetal API (Apple platforms)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nPassthrough for MSL source code.\nDescribes the multi-sampling state of a render pipeline.\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nPower usage is not considered when choosing an adapter.\nDummy backend, which may be used for testing.\nConfiguration for the noop backend.\nFences in OpenGL behave normally. If you don’t know what …\nFunction passes if new value is not equal to existing …\nNo adapter available via the instance’s backends matched …\nQuery returns a single 64-bit number, serving as an …\nTracing disabled.\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nThe surface under the swap chain has changed.\nRanges of writes to push constant storage must be at least …\nFavor performance over memory usage (the default value).\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded in a …\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nThis was a poll.\nError states after a device poll\nStatus of device poll operation.\nPassed to <code>Device::poll</code> to control how and if it should …\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nIf possible, perform an incremental update.\nTiming and queueing with which frames are actually …\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a <code>QuerySetDescriptor</code>.\nSize in bytes of a single piece of query data.\nDescribes how to create a <code>QuerySet</code>.\nType of query contained in a <code>QuerySet</code>.\nThere are no active submissions in flight as of the …\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [−32767, …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 64 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [−127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nError when <code>Instance::request_adapter()</code> fails.\nOptions for requesting adapter.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [−…\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [−…\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nA sampler that can be used to sample a texture.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nDescriptor for a shader module given by Metal MSL source.\nDescriptor for a shader module given by SPIR-V binary.\nDescribes how shader bound checks should be performed.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nOne signed short (u16). <code>i32</code> in shaders.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed byte (i8). <code>i32</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nOne signed short (i16). [−32767, 32767] converted to …\nTwo signed shorts (i16). [−32767, 32767] converted to …\nFour signed shorts (i16). [−32767, 32767] converted to …\nOne signed byte (i8). [−127, 127] converted to float [−…\nTwo signed bytes (i8). [−127, 127] converted to float […\nFour signed bytes (i8). [−127, 127] converted to float […\nPassthrough for SPIR-V binaries.\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nThe statically-linked variant of Dxc.\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nDefines the capabilities of a given surface and adapter.\nConfigures a <code>Surface</code> for presentation.\nStatus of the received surface image.\nAlignment requirement for transform buffers used in …\nView of a buffer which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nView of a texture which can be used to copy to/from a …\nA texture binding.\nSelects a subset of the data a <code>Texture</code> holds.\nOrder in which texture data is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nFormat in which a texture’s texels are stored in GPU …\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nSpecifies a particular set of subresources in a texture.\nA texture transition for use with …\nDifferent ways that you can use a texture.\nSimilar to <code>TextureUsages</code>, but used only for …\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nThe requested Wait timed out before the submission was …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\nControls API call tracing and specifies where the trace is …\n[0, 0, 0, 0]\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nTriangle geometry version.\nThe types of the acceleration structure are triangles\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nOne unsigned short (u16). <code>u32</code> in shaders.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned byte (u8). <code>u32</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nThe surface status is not known since …\nTriggered by driver\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nOne unsigned short (u16). [0, 65535] converted to float […\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nOne unsigned byte (u8). [0, 255] converted to float [0, 1] …\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\nFour unsigned 8-bit integers, packed into a 32-bit integer …\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\nVertex buffer strides have to be a multiple of this number.\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API (Windows, Linux, Android, MacOS via …\nSame as <code>WaitForSubmissionIndex</code> but waits for the most …\nOn wgpu-core based backends, block until the given …\nThe requested Wait was satisfied before the timeout.\nThe texture can only be written in the shader and it:\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nAlpha component of the color\nAmount of allocated gpu memory attributed to acceleration …\nIncrement the counter by the provided amount.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nThe range of allocations in <code>AllocatorReport::allocations</code> …\nAll live allocations, sub-allocated from memory blocks.\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nReturns the number of array layers.\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nMacros for validation internal to the wgpu.\nBlue component of the color\nBack face mode.\nBackend used for device\nOptions the control the behavior of various backends.\nWhich <code>Backends</code> to enable.\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nDepth bias state.\nBinding index. Must match shader index and be unique …\nThe blending that is used for this pipeline.\nAll memory blocks.\nBorder color to use when <code>address_mode</code> is …\nEnforce bounds checks in shaders, even if the underlying …\nThe buffer to be copied to/from.\nThe buffer to transition.\nThe buffer to be copied to/from.\nAmount of allocated gpu memory attributed to buffers, in …\nWrapper to unsafely define a wrapper type that can be used …\nBytes per “row” in an image.\nBytes per “row” in an image.\nDepth bias clamp value (absolute).\nColor equation.\nThe color space of this texture.\nThe color space of this texture.\nComparison function that determines if the fail_op or …\nIf this is enabled, this is a comparison sampler using the …\nSurface that is required to be presentable with the …\nComputes the render extent of this texture.\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\n<code>wgpu-core</code> counters.\nThe number of samples calculated per pixel (for MSAA). For …\nIf the binding is an array of multiple resources. …\nTotal count of queries the set contains. Must not be zero. …\nThe face culling mode.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe dimension of the texture view. For 1D textures, this …\nDimensions of the texture.\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nOptions for the DX12 backend, [<code>Backend::Dx12</code>].\nWhether to allow the noop backend to be used.\nEntrypoint.\nOperation that is performed when stencil test fails.\nBehavior of OpenGL fences. Affects how …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nFlags to tune the behavior of the instance.\nCombined boolean flags.\nAdditional property flags for the format.\nFlags for the geometry.\nFlags for the bottom level acceleration structure.\nFlags for the bottom level acceleration structure.\nIndicates that only a fallback adapter can be returned. …\nIf false, the caller MUST ensure that all passed shaders …\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nThe texture format of the swap chain. The only formats …\nFormat of the texture view. Either must be the same as the …\nFormat of the texture.\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\nOptions for the OpenGL/OpenGLES backend, [<code>Backend::Gl</code>].\nWhich OpenGL ES 3 minor version to request, if using …\n<code>wgpu-hal</code> counters.\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nThe number of indices to draw.\nNumber of indices. Only needed if an index buffer is used. …\nFormat of an index. Only needed if an index buffer is used.\nTypes for dealing with Instances\nThe number of instances to draw.\nThe number of instances to draw.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the label of shader module passthrough descriptor.\nDebug label for the device.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of the sampler. This will show up in graphics …\nDebug label of this command buffer.\nDebug label of the render bundle encoder. This will show …\nDebug label for the query set.\nLabel for the bottom level acceleration structure.\nLabel for the top level acceleration structure.\nDebug label of the shader module. This will show up in …\nDebug label of the shader module. This will show up in …\nRange of layers to use.\nThe layout of the texture data in this buffer.\nThe layout of the texture data in this buffer.\nAdditional limits\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nTakes a closure and maps the label of the device …\nTakes a closure and maps the label of the buffer …\nTakes a closure and maps the label of the command encoder …\nTakes a closure and maps the label of the texture …\nTakes a closure and maps the label of the render bundle …\nTakes a closure and maps the label of the query set …\nTakes a closure and maps the label of the blas descriptor …\nTakes a closure and maps the label of the blas descriptor …\nTakes a closure and maps the label of the shader module …\nMaps the label and view formats of the texture descriptor …\nMap <code>view_formats</code> of the texture descriptor into another.\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nUtilitary math functions.\nAmount of bind groups that can be attached to a pipeline …\nAmount of individual resources within binding arrays that …\nAmount of individual samplers within binding arrays that …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the <code>workgroup_size</code> X dimension for a …\nThe maximum value of the <code>workgroup_size</code> Y dimension for a …\nThe maximum value of the <code>workgroup_size</code> Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nNumber of instances that can be stored in the acceleration …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nNumber of gpu memory allocations.\nHints for memory allocation strategies.\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level.\nHow to filter between mip map levels\nRange of mips to use.\nThe name provided to the <code>allocate()</code> function.\nAdapter name\nCreates a counter with value 0.\nOptions for the noop backend, [<code>Backend::Noop</code>].\nNumber of workgroups in each dimension x, y and z.\nOffset into the buffer that is the start of the texture. …\nThe offset in bytes of the allocation in its memory block.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nOperation that is performed when stencil test success.\nControls the way each polygon is rasterized. Can be either …\nPower preference for the adapter.\nThe premultiplication of this texture\nThe premultiplication of this texture\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nGet the counter’s value.\nStencil values are AND’d with this mask when reading and …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\n“Rows” that make up a single “image”.\n“Rows” that make up a single “image”.\nSample count of texture. If this is not 1, texture must …\nAn optional selector to transition only part of the …\nSets the counter to the provided value.\nWhich DX12 shader compiler to use.\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nThe size in bytes of the allocation.\nThe size in bytes of this memory block.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSlope depth biasing factor.\nShader MSL source.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nThe new state to transition to.\nThe new state to transition to.\nStencil state.\nIf the stencil aspect of the depth stencil attachment is …\nWhether data will be written to through this attachment.\nThis is equivalent to <code>core::assert</code> if the <code>strict_asserts</code> …\nThis is equivalent to <code>core::assert_eq</code> if the <code>strict_asserts</code>…\nThis is equivalent to <code>core::assert_ne</code> if the <code>strict_asserts</code>…\nWhen drawing strip topologies with indices, this is the …\nDecrement the counter by the provided amount.\nGet and reset the counter’s value.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nThe texture to transition.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nThe primitive topology used to interpret vertices.\nSum of the memory used by all allocations, in bytes.\nSum of the memory reserved by all memory blocks including …\nWhether API tracing for debugging is enabled, and where …\nThe type of the binding\nKind of query that this query set should contain.\nIf set to true, the polygon depth is not clipped to 0-1 …\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only usage guaranteed to …\nThe allowed usage(s) for the texture view. Must be a …\nAllowed usages of the texture. If used in other ways, the …\nBitflag of supported texture usages for the surface to use …\n<code>Backend</code>-specific vendor ID of the adapter\nThe number of vertices to draw.\nNumber of vertices.\nFormat of a vertex position, must be …\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nX position of the origin\nThe number of work groups in X dimension.\nY position of the origin\nThe number of work groups in Y dimension.\nZ position of the origin\nThe number of work groups in Z dimension.\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nWhether this acceleration structure can be used to create …\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nDescriptor for each triangle geometry.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to <code>dxcompiler.dll</code>.\nPath to <code>dxil.dll</code>.\nMaximum shader model the given dll supports.\nDefines the range of allowed memory block sizes for …\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nFences in OpenGL are short-circuited to always return <code>true</code> …\nNo explicit minor version is requested, the driver …\nOptions that are passed to a given backend.\nConfiguration for the DX12 backend.\nSelects which DX12 shader compiler to use.\nDXC shader model.\nThe Dxc compiler is new, fast and maintained.\nThe Fxc compiler (default) is old, slow and unmaintained.\nConfiguration for the OpenGL/OpenGLES backend.\nDictate the behavior of fences in OpenGL.\nSelects which OpenGL ES 3 minor version to request.\nOptions for creating an instance.\nInstance debugging flags.\nConfiguration for the noop backend.\nFences in OpenGL behave normally. If you don’t know what …\nThe statically-linked variant of Dxc.\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nOptions the control the behavior of various backends.\nWhich <code>Backends</code> to enable.\nOptions for the DX12 backend, [<code>Backend::Dx12</code>].\nWhether to allow the noop backend to be used.\nBehavior of OpenGL fences. Affects how …\nFlags to tune the behavior of the instance.\nOptions for the OpenGL/OpenGLES backend, [<code>Backend::Gl</code>].\nWhich OpenGL ES 3 minor version to request, if using …\nOptions for the noop backend, [<code>Backend::Noop</code>].\nWhich DX12 shader compiler to use.\nPath to <code>dxcompiler.dll</code>.\nPath to <code>dxil.dll</code>.\nMaximum shader model the given dll supports.\nAligns a <code>value</code> to an <code>alignment</code>.\nConvenience alias for the event loop builder used by Slint.\nThe winit event shouldn’t be processed further.\nThe winit event should propagate normally.\nInternal type used by the winit backend for thread …\nThis helper trait can be used to obtain access to the …\nReturned by callbacks passed to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if a <code>winit::window::Window</code> exists for this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters a window event filter callback for this Slint …\nReturns a future that resolves to the <code>winit::window::Window</code>…\nInvokes the specified callback with a reference to the …")