searchState.loadedDescShard("slint_interpreter", 0, "Slint interpreter library\nAttempt to set an output property.\nThe scene of items was rendered, but the back buffer was …\nThere is already a rendering notifier set, multiple …\nUse <code>Automatic</code> if you want to let Slint select the WGPU …\nUse the BackendSelector to configure one of Slint’s …\nThe scene of items is about to be rendered.\nCorrespond to the <code>bool</code> type in .slint\nCorrespond to the <code>bool</code> type in .slint\nA brush is a data structure that is used to describe how a …\nCorrespond to <code>brush</code> or <code>color</code> type in .slint.  For color, …\nCorrespond to <code>brush</code> or <code>color</code> type in .slint.  For color, …\nThis enum describes whether a Window is allowed to be …\nColor represents a color in the Slint run-time, …\nThe result of a compilation\nThis is the entry point of the crate, it can be used to …\nComponentCompiler is deprecated, use <code>Compiler</code> instead\nComponentDefinition is a representation of a compiled …\nThis trait describes the common public API of a strongly …\nThis represent an instance of a dynamic component\nThis structure represent a diagnostic emitted while …\nThis enum describes the level or severity of a diagnostic …\nThe diagnostic found is an error that prevents successful …\nError returned from the <code>invoke_from_event_loop()</code> and …\nThe event could not be sent because the event loop was …\nError returned by <code>ComponentInstance::get_property</code>\nThis trait is used to obtain references to global …\nThis enum describes a low-level access to specific …\nThe Window will be hidden (default action)\nAn image type that can be displayed by the Image element. …\nCorrespond to <code>image</code> type in .slint.\nCorrespond to the <code>image</code> type in .slint\nError returned by <code>ComponentInstance::invoke</code>\nThe return value of the <code>spawn_local()</code> function\nThe close request is rejected and the window will be kept …\nThe linear gradient variant of a brush describes the …\nError generated if an image cannot be loaded for any …\nThe position in logical pixels.\nThe size in logical screen pixels.\nA position represented in the coordinate space of logical …\nA size represented in the coordinate space of logical …\nUse <code>Manual</code> if you’ve initialized WGPU and want to supply …\nA model (that includes array in .slint)\nA model (that includes array in .slint)\nInstantiate a static ModelAdaptorVTable for a given type …\nThe rendering is done using OpenGL.\nThe event could not be sent because the Slint platform …\nThe Slint Platform does not provide an event loop.\nNo default platform was selected, or no platform could be …\nThere is no callback or function with the given name\nThere is no callback with the given name\nThere is no property with the given name\nThere is no property with the given name.\nAn <code>int</code> or a <code>float</code> (this is also used for unit based type …\nAn <code>int</code> or a <code>float</code> (this is also used for unit based type …\nAnother platform-specific error occurred\nAnother platform-specific error occurred.\nThe position in physical pixels.\nThe size in physical pixels.\nA position represented in the coordinate space of physical …\nA size represented in the coordinate space of physical …\nThe platform encountered a fatal error.\nThe radial gradient variant of a brush describes a circle …\nThe window has been created and the graphics …\nThis enum describes the different rendering states, that …\nThe window will be destroyed and/or graphics resources …\nConvenience alias for a pixel with three color channels …\nConvenience alias for a pixel with four color channels …\nRgbaColor stores the red, green, blue and alpha components …\nError returned by <code>ComponentInstance::set_callback</code>\nThere is already a platform set from another thread.\nError returned by <code>ComponentInstance::set_property</code>\nThis enum describes the different error scenarios that may …\nSharedPixelBuffer is a container for storing image data as …\nA string type used by the Slint run-time.\n(Re-export from corelib.) A string type used by the Slint …\n(Re-export from corelib.) SharedVector holds a …\nThe color variant of brush is a plain color that is to be …\nCorrespond to the <code>string</code> type in .slint\nCorrespond to the <code>string</code> type in .slint\nThis type represents a runtime instance of structure in …\nAn object\nAn object\nThe rendering backend does not support rendering notifiers.\nThis is a dynamically typed value used in the Slint …\nThis enum represents the different public variants of the …\nThe variant that expresses the non-type. This is the …\nThere is nothing in this value. That’s the default. For …\nThe rendering is based on WGPU 24.x. Use the provided …\nThis enum describes the different ways to configure WGPU …\nThis data structure provides settings for initializing …\nThe diagnostic found is a warning.\nStruct that’s used to hold weak references of a Slint …\nThe rendering is done on a HTML Canvas element using WebGL.\nThis type represents a window towards the windowing …\nThis struct represents a persistent handle to a window and …\nThe position of the window in either physical or logical …\nThe size of a window represented in either physical or …\nThe property exists but does not have a type matching the …\nAlpha Component\nIf the future hasn’t completed yet, this will make the …\nReturns the alpha channel of the color as u8 in the range …\nThe alpha component.\nReturns <code>(alpha, red, green, blue)</code> encoded as u32\nReturns the pixels interpreted as raw bytes.\nReturn a slice to the array\nReturn a slice to the pixel data.\nReturn a slice to the string\nReturns a new weak pointer.\nBlue Component\nBlue Component\nAdds the requirement that the selected backend must match …\nThe different options that are given to the selected …\nThe backends to use for the WGPU instance.\nReturns the blue channel of the color as u8 in the range …\nThe blue channel.\nReturns a new version of this color that has the …\nReturns a new version of this brush that has the …\nCompile a .slint file into a ComponentDefinition\nCompile a .slint file\nCompile some .slint code into a ComponentDefinition\nCompile some .slint code\nReturns the names of all publicly declared callbacks.\nClears the vector and removes all elements.\nCreates a new SharedPixelBuffer by cloning and converting …\nReturns a clone of this handle that’s a strong reference.\nIf the brush is SolidColor, the contained color is …\nReturn the component definition for the given name. If the …\nReturns the names of the components that were compiled.\nFind all positions of the components which are pointed by …\nReturns an iterator over the compiled components.\nCreates a new instance of the component and returns a …\nCreates a non Slint aware window with winit\nReturns a new version of this color that has the …\nReturns a new version of this brush that has the …\nReturn the <code>ComponentDefinition</code> that was used to create …\nThe label for the device. This is used to identify the …\nThe memory hints for the device.\nThe required features for the device.\nThe required limits for the device.\nReturns the diagnostics that were produced in the last …\nReturn an iterator over the diagnostics.\nDispatch a window event to the scene.\nFind the the <code>element</code> that was defined at the text position.\nFind the position of the <code>element</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a color from an integer encoded as <code>0xAARRGGBB</code>\nConstruct a color from the alpha, red, green and blue …\nConstruct a color from the alpha, red, green and blue …\nCreates a new Image from an existing OpenGL texture. The …\nConstruct a color from the hue, saturation, and value HSV …\nConvert a given logical position to a physical position by …\nConvert a given logical size to a physical size by …\nConvert a given physical position to a logical position by …\nConvert a given physical size to a logical size by …\nCreates a new Image from the specified shared pixel …\nConstruct a color from the red, green and blue color …\nConstruct a color from the red, green and blue color …\nCreates a new Image from the specified shared pixel …\nCreates a new Image from the specified shared pixel …\nCreate a SharedVector from a slice\nReturns the names of all publicly declared functions.\nGreen Component\nGreen Component\nReturns a reference that’s tied to the life time of the …\nGet the value for a given struct field\nReturn the value for a property within an exported global …\nReturn the value for a public property of this component.\nThis function provides access to instances of global …\nList of publicly declared callbacks in the exported global …\nList of publicly declared functions in the exported global …\nList of publicly declared properties in the exported …\nReturns the names of all exported global singletons\nReturns the green channel of the color as u8 in the range …\nThe green channel.\nReturns true if there is an animation currently active on …\nReturns true if the compilation failed. The errors can be …\nReturns the height of the image in pixels.\nThe height in logical.\nThe height in physical pixels;\nConvenience function for <code>crate::Window::hide()</code>. Hides the …\nHides the window, so that it is not visible anymore. The …\nThis module contains the code for the highlight of some …\nReturns the include paths the component compiler is …\nReturns the include paths the component compiler is …\nThe flags to fine-tune behaviour of the WGPU instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given callback or function with the arguments\nAdds the specified function to an internal queue, notifies …\nCall the given callback or function within a global …\nReturn true if the SharedVector is empty\nReturn true if the String is empty\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns if the window is currently fullscreen\nReturns if the window is currently maximized\nReturns if the window is currently minimized\nReturns true if this brush is fully opaque\nReturns true if this brush contains a fully transparent …\nReturns the visibility state of the window. This function …\nIterate over all the fields in this struct\nThis module contains the code serialize and desrialize …\nNumber of elements in the array\nSize of the string, in bytes. This excludes the …\nReturn the level for this diagnostic\nReturns the library paths the component compiler is …\nReturns the library paths the component compiler is …\nReturns a tuple with the line (starting at 1) and column …\nLoad an Image from a path to a file containing an image.\nCreates a new Image from the specified buffer, which …\nReturns the pixels interpreted as raw bytes.\nReturn a mutable slice to the array. If the array was …\nReturn a mutable slice to the pixel data. If the …\nReturn a message for this diagnostic\nReturns a new color that is a mix of this color and <code>other</code>. …\nThe name of this Component as written in the .slint file\nCreates a new BackendSelector.\nReturns a new ComponentCompiler.\nReturns a new Compiler.\nCreate a new window from a window adapter\nConstruct a new logical position from the given x and y …\nConstruct a new physical position from the given x and y …\nConstruct a new logical size from the given width and …\nConstruct a new physical size from the width and height …\nCreates a new SharedPixelBuffer with the given width and …\nCreates a new empty string\nThis function allows registering a callback that’s …\nReturns the path of the image on disk, if it was …\nRemoves last element from the array and returns it. If the …\nReturns the position of the window on the screen, in …\nThe power preference is used to influence the WGPU adapter …\nPrint the diagnostics to stderr\nPrint the diagnostics to stderr\nReturns an iterator over all publicly declared properties. …\nAdd an element to the array. If the array was shared, this …\nAppend a string to this string\nSchedules the main event loop for termination. This …\nRed Component\nRed Component\nReturn the <code>TypeLoader</code> used when parsing the code in the …\nReturns the red channel of the color as u8 in the range …\nThe red channel.\nAdds the requirement that the selected renderer must match …\nThis function issues a request to the windowing system to …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nAdds the requirement to the selector that the backend must …\nResize the array to the given size. If the array was …\nThis is a convenience function that first calls <code>Self::show</code>…\nEnters the main event loop. This is necessary in order to …\nThis function returns the scale factor that allows …\nCompletes the backend selection process and tries to …\nSet a handler for the callback with the given name. A …\nSet the value of a given struct field\nSets the callback that will be invoked when loading …\nSets the callback that will be invoked when loading …\nSet or unset the window to display fullscreen.\nSet a handler for the callback in the exported global …\nSet the value for a property within an exported global …\nSets the include paths used for looking up <code>.slint</code> imports …\nSets the include paths used for looking up <code>.slint</code> imports …\nSets the library paths used for looking up <code>@library</code> …\nSets the library paths used for looking up <code>@library</code> …\nMaximize or unmaximize the window.\nMinimize or unminimze the window.\nSets the nine-slice edges of the image.\nSets the position of the window on the screen, in physical …\nSet the value for a public property of this component.\nThis function allows registering a callback that’s …\nResizes the window to the specified size on the screen, in …\nSets the style to be used for widgets.\nSets the style to be used for widgets.\nThe domain used for translations\nThe domain used for translations\nSets the application id for use on Wayland or X11 with xdg …\nConvenience function for <code>crate::Window::show()</code>. This shows …\nShows the window on the screen. An additional strong …\nReturns the size of the window on the screen, in physical …\nReturns the size of the image in pixels.\nReturns the size of the Image in pixels.\nreturn the path of the source file where this error is …\nSpawns a <code>Future</code> to execute in the Slint event loop.\nReturns the widget style the compiler is currently using …\nReturns the widget style the compiler is currently using …\nTakes a snapshot of the window contents and returns it as …\nThis module contains a few functions used by the tests\nConverts this color to an RgbaColor struct for easy …\nConverts this color to an RgbaColor struct for easy …\nConverts this color to the HSV color space.\nConvert this physical position to a logical position by …\nConvert this physical size to a logical size by dividing …\nTurn the <code>WindowSize</code> into a <code>LogicalSize</code>.\nConvert this logical position to a physical position by …\nTurn the <code>WindowPosition</code> into a <code>PhysicalPosition</code>.\nConvert this logical size to a physical size by …\nTurn the <code>WindowSize</code> into a <code>PhysicalSize</code>.\nReturns the pixel buffer for the Image if available in RGB …\nReturns the pixel buffer for the Image if available in …\nReturns the pixel buffer for the Image if available in …\nReturns a new version of this color with the opacity …\nReturns a new version of this brush with the opacity …\nDispatch a window event to the scene.\nReturn the <code>TypeLoader</code> used when parsing the code in the …\nConvenience function that returns a new strongly …\nReturns a new strongly referenced component if some other …\nConvenience function that combines <code>invoke_from_event_loop()</code>…\nReturns the type variant that this value holds without the …\nReturns the width of the image in pixels.\nThe width in logical pixels.\nThe width in physical pixels.\nReturns the Window associated with this component. The …\nReturns a struct that implements the raw window handle …\nReturns a new version of this color with the opacity set …\nReturns a new version of this brush with the related color…\nCreate a new empty array with a pre-allocated capacity in …\nThe x coordinate.\nThe x coordinate.\nThe y coordinate.\nThe y coordinate.\nThe DOM element id of the HTML Canvas element used for …\nThe drawing context type used on the HTML Canvas element …\nThe WGPU device used for rendering.\nUse this function pointer to obtain access to the OpenGL …\nThe WGPU instance used for rendering.\nThe WGPU queue for used for command submission.\nThe WGPU adapter to use.\nThe WGPU device to use.\nThe WGPU instance to use.\nThe WGPU queue to use.\nArgument to filter the elements in the <code>element_positions</code> …\nExclude elements that are not visible because they are …\nInclude all elements\nReturn the positions of all instances of a specific element\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtension trait, adding JSON serialization methods\nConvert to JSON object to <code>Self</code>\nConvert to JSON encoded string to <code>Self</code>\nConvert to a JSON object\nConvert to a JSON-encoded string\nCreate a <code>Value</code> from a JSON Value\nCreate a <code>Value</code> from a JSON string\nWrite the <code>Value</code> out into a JSON value\nWrite the <code>Value</code> out into a JSON string\nWrapper around …\nWrapper around …\nWrapper around <code>i_slint_core::tests::slint_send_mouse_click</code>")